;; Object glib/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "glib/"
  :tables
  (list
    (semanticdb-table "galloca.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_ALLOCA_H__" variable (:constant-flag t) nil [1085 1099])
            ("glib/gtypes.h" include (:system-flag t) nil [1222 1246])
            ("alloca" function
               (:prototype-flag t
                :pointer 1
                :type "char")
                nil [1836 1852])
            ("g_alloca" variable (:constant-flag t) nil [3486 3494])
            ("g_newa" variable (:constant-flag t) nil [3780 3786]))          
      :file "galloca.h"
      :pointmax 3911
      :fsize 3910
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 1853 . 1864) (symbol 1822 . 1835) (string 1172 . 1213) (symbol 1166 . 1171) (punctuation 1165 . 1166))
      :lexical-table 
        '(("__G_ALLOCA_H__")
          ("g_newa" (spp-arg-list ("struct_type" "n_structs") 3786 . 3810) . ((semantic-list "((struct_type*) g_alloca (sizeof (struct_type) * (gsize) (n_structs)))" 3811 . 3881)))
          ("g_alloca" (spp-arg-list ("size") 3494 . 3500) . ((symbol "alloca" 3503 . 3509) (semantic-list "(size)" 3510 . 3516)))
          )
)
    (semanticdb-table "garray.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_ARRAY_H__" variable (:constant-flag t) nil [1084 1097])
            ("glib/gtypes.h" include (:system-flag t) nil [1220 1244])
            ((((0) "GBytes")) type (:superclasses ("_GBytes" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1261 1300])
            ((((0) "GArray")) type (:superclasses ("_GArray" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1301 1332])
            ((((0) "GByteArray")) type (:superclasses ("_GByteArray" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1333 1371])
            ((((0) "GPtrArray")) type (:superclasses ("_GPtrArray" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1372 1408])
            ("_GArray" type
               (:members (((("data" 1 nil nil nil)) variable (:type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1429 1441]) ((("len" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1444 1454]))
                :type "struct")
                nil [1410 1457])
            ("_GByteArray" type
               (:members (((("data" 1 nil nil nil)) variable (:type ("guint8" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1482 1495]) ((("len" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1498 1510]))
                :type "struct")
                nil [1459 1513])
            ("_GPtrArray" type
               (:members (((("pdata" 1 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1537 1553]) ((("len" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1556 1570]))
                :type "struct")
                nil [1515 1573])
            ("g_array_append_val" variable (:constant-flag t) nil [1791 1809])
            ("g_array_prepend_val" variable (:constant-flag t) nil [1858 1877])
            ("g_array_insert_val" variable (:constant-flag t) nil [1926 1944])
            ("g_array_index" variable (:constant-flag t) nil [1996 2009])
            ("g_ptr_array_index" variable (:constant-flag t) nil [4415 4432]))          
      :file "garray.h"
      :pointmax 8989
      :fsize 8988
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 8949 . 8960) (punctuation 8946 . 8947) (semantic-list 8842 . 8946) (symbol 8811 . 8838) (VOID 8799 . 8803) (symbol 8777 . 8798) (punctuation 8775 . 8776) (semantic-list 8709 . 8775) (symbol 8678 . 8695) (VOID 8666 . 8670) (symbol 8644 . 8665) (punctuation 8642 . 8643) (semantic-list 8547 . 8642) (symbol 8516 . 8541) (punctuation 8514 . 8515) (symbol 8504 . 8514) (symbol 8482 . 8503) (punctuation 8480 . 8481) (semantic-list 8420 . 8480) (symbol 8389 . 8419) (punctuation 8387 . 8388) (symbol 8377 . 8387) (symbol 8355 . 8376) (punctuation 8353 . 8354) (semantic-list 8293 . 8353) (symbol 8262 . 8287) (punctuation 8260 . 8261) (symbol 8250 . 8260) (symbol 8228 . 8249) (punctuation 8226 . 8227) (semantic-list 8166 . 8226) (symbol 8135 . 8156) (punctuation 8133 . 8134) (symbol 8123 . 8133) (symbol 8101 . 8122) (punctuation 8099 . 8100) (semantic-list 8009 . 8099) (symbol 7978 . 7998) (punctuation 7976 . 7977) (symbol 7966 . 7976) (symbol 7944 . 7965) (punctuation 7942 . 7943) (semantic-list 7852 . 7942) (symbol 7821 . 7840) (punctuation 7819 . 7820) (symbol 7809 . 7819) (symbol 7787 . 7808) (punctuation 7785 . 7786) (semantic-list 7760 . 7785) (symbol 7729 . 7747) (VOID 7717 . 7721) (symbol 7695 . 7716) (punctuation 7693 . 7694) (semantic-list 7668 . 7693) (symbol 7637 . 7653) (punctuation 7636 . 7637) (symbol 7625 . 7635) (symbol 7603 . 7624) (punctuation 7601 . 7602) (semantic-list 7576 . 7601) (symbol 7545 . 7571) (punctuation 7539 . 7540) (symbol 7533 . 7539) (symbol 7511 . 7532) (punctuation 7509 . 7510) (semantic-list 7443 . 7509) (symbol 7412 . 7429) (punctuation 7406 . 7407) (symbol 7400 . 7406) (symbol 7378 . 7399) (punctuation 7376 . 7377) (semantic-list 7343 . 7376) (symbol 7312 . 7334) (punctuation 7310 . 7311) (symbol 7300 . 7310) (symbol 7278 . 7299) (punctuation 7276 . 7277) (semantic-list 7185 . 7276) (symbol 7154 . 7175) (punctuation 7152 . 7153) (symbol 7142 . 7152) (symbol 7120 . 7141) (punctuation 7118 . 7119) (semantic-list 7112 . 7118) (symbol 7081 . 7097) (punctuation 7079 . 7080) (symbol 7069 . 7079) (symbol 7047 . 7068) (punctuation 6958 . 6959) (semantic-list 6864 . 6958) (symbol 6833 . 6852) (VOID 6822 . 6826) (symbol 6800 . 6821) (punctuation 6798 . 6799) (semantic-list 6696 . 6798) (symbol 6665 . 6691) (VOID 6654 . 6658) (symbol 6632 . 6653) (punctuation 6630 . 6631) (semantic-list 6565 . 6630) (symbol 6534 . 6550) (VOID 6523 . 6527) (symbol 6501 . 6522) (punctuation 6499 . 6500) (semantic-list 6338 . 6499) (symbol 6307 . 6325) (VOID 6296 . 6300) (symbol 6273 . 6295) (punctuation 6271 . 6272) (semantic-list 6214 . 6271) (symbol 6183 . 6198) (VOID 6172 . 6176) (symbol 6150 . 6171) (punctuation 6148 . 6149) (semantic-list 6055 . 6148) (symbol 6024 . 6048) (punctuation 6023 . 6024) (symbol 6013 . 6022) (symbol 5991 . 6012) (punctuation 5989 . 5990) (semantic-list 5932 . 5989) (symbol 5901 . 5924) (symbol 5890 . 5898) (symbol 5868 . 5889) (punctuation 5866 . 5867) (semantic-list 5809 . 5866) (symbol 5778 . 5796) (symbol 5767 . 5775) (symbol 5745 . 5766) (punctuation 5743 . 5744) (semantic-list 5684 . 5743) (symbol 5653 . 5682) (symbol 5642 . 5650) (symbol 5620 . 5641) (punctuation 5618 . 5619) (semantic-list 5559 . 5618) (symbol 5528 . 5552) (symbol 5517 . 5525) (symbol 5495 . 5516) (punctuation 5493 . 5494) (semantic-list 5434 . 5493) (symbol 5403 . 5423) (VOID 5392 . 5396) (symbol 5370 . 5391) (punctuation 5368 . 5369) (semantic-list 5263 . 5368) (symbol 5232 . 5257) (VOID 5221 . 5225) (symbol 5199 . 5220) (punctuation 5197 . 5198) (semantic-list 5172 . 5197) (symbol 5141 . 5158) (VOID 5130 . 5134) (symbol 5108 . 5129) (punctuation 5106 . 5107) (semantic-list 5081 . 5106) (symbol 5050 . 5065) (punctuation 5048 . 5049) (symbol 5039 . 5048) (symbol 5017 . 5038) (punctuation 5015 . 5016) (semantic-list 4954 . 5015) (symbol 4923 . 4939) (punctuation 4920 . 4921) (symbol 4912 . 4920) (symbol 4890 . 4911) (punctuation 4888 . 4889) (semantic-list 4810 . 4888) (symbol 4779 . 4799) (punctuation 4777 . 4778) (symbol 4768 . 4777) (symbol 4746 . 4767) (punctuation 4744 . 4745) (semantic-list 4711 . 4744) (symbol 4680 . 4701) (punctuation 4678 . 4679) (symbol 4669 . 4678) (symbol 4647 . 4668) (punctuation 4645 . 4646) (semantic-list 4608 . 4645) (symbol 4577 . 4607) (punctuation 4575 . 4576) (symbol 4566 . 4575) (symbol 4544 . 4565) (punctuation 4542 . 4543) (semantic-list 4536 . 4542) (symbol 4505 . 4520) (punctuation 4503 . 4504) (symbol 4494 . 4503) (symbol 4472 . 4493) (punctuation 4186 . 4187) (semantic-list 4096 . 4186) (symbol 4070 . 4092) (VOID 4062 . 4066) (symbol 4040 . 4061) (punctuation 4038 . 4039) (semantic-list 3938 . 4038) (symbol 3912 . 3934) (VOID 3904 . 3908) (symbol 3882 . 3903) (punctuation 3880 . 3881) (semantic-list 3816 . 3880) (symbol 3790 . 3802) (VOID 3782 . 3786) (symbol 3760 . 3781) (punctuation 3758 . 3759) (semantic-list 3667 . 3758) (symbol 3641 . 3661) (punctuation 3639 . 3640) (symbol 3633 . 3639) (symbol 3611 . 3632) (punctuation 3609 . 3610) (semantic-list 3551 . 3609) (symbol 3525 . 3550) (punctuation 3523 . 3524) (symbol 3517 . 3523) (symbol 3495 . 3516) (punctuation 3493 . 3494) (semantic-list 3435 . 3493) (symbol 3409 . 3429) (punctuation 3407 . 3408) (symbol 3401 . 3407) (symbol 3379 . 3400) (punctuation 3377 . 3378) (semantic-list 3319 . 3377) (symbol 3293 . 3309) (punctuation 3291 . 3292) (symbol 3285 . 3291) (symbol 3263 . 3284) (punctuation 3261 . 3262) (semantic-list 3142 . 3261) (symbol 3116 . 3135) (punctuation 3114 . 3115) (symbol 3108 . 3114) (symbol 3086 . 3107) (punctuation 3084 . 3085) (semantic-list 2998 . 3084) (symbol 2972 . 2992) (punctuation 2970 . 2971) (symbol 2964 . 2970) (symbol 2942 . 2963) (punctuation 2940 . 2941) (semantic-list 2854 . 2940) (symbol 2828 . 2847) (punctuation 2826 . 2827) (symbol 2820 . 2826) (symbol 2798 . 2819) (punctuation 2796 . 2797) (semantic-list 2771 . 2796) (symbol 2745 . 2769) (symbol 2737 . 2742) (symbol 2715 . 2736) (punctuation 2713 . 2714) (semantic-list 2688 . 2713) (symbol 2662 . 2675) (VOID 2654 . 2658) (symbol 2632 . 2653) (punctuation 2630 . 2631) (semantic-list 2605 . 2630) (symbol 2579 . 2590) (punctuation 2578 . 2579) (symbol 2571 . 2577) (symbol 2549 . 2570) (punctuation 2547 . 2548) (semantic-list 2483 . 2547) (symbol 2457 . 2469) (punctuation 2454 . 2455) (symbol 2449 . 2454) (symbol 2427 . 2448) (punctuation 2425 . 2426) (semantic-list 2278 . 2425) (symbol 2252 . 2269) (punctuation 2250 . 2251) (symbol 2244 . 2250) (symbol 2222 . 2243) (punctuation 2220 . 2221) (semantic-list 2113 . 2220) (symbol 2087 . 2098) (punctuation 2085 . 2086) (symbol 2079 . 2085) (symbol 2057 . 2078) (symbol 1246 . 1259) (string 1170 . 1211) (symbol 1164 . 1169) (punctuation 1163 . 1164))
      :lexical-table 
        '(("g_ptr_array_index" (spp-arg-list ("array" "index_") 4432 . 4446) . ((semantic-list "((array)->pdata)" 4447 . 4463) (semantic-list "[index_]" 4463 . 4471)))
          ("g_array_append_val" (spp-arg-list ("a" "v") 1809 . 1814) . ((symbol "g_array_append_vals" 1817 . 1836) (semantic-list "(a, &(v), 1)" 1837 . 1849)))
          ("g_array_index" (spp-arg-list ("a" "t" "i") 2009 . 2016) . ((semantic-list "(((t*) (void *) (a)->data) [(i)])" 2022 . 2055)))
          ("g_array_prepend_val" (spp-arg-list ("a" "v") 1877 . 1882) . ((symbol "g_array_prepend_vals" 1884 . 1904) (semantic-list "(a, &(v), 1)" 1905 . 1917)))
          ("__G_ARRAY_H__")
          ("g_array_insert_val" (spp-arg-list ("a" "i" "v") 1944 . 1951) . ((symbol "g_array_insert_vals" 1952 . 1971) (semantic-list "(a, i, &(v), 1)" 1972 . 1987)))
          )
)
    (semanticdb-table "gasyncqueue.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_ASYNCQUEUE_H__" variable (:constant-flag t) nil [1089 1107])
            ("glib/gthread.h" include (:system-flag t) nil [1230 1255])
            ((((0) "GAsyncQueue")) type (:superclasses ("_GAsyncQueue" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1272 1312]))          
      :file "gasyncqueue.h"
      :pointmax 5661
      :fsize 5660
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 5616 . 5627) (punctuation 5613 . 5614) (semantic-list 5511 . 5613) (symbol 5476 . 5508) (symbol 5463 . 5471) (semantic-list 5426 . 5462) (symbol 5407 . 5426) (punctuation 5405 . 5406) (semantic-list 5303 . 5405) (symbol 5268 . 5291) (symbol 5255 . 5263) (semantic-list 5227 . 5254) (symbol 5208 . 5227) (punctuation 5205 . 5206) (semantic-list 5107 . 5205) (symbol 5072 . 5105) (VOID 5059 . 5063) (symbol 5036 . 5058) (punctuation 5034 . 5035) (semantic-list 4936 . 5034) (symbol 4901 . 4925) (VOID 4888 . 4892) (symbol 4865 . 4887) (punctuation 4863 . 4864) (semantic-list 4765 . 4863) (symbol 4730 . 4759) (symbol 4717 . 4725) (symbol 4694 . 4716) (punctuation 4692 . 4693) (semantic-list 4594 . 4692) (symbol 4559 . 4579) (symbol 4546 . 4554) (symbol 4523 . 4545) (punctuation 4520 . 4521) (semantic-list 4344 . 4520) (symbol 4309 . 4336) (VOID 4296 . 4300) (symbol 4274 . 4295) (punctuation 4272 . 4273) (semantic-list 4096 . 4272) (symbol 4061 . 4079) (VOID 4048 . 4052) (symbol 4026 . 4047) (punctuation 4024 . 4025) (semantic-list 3999 . 4024) (symbol 3964 . 3993) (symbol 3951 . 3955) (symbol 3929 . 3950) (punctuation 3927 . 3928) (semantic-list 3902 . 3927) (symbol 3867 . 3887) (symbol 3854 . 3858) (symbol 3832 . 3853) (punctuation 3830 . 3831) (semantic-list 3729 . 3830) (symbol 3694 . 3728) (symbol 3681 . 3689) (symbol 3659 . 3680) (punctuation 3657 . 3658) (semantic-list 3556 . 3657) (symbol 3521 . 3546) (symbol 3508 . 3516) (symbol 3486 . 3507) (punctuation 3484 . 3485) (semantic-list 3459 . 3484) (symbol 3424 . 3454) (symbol 3411 . 3419) (symbol 3389 . 3410) (punctuation 3387 . 3388) (semantic-list 3362 . 3387) (symbol 3327 . 3348) (symbol 3314 . 3322) (symbol 3292 . 3313) (punctuation 3290 . 3291) (semantic-list 3265 . 3290) (symbol 3230 . 3256) (symbol 3217 . 3225) (symbol 3195 . 3216) (punctuation 3193 . 3194) (semantic-list 3168 . 3193) (symbol 3133 . 3150) (symbol 3120 . 3128) (symbol 3098 . 3119) (punctuation 3096 . 3097) (semantic-list 2847 . 3096) (symbol 2812 . 2846) (VOID 2799 . 2803) (symbol 2777 . 2798) (punctuation 2775 . 2776) (semantic-list 2526 . 2775) (symbol 2491 . 2516) (VOID 2478 . 2482) (symbol 2456 . 2477) (punctuation 2454 . 2455) (semantic-list 2356 . 2454) (symbol 2321 . 2348) (VOID 2308 . 2312) (symbol 2286 . 2307) (punctuation 2284 . 2285) (semantic-list 2186 . 2284) (symbol 2151 . 2169) (VOID 2138 . 2142) (symbol 2116 . 2137) (punctuation 2113 . 2114) (semantic-list 2088 . 2113) (symbol 2053 . 2083) (VOID 2040 . 2044) (semantic-list 2018 . 2039) (symbol 1999 . 2018) (punctuation 1996 . 1997) (semantic-list 1971 . 1996) (symbol 1936 . 1962) (VOID 1923 . 1927) (semantic-list 1903 . 1922) (symbol 1884 . 1903) (punctuation 1881 . 1882) (semantic-list 1856 . 1881) (symbol 1821 . 1840) (VOID 1808 . 1812) (symbol 1786 . 1807) (punctuation 1784 . 1785) (semantic-list 1759 . 1784) (symbol 1724 . 1741) (punctuation 1723 . 1724) (symbol 1711 . 1722) (symbol 1689 . 1710) (punctuation 1687 . 1688) (semantic-list 1662 . 1687) (symbol 1627 . 1647) (VOID 1614 . 1618) (symbol 1592 . 1613) (punctuation 1590 . 1591) (semantic-list 1565 . 1590) (symbol 1530 . 1548) (VOID 1517 . 1521) (symbol 1495 . 1516) (punctuation 1493 . 1494) (semantic-list 1462 . 1493) (symbol 1427 . 1449) (punctuation 1426 . 1427) (symbol 1414 . 1425) (symbol 1392 . 1413) (punctuation 1390 . 1391) (semantic-list 1384 . 1390) (symbol 1349 . 1366) (punctuation 1348 . 1349) (symbol 1336 . 1347) (symbol 1314 . 1335) (symbol 1257 . 1270) (string 1180 . 1221) (symbol 1174 . 1179) (punctuation 1173 . 1174))
      :lexical-table 
        '(("__G_ASYNCQUEUE_H__")
          )
)
    (semanticdb-table "gatomic.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_ATOMIC_H__" variable (:constant-flag t) nil [784 798])
            ("glib/gtypes.h" include (:system-flag t) nil [921 945])
            ("g_atomic_int_get" variable (:constant-flag t) nil [13101 13117])
            ("g_atomic_int_set" variable (:constant-flag t) nil [13177 13193])
            ("g_atomic_int_compare_and_exchange" variable (:constant-flag t) nil [13278 13311])
            ("g_atomic_int_add" variable (:constant-flag t) nil [13424 13440])
            ("g_atomic_int_and" variable (:constant-flag t) nil [13512 13528])
            ("g_atomic_int_or" variable (:constant-flag t) nil [13601 13616])
            ("g_atomic_int_xor" variable (:constant-flag t) nil [13688 13704])
            ("g_atomic_int_inc" variable (:constant-flag t) nil [13777 13793])
            ("g_atomic_int_dec_and_test" variable (:constant-flag t) nil [13853 13878])
            ("g_atomic_pointer_get" variable (:constant-flag t) nil [13948 13968])
            ("g_atomic_pointer_set" variable (:constant-flag t) nil [14021 14041])
            ("g_atomic_pointer_compare_and_exchange" variable (:constant-flag t) nil [14125 14162])
            ("g_atomic_pointer_add" variable (:constant-flag t) nil [14292 14312])
            ("g_atomic_pointer_and" variable (:constant-flag t) nil [14388 14408])
            ("g_atomic_pointer_or" variable (:constant-flag t) nil [14483 14502])
            ("g_atomic_pointer_xor" variable (:constant-flag t) nil [14576 14596]))          
      :file "gatomic.h"
      :pointmax 14765
      :fsize 14765
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 4151 . 4162) (punctuation 4148 . 4149) (semantic-list 4040 . 4148) (symbol 4002 . 4031) (symbol 3978 . 3982) (semantic-list 3959 . 3977) (symbol 3932 . 3959) (semantic-list #("(g_atomic_int_add ((gint *) (atomic), (val)))" 0 1 (macros (("val") ("atomic")))) 3960 . 3977) (punctuation 3929 . 3930) (semantic-list 3821 . 3929) (symbol 3783 . 3803) (symbol 3759 . 3764) (symbol 3737 . 3758) (punctuation 3735 . 3736) (semantic-list 3627 . 3735) (symbol 3589 . 3608) (symbol 3565 . 3570) (symbol 3542 . 3564) (punctuation 3540 . 3541) (semantic-list 3432 . 3540) (symbol 3394 . 3414) (symbol 3370 . 3375) (symbol 3347 . 3369) (punctuation 3345 . 3346) (semantic-list 3237 . 3345) (symbol 3199 . 3219) (symbol 3175 . 3181) (symbol 3153 . 3174) (punctuation 3151 . 3152) (semantic-list 2953 . 3151) (symbol 2915 . 2952) (symbol 2891 . 2899) (symbol 2869 . 2890) (punctuation 2867 . 2868) (semantic-list 2756 . 2867) (symbol 2718 . 2738) (VOID 2694 . 2698) (symbol 2672 . 2693) (punctuation 2670 . 2671) (semantic-list 2641 . 2670) (symbol 2603 . 2623) (symbol 2579 . 2587) (symbol 2557 . 2578) (punctuation 2554 . 2555) (semantic-list 2446 . 2554) (symbol 2408 . 2424) (symbol 2384 . 2389) (symbol 2362 . 2383) (punctuation 2360 . 2361) (semantic-list 2252 . 2360) (symbol 2214 . 2229) (symbol 2190 . 2195) (symbol 2167 . 2189) (punctuation 2165 . 2166) (semantic-list 2057 . 2165) (symbol 2019 . 2035) (symbol 1995 . 2000) (symbol 1972 . 1994) (punctuation 1970 . 1971) (semantic-list 1862 . 1970) (symbol 1824 . 1840) (symbol 1800 . 1804) (symbol 1778 . 1799) (punctuation 1776 . 1777) (semantic-list 1578 . 1776) (symbol 1540 . 1573) (symbol 1516 . 1524) (symbol 1494 . 1515) (punctuation 1492 . 1493) (semantic-list 1468 . 1492) (symbol 1430 . 1455) (symbol 1406 . 1414) (symbol 1384 . 1405) (punctuation 1382 . 1383) (semantic-list 1358 . 1382) (symbol 1320 . 1336) (VOID 1296 . 1300) (symbol 1274 . 1295) (punctuation 1272 . 1273) (semantic-list 1161 . 1272) (symbol 1123 . 1139) (VOID 1099 . 1103) (symbol 1077 . 1098) (punctuation 1075 . 1076) (semantic-list 1046 . 1075) (symbol 1008 . 1024) (symbol 984 . 988) (symbol 962 . 983) (symbol 947 . 960) (string 871 . 912) (symbol 865 . 870) (punctuation 864 . 865))
      :lexical-table 
        '(("__G_ATOMIC_H__")
          ("g_atomic_int_or" (spp-arg-list ("atomic" "val") 13616 . 13629) . ((semantic-list "(g_atomic_int_or ((guint *) (atomic), (val)))" 13634 . 13679)))
          ("g_atomic_pointer_get" (spp-arg-list ("atomic") 13968 . 13976) . ((semantic-list "(g_atomic_pointer_get (atomic))" 13981 . 14012)))
          ("g_atomic_pointer_compare_and_exchange" (spp-arg-list ("atomic" "oldval" "newval") 14162 . 14186) . ((semantic-list "(g_atomic_pointer_compare_and_exchange ((atomic), (gpointer) (oldval), (gpointer) (newval)))" 14191 . 14283)))
          ("g_atomic_int_and" (spp-arg-list ("atomic" "val") 13528 . 13541) . ((semantic-list "(g_atomic_int_and ((guint *) (atomic), (val)))" 13546 . 13592)))
          ("g_atomic_int_compare_and_exchange" (spp-arg-list ("atomic" "oldval" "newval") 13311 . 13335) . ((semantic-list "(g_atomic_int_compare_and_exchange ((gint *) (atomic), (oldval), (newval)))" 13340 . 13415)))
          ("g_atomic_int_dec_and_test" (spp-arg-list ("atomic") 13878 . 13886) . ((semantic-list "(g_atomic_int_dec_and_test ((gint *) (atomic)))" 13891 . 13938)))
          ("g_atomic_pointer_set" (spp-arg-list ("atomic" "newval") 14041 . 14057) . ((semantic-list "(g_atomic_pointer_set ((atomic), (gpointer) (newval)))" 14062 . 14116)))
          ("g_atomic_int_xor" (spp-arg-list ("atomic" "val") 13704 . 13717) . ((semantic-list "(g_atomic_int_xor ((guint *) (atomic), (val)))" 13722 . 13768)))
          ("g_atomic_pointer_add" (spp-arg-list ("atomic" "val") 14312 . 14325) . ((semantic-list "(g_atomic_pointer_add ((atomic), (gssize) (val)))" 14330 . 14379)))
          ("g_atomic_int_get" (spp-arg-list ("atomic") 13117 . 13125) . ((semantic-list "(g_atomic_int_get ((gint *) (atomic)))" 13130 . 13168)))
          ("g_atomic_int_inc" (spp-arg-list ("atomic") 13793 . 13801) . ((semantic-list "(g_atomic_int_inc ((gint *) (atomic)))" 13806 . 13844)))
          ("g_atomic_pointer_and" (spp-arg-list ("atomic" "val") 14408 . 14421) . ((semantic-list "(g_atomic_pointer_and ((atomic), (gsize) (val)))" 14426 . 14474)))
          ("g_atomic_int_set" (spp-arg-list ("atomic" "newval") 13193 . 13209) . ((semantic-list "(g_atomic_int_set ((gint *) (atomic), (gint) (newval)))" 13214 . 13269)))
          ("g_atomic_pointer_or" (spp-arg-list ("atomic" "val") 14502 . 14515) . ((semantic-list "(g_atomic_pointer_or ((atomic), (gsize) (val)))" 14520 . 14567)))
          ("g_atomic_int_add" (spp-arg-list ("atomic" "val") 13440 . 13453) . ((semantic-list "(g_atomic_int_add ((gint *) (atomic), (val)))" 13458 . 13503)))
          ("g_atomic_pointer_xor" (spp-arg-list ("atomic" "val") 14596 . 14609) . ((semantic-list "(g_atomic_pointer_xor ((atomic), (gsize) (val)))" 14614 . 14662)))
          )
)
    (semanticdb-table "gbacktrace.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_BACKTRACE_H__" variable (:constant-flag t) nil [1088 1105])
            ("glib/gtypes.h" include (:system-flag t) nil [1228 1252])
            ("signal.h" include (:system-flag t) nil [1253 1272])
            ("G_BREAKPOINT" variable (:constant-flag t) nil [2387 2399]))          
      :file "gbacktrace.h"
      :pointmax 2520
      :fsize 2519
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 2476 . 2487) (punctuation 1431 . 1432) (semantic-list 1408 . 1431) (symbol 1385 . 1407) (VOID 1380 . 1384) (symbol 1358 . 1379) (punctuation 1356 . 1357) (semantic-list 1333 . 1356) (symbol 1316 . 1332) (VOID 1311 . 1315) (symbol 1289 . 1310) (symbol 1274 . 1287) (string 1178 . 1219) (symbol 1172 . 1177) (punctuation 1171 . 1172))
      :lexical-table 
        '(("G_BREAKPOINT" (spp-arg-list nil 2399 . 2401) . 
              ((symbol "G_STMT_START" 2409 . 2421) (semantic-list "{ raise (SIGTRAP); }" 2421 . 2441) (symbol "G_STMT_END" 2441 . 2451)))
          ("__G_BACKTRACE_H__")
          )
)
    (semanticdb-table "gbase64.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_BASE64_H__" variable (:constant-flag t) nil [812 826])
            ("glib/gtypes.h" include (:system-flag t) nil [949 973])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [1704 1718])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [2135 2149]))          
      :file "gbase64.h"
      :pointmax 2325
      :fsize 2324
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 2284 . 2295) (punctuation 2280 . 2281) (semantic-list 2204 . 2280) (symbol 2180 . 2203) (punctuation 2179 . 2180) (symbol 2172 . 2178) (symbol 2150 . 2171) (semantic-list 2058 . 2134) (symbol 2034 . 2049) (punctuation 2033 . 2034) (symbol 2026 . 2032) (symbol 2004 . 2025) (punctuation 2002 . 2003) (semantic-list 1773 . 2002) (symbol 1749 . 1769) (symbol 1741 . 1746) (symbol 1719 . 1740) (semantic-list 1631 . 1703) (symbol 1607 . 1622) (punctuation 1604 . 1605) (symbol 1599 . 1604) (symbol 1577 . 1598) (punctuation 1575 . 1576) (semantic-list 1389 . 1575) (symbol 1365 . 1386) (symbol 1357 . 1362) (symbol 1335 . 1356) (punctuation 1333 . 1334) (semantic-list 1044 . 1333) (symbol 1020 . 1040) (symbol 1012 . 1017) (symbol 990 . 1011) (symbol 975 . 988) (string 899 . 940) (symbol 893 . 898) (punctuation 892 . 893))
      :lexical-table 
        '(("__G_BASE64_H__")
          )
)
    (semanticdb-table "gbitlock.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_BITLOCK_H__" variable (:constant-flag t) nil [823 838])
            ("glib/gtypes.h" include (:system-flag t) nil [840 864]))          
      :file "gbitlock.h"
      :pointmax 2899
      :fsize 2900
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 2858 . 2869) (punctuation 1949 . 1950) (semantic-list 1857 . 1949) (symbol 1825 . 1845) (VOID 1815 . 1819) (symbol 1793 . 1814) (punctuation 1791 . 1792) (semantic-list 1699 . 1791) (symbol 1667 . 1688) (symbol 1657 . 1665) (symbol 1635 . 1656) (punctuation 1633 . 1634) (semantic-list 1541 . 1633) (symbol 1509 . 1527) (VOID 1499 . 1503) (symbol 1477 . 1498) (punctuation 1474 . 1475) (semantic-list 1382 . 1474) (symbol 1350 . 1362) (VOID 1340 . 1344) (symbol 1318 . 1339) (punctuation 1316 . 1317) (semantic-list 1224 . 1316) (symbol 1192 . 1205) (symbol 1182 . 1190) (symbol 1160 . 1181) (punctuation 1158 . 1159) (semantic-list 1066 . 1158) (symbol 1034 . 1044) (VOID 1024 . 1028) (symbol 1002 . 1023) (symbol 987 . 1000) (string 937 . 978) (symbol 931 . 936) (punctuation 930 . 931))
      :lexical-table 
        '(("__G_BITLOCK_H__")
          )
)
    (semanticdb-table "gbookmarkfile.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_BOOKMARK_FILE_H__" variable (:constant-flag t) nil [862 883])
            ("glib/gerror.h" include (:system-flag t) nil [1006 1030])
            ("time.h" include (:system-flag t) nil [1031 1048])
            ("G_BOOKMARK_FILE_ERROR" variable (:constant-flag t) nil [1277 1298])
            ((((0) "GBookmarkFileError")) type (:superclasses ("" type (:members (("G_BOOKMARK_FILE_ERROR_INVALID_URI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2034 2068]) ("G_BOOKMARK_FILE_ERROR_INVALID_VALUE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2071 2107]) ("G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2110 2151]) ("G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2154 2190]) ("G_BOOKMARK_FILE_ERROR_READ" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2193 2220]) ("G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2223 2262]) ("G_BOOKMARK_FILE_ERROR_WRITE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2265 2293]) ("G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2296 2334])) :type "enum") nil nil) :type "typedef") nil [2017 2354])
            ((((0) "GBookmarkFile")) type (:superclasses ("_GBookmarkFile" type (:prototype t :type "struct") nil nil) :type "typedef") nil [2551 2595])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [3520 3534])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [4035 4049])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [4385 4399])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [4733 4747])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [5509 5523])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [6115 6129])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [8853 8867]))          
      :file "gbookmarkfile.h"
      :pointmax 9681
      :fsize 9680
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 9633 . 9644) (punctuation 9630 . 9631) (semantic-list 9501 . 9630) (symbol 9465 . 9490) (symbol 9450 . 9458) (symbol 9428 . 9449) (punctuation 9426 . 9427) (semantic-list 9336 . 9426) (symbol 9300 . 9327) (symbol 9285 . 9293) (symbol 9263 . 9284) (punctuation 9261 . 9262) (semantic-list 9139 . 9261) (symbol 9103 . 9137) (symbol 9088 . 9096) (symbol 9066 . 9087) (punctuation 9064 . 9065) (semantic-list 8941 . 9064) (symbol 8905 . 8933) (symbol 8890 . 8898) (symbol 8868 . 8889) (semantic-list 8792 . 8852) (symbol 8756 . 8780) (punctuation 8748 . 8749) (punctuation 8747 . 8748) (symbol 8741 . 8746) (symbol 8719 . 8740) (punctuation 8717 . 8718) (semantic-list 8691 . 8717) (symbol 8655 . 8679) (symbol 8640 . 8644) (symbol 8618 . 8639) (punctuation 8616 . 8617) (semantic-list 8559 . 8616) (symbol 8523 . 8547) (symbol 8508 . 8516) (symbol 8486 . 8507) (punctuation 8484 . 8485) (semantic-list 8393 . 8484) (symbol 8357 . 8384) (symbol 8342 . 8348) (symbol 8320 . 8341) (punctuation 8318 . 8319) (semantic-list 8226 . 8318) (symbol 8190 . 8217) (VOID 8175 . 8179) (symbol 8153 . 8174) (punctuation 8151 . 8152) (semantic-list 8061 . 8151) (symbol 8025 . 8053) (symbol 8010 . 8016) (symbol 7988 . 8009) (punctuation 7986 . 7987) (semantic-list 7893 . 7986) (symbol 7857 . 7885) (VOID 7842 . 7846) (symbol 7820 . 7841) (punctuation 7818 . 7819) (semantic-list 7728 . 7818) (symbol 7692 . 7717) (symbol 7677 . 7683) (symbol 7655 . 7676) (punctuation 7653 . 7654) (semantic-list 7563 . 7653) (symbol 7527 . 7552) (VOID 7512 . 7516) (symbol 7490 . 7511) (punctuation 7488 . 7489) (semantic-list 7329 . 7488) (symbol 7293 . 7317) (symbol 7278 . 7286) (symbol 7256 . 7277) (punctuation 7254 . 7255) (semantic-list 7128 . 7254) (symbol 7092 . 7116) (VOID 7077 . 7081) (symbol 7055 . 7076) (punctuation 7053 . 7054) (semantic-list 6963 . 7053) (symbol 6927 . 6957) (symbol 6912 . 6920) (symbol 6890 . 6911) (punctuation 6888 . 6889) (semantic-list 6793 . 6888) (symbol 6757 . 6787) (VOID 6742 . 6746) (symbol 6720 . 6741) (punctuation 6718 . 6719) (semantic-list 6498 . 6718) (symbol 6462 . 6490) (symbol 6447 . 6455) (symbol 6425 . 6446) (punctuation 6423 . 6424) (semantic-list 6203 . 6423) (symbol 6167 . 6195) (symbol 6152 . 6160) (symbol 6130 . 6151) (semantic-list 5990 . 6114) (symbol 5954 . 5986) (punctuation 5946 . 5947) (punctuation 5945 . 5946) (symbol 5939 . 5944) (symbol 5917 . 5938) (punctuation 5915 . 5916) (semantic-list 5793 . 5915) (symbol 5757 . 5788) (symbol 5742 . 5750) (symbol 5720 . 5741) (punctuation 5718 . 5719) (semantic-list 5597 . 5718) (symbol 5561 . 5592) (VOID 5546 . 5550) (symbol 5524 . 5545) (semantic-list 5384 . 5508) (symbol 5348 . 5374) (punctuation 5340 . 5341) (punctuation 5339 . 5340) (symbol 5333 . 5338) (symbol 5311 . 5332) (punctuation 5309 . 5310) (semantic-list 5186 . 5309) (symbol 5150 . 5175) (symbol 5135 . 5143) (symbol 5113 . 5134) (punctuation 5111 . 5112) (semantic-list 5021 . 5111) (symbol 4985 . 5010) (VOID 4970 . 4974) (symbol 4948 . 4969) (punctuation 4946 . 4947) (semantic-list 4821 . 4946) (symbol 4785 . 4811) (VOID 4770 . 4774) (symbol 4748 . 4769) (semantic-list 4642 . 4732) (symbol 4606 . 4635) (punctuation 4597 . 4598) (symbol 4591 . 4596) (symbol 4569 . 4590) (punctuation 4567 . 4568) (semantic-list 4473 . 4567) (symbol 4437 . 4466) (VOID 4422 . 4426) (symbol 4400 . 4421) (semantic-list 4294 . 4384) (symbol 4258 . 4289) (punctuation 4249 . 4250) (symbol 4243 . 4248) (symbol 4221 . 4242) (punctuation 4219 . 4220) (semantic-list 4123 . 4219) (symbol 4087 . 4118) (VOID 4072 . 4076) (symbol 4050 . 4071) (semantic-list 3944 . 4034) (symbol 3908 . 3933) (punctuation 3899 . 3900) (symbol 3893 . 3898) (symbol 3871 . 3892) (punctuation 3869 . 3870) (semantic-list 3779 . 3869) (symbol 3743 . 3768) (VOID 3728 . 3732) (symbol 3706 . 3727) (punctuation 3703 . 3704) (semantic-list 3608 . 3703) (symbol 3572 . 3595) (symbol 3557 . 3565) (symbol 3535 . 3556) (semantic-list 3426 . 3519) (symbol 3390 . 3413) (punctuation 3381 . 3382) (symbol 3375 . 3380) (symbol 3353 . 3374) (punctuation 3351 . 3352) (semantic-list 3223 . 3351) (symbol 3187 . 3222) (symbol 3172 . 3180) (symbol 3150 . 3171) (punctuation 3148 . 3149) (semantic-list 3023 . 3148) (symbol 2987 . 3017) (symbol 2972 . 2980) (symbol 2950 . 2971) (punctuation 2948 . 2949) (semantic-list 2853 . 2948) (symbol 2817 . 2847) (symbol 2802 . 2810) (symbol 2780 . 2801) (punctuation 2777 . 2778) (semantic-list 2751 . 2777) (symbol 2715 . 2735) (VOID 2700 . 2704) (symbol 2678 . 2699) (punctuation 2676 . 2677) (semantic-list 2670 . 2676) (symbol 2634 . 2653) (punctuation 2633 . 2634) (symbol 2619 . 2632) (symbol 2597 . 2618) (punctuation 2419 . 2420) (semantic-list 2413 . 2419) (symbol 2385 . 2412) (symbol 2378 . 2384) (symbol 2356 . 2377) (symbol 1050 . 1063) (string 956 . 997) (symbol 950 . 955) (punctuation 949 . 950))
      :lexical-table 
        '(("G_BOOKMARK_FILE_ERROR" . ((semantic-list "(g_bookmark_file_error_quark ())" 1299 . 1331)))
          ("__G_BOOKMARK_FILE_H__")
          )
)
    (semanticdb-table "gbytes.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_BYTES_H__" variable (:constant-flag t) nil [877 890])
            ("glib/gtypes.h" include (:system-flag t) nil [1013 1037])
            ("glib/garray.h" include (:system-flag t) nil [1038 1062]))          
      :file "gbytes.h"
      :pointmax 3331
      :fsize 3332
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 3291 . 3302) (punctuation 3288 . 3289) (semantic-list 3191 . 3288) (symbol 3159 . 3174) (symbol 3143 . 3147) (symbol 3121 . 3142) (punctuation 3118 . 3119) (semantic-list 3021 . 3118) (symbol 2989 . 3002) (symbol 2973 . 2981) (symbol 2951 . 2972) (punctuation 2948 . 2949) (semantic-list 2925 . 2948) (symbol 2893 . 2905) (symbol 2877 . 2882) (symbol 2855 . 2876) (punctuation 2852 . 2853) (semantic-list 2829 . 2852) (symbol 2797 . 2819) (punctuation 2792 . 2793) (symbol 2781 . 2791) (symbol 2759 . 2780) (punctuation 2756 . 2757) (semantic-list 2662 . 2756) (symbol 2630 . 2651) (symbol 2614 . 2622) (symbol 2592 . 2613) (punctuation 2589 . 2590) (semantic-list 2566 . 2589) (symbol 2534 . 2547) (VOID 2518 . 2522) (symbol 2496 . 2517) (punctuation 2493 . 2494) (semantic-list 2470 . 2493) (symbol 2438 . 2449) (punctuation 2429 . 2430) (symbol 2422 . 2428) (symbol 2400 . 2421) (punctuation 2397 . 2398) (semantic-list 2374 . 2397) (symbol 2342 . 2358) (symbol 2326 . 2331) (symbol 2304 . 2325) (punctuation 2301 . 2302) (semantic-list 2207 . 2301) (symbol 2175 . 2191) (symbol 2159 . 2172) (symbol 2137 . 2158) (punctuation 2134 . 2135) (semantic-list 1965 . 2134) (symbol 1933 . 1955) (punctuation 1924 . 1925) (symbol 1917 . 1923) (symbol 1895 . 1916) (punctuation 1892 . 1893) (semantic-list 1647 . 1892) (symbol 1615 . 1641) (punctuation 1606 . 1607) (symbol 1599 . 1605) (symbol 1577 . 1598) (punctuation 1574 . 1575) (semantic-list 1481 . 1574) (symbol 1449 . 1467) (punctuation 1440 . 1441) (symbol 1433 . 1439) (symbol 1411 . 1432) (punctuation 1408 . 1409) (semantic-list 1315 . 1408) (symbol 1283 . 1299) (punctuation 1274 . 1275) (symbol 1267 . 1273) (symbol 1245 . 1266) (punctuation 1242 . 1243) (semantic-list 1149 . 1242) (symbol 1117 . 1128) (punctuation 1108 . 1109) (symbol 1101 . 1107) (symbol 1079 . 1100) (symbol 1064 . 1077) (string 963 . 1004) (symbol 957 . 962) (punctuation 956 . 957))
      :lexical-table 
        '(("__G_BYTES_H__")
          )
)
    (semanticdb-table "gcharset.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_CHARSET_H__" variable (:constant-flag t) nil [824 839])
            ("glib/gtypes.h" include (:system-flag t) nil [962 986]))          
      :file "gcharset.h"
      :pointmax 1375
      :fsize 1374
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 1332 . 1343) (punctuation 1329 . 1330) (semantic-list 1308 . 1329) (symbol 1286 . 1307) (punctuation 1271 . 1272) (punctuation 1270 . 1271) (symbol 1264 . 1269) (symbol 1242 . 1263) (punctuation 1240 . 1241) (semantic-list 1234 . 1240) (symbol 1212 . 1232) (punctuation 1210 . 1211) (CONST 1204 . 1209) (punctuation 1202 . 1203) (symbol 1196 . 1201) (CONST 1190 . 1195) (symbol 1168 . 1189) (punctuation 1165 . 1166) (semantic-list 1159 . 1165) (symbol 1137 . 1150) (punctuation 1121 . 1122) (symbol 1115 . 1120) (symbol 1093 . 1114) (punctuation 1091 . 1092) (semantic-list 1069 . 1091) (symbol 1047 . 1060) (symbol 1025 . 1033) (symbol 1003 . 1024) (symbol 988 . 1001) (string 912 . 953) (symbol 906 . 911) (punctuation 905 . 906))
      :lexical-table 
        '(("__G_CHARSET_H__")
          )
)
    (semanticdb-table "gchecksum.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_CHECKSUM_H__" variable (:constant-flag t) nil [813 829])
            ("glib/gtypes.h" include (:system-flag t) nil [952 976])
            ("glib/gbytes.h" include (:system-flag t) nil [977 1001])
            ((((0) "GChecksumType")) type (:superclasses ("" type (:members (("G_CHECKSUM_MD5" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1515 1530]) ("G_CHECKSUM_SHA1" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1533 1549]) ("G_CHECKSUM_SHA256" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1552 1570]) ("G_CHECKSUM_SHA512" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1573 1592])) :type "enum") nil nil) :type "typedef") nil [1498 1607])
            ((((0) "GChecksum")) type (:superclasses ("_GChecksum" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1813 1855]))          
      :file "gchecksum.h"
      :pointmax 3760
      :fsize 3759
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 3717 . 3728) (punctuation 3714 . 3715) (semantic-list 3606 . 3714) (symbol 3576 . 3604) (punctuation 3575 . 3576) (symbol 3554 . 3559) (symbol 3531 . 3553) (punctuation 3528 . 3529) (semantic-list 3343 . 3528) (symbol 3313 . 3342) (punctuation 3312 . 3313) (symbol 3291 . 3296) (symbol 3269 . 3290) (punctuation 3267 . 3268) (semantic-list 3081 . 3267) (symbol 3051 . 3078) (punctuation 3050 . 3051) (symbol 3029 . 3034) (symbol 3007 . 3028) (punctuation 3004 . 3005) (semantic-list 2817 . 3004) (symbol 2787 . 2808) (VOID 2765 . 2769) (symbol 2743 . 2764) (punctuation 2741 . 2742) (semantic-list 2714 . 2741) (symbol 2684 . 2705) (punctuation 2674 . 2675) (symbol 2668 . 2673) (CONST 2662 . 2667) (symbol 2640 . 2661) (punctuation 2638 . 2639) (semantic-list 2457 . 2638) (symbol 2427 . 2444) (VOID 2405 . 2409) (symbol 2383 . 2404) (punctuation 2381 . 2382) (semantic-list 2354 . 2381) (symbol 2324 . 2339) (VOID 2302 . 2306) (symbol 2280 . 2301) (punctuation 2278 . 2279) (semantic-list 2251 . 2278) (symbol 2221 . 2236) (punctuation 2209 . 2210) (symbol 2199 . 2208) (symbol 2177 . 2198) (punctuation 2175 . 2176) (semantic-list 2148 . 2175) (symbol 2118 . 2134) (VOID 2096 . 2100) (symbol 2074 . 2095) (punctuation 2072 . 2073) (semantic-list 2040 . 2072) (symbol 2010 . 2024) (punctuation 1998 . 1999) (symbol 1988 . 1997) (symbol 1966 . 1987) (punctuation 1963 . 1964) (semantic-list 1931 . 1963) (symbol 1901 . 1927) (symbol 1879 . 1885) (symbol 1857 . 1878) (symbol 1003 . 1016) (string 902 . 943) (symbol 896 . 901) (punctuation 895 . 896))
      :lexical-table 
        '(("__G_CHECKSUM_H__")
          )
)
    (semanticdb-table "gconvert.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_CONVERT_H__" variable (:constant-flag t) nil [1086 1101])
            ("glib/gerror.h" include (:system-flag t) nil [1224 1248])
            ((((0) "GConvertError")) type (:superclasses ("" type (:members (("G_CONVERT_ERROR_NO_CONVERSION" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1886 1916]) ("G_CONVERT_ERROR_ILLEGAL_SEQUENCE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1919 1952]) ("G_CONVERT_ERROR_FAILED" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1955 1978]) ("G_CONVERT_ERROR_PARTIAL_INPUT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1981 2011]) ("G_CONVERT_ERROR_BAD_URI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2014 2038]) ("G_CONVERT_ERROR_NOT_ABSOLUTE_PATH" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2041 2075]) ("G_CONVERT_ERROR_NO_MEMORY" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2078 2105])) :type "enum") nil nil) :type "typedef") nil [1869 2120])
            ("G_CONVERT_ERROR" variable (:constant-flag t) nil [2327 2342])
            ((((1) "GIConv")) type (:superclasses ("_GIConv" type (:prototype t :type "struct") nil nil) :type "typedef") nil [2597 2628])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [3284 3298])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [3519 3533])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [3827 3841])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [4115 4129])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [4343 4357])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [4685 4699])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [4923 4937])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [5064 5078])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [5212 5226])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [5304 5318])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [5483 5497])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [5577 5591]))          
      :file "gconvert.h"
      :pointmax 7003
      :fsize 7002
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 6961 . 6972) (semantic-list 5553 . 5576) (symbol 5529 . 5552) (punctuation 5528 . 5529) (punctuation 5527 . 5528) (symbol 5521 . 5526) (symbol 5499 . 5520) (semantic-list 5459 . 5482) (symbol 5431 . 5458) (punctuation 5430 . 5431) (symbol 5424 . 5429) (symbol 5402 . 5423) (punctuation 5399 . 5400) (semantic-list 5374 . 5399) (symbol 5350 . 5373) (symbol 5341 . 5349) (symbol 5319 . 5340) (semantic-list 5280 . 5303) (symbol 5256 . 5279) (punctuation 5255 . 5256) (symbol 5249 . 5254) (symbol 5227 . 5248) (semantic-list 5131 . 5211) (symbol 5111 . 5128) (punctuation 5110 . 5111) (symbol 5104 . 5109) (symbol 5082 . 5103) (semantic-list 4988 . 5063) (symbol 4968 . 4987) (punctuation 4967 . 4968) (symbol 4961 . 4966) (symbol 4939 . 4960) (semantic-list 4750 . 4922) (symbol 4729 . 4749) (punctuation 4727 . 4728) (symbol 4722 . 4727) (symbol 4700 . 4721) (semantic-list 4511 . 4684) (symbol 4490 . 4508) (punctuation 4488 . 4489) (symbol 4483 . 4488) (symbol 4461 . 4482) (semantic-list 4178 . 4342) (symbol 4159 . 4177) (punctuation 4157 . 4158) (symbol 4152 . 4157) (symbol 4130 . 4151) (semantic-list 3949 . 4114) (symbol 3930 . 3946) (punctuation 3928 . 3929) (symbol 3923 . 3928) (symbol 3901 . 3922) (semantic-list 3587 . 3826) (symbol 3563 . 3586) (punctuation 3561 . 3562) (symbol 3556 . 3561) (symbol 3534 . 3555) (semantic-list 3352 . 3518) (symbol 3328 . 3348) (punctuation 3326 . 3327) (symbol 3321 . 3326) (symbol 3299 . 3320) (semantic-list 3072 . 3283) (symbol 3048 . 3057) (punctuation 3046 . 3047) (symbol 3041 . 3046) (symbol 3019 . 3040) (punctuation 3015 . 3016) (semantic-list 2990 . 3015) (symbol 2975 . 2988) (symbol 2968 . 2972) (symbol 2946 . 2967) (punctuation 2944 . 2945) (semantic-list 2783 . 2944) (symbol 2768 . 2775) (symbol 2761 . 2766) (symbol 2739 . 2760) (punctuation 2737 . 2738) (semantic-list 2674 . 2737) (symbol 2659 . 2671) (symbol 2652 . 2658) (symbol 2630 . 2651) (punctuation 2424 . 2425) (semantic-list 2418 . 2424) (symbol 2396 . 2417) (symbol 2389 . 2395) (symbol 2367 . 2388) (symbol 1250 . 1263) (string 1174 . 1215) (symbol 1168 . 1173) (punctuation 1167 . 1168))
      :lexical-table 
        '(("G_CONVERT_ERROR" . ((symbol "g_convert_error_quark" 2343 . 2364) (semantic-list "()" 2364 . 2366)))
          ("__G_CONVERT_H__")
          )
)
    (semanticdb-table "gdataset.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_DATASET_H__" variable (:constant-flag t) nil [1086 1101])
            ("glib/gquark.h" include (:system-flag t) nil [1224 1248])
            ((((0) "GData")) type (:superclasses ("_GData" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1265 1303])
            ("G_DATALIST_FLAGS_MASK" variable (:constant-flag t) nil [3299 3320])
            ("g_datalist_id_set_data" variable (:constant-flag t) nil [3680 3702])
            ("g_datalist_id_remove_data" variable (:constant-flag t) nil [3786 3811])
            ("g_datalist_set_data_full" variable (:constant-flag t) nil [3882 3906])
            ("g_datalist_remove_no_notify" variable (:constant-flag t) nil [4007 4034])
            ("g_datalist_set_data" variable (:constant-flag t) nil [4124 4143])
            ("g_datalist_remove_data" variable (:constant-flag t) nil [4227 4249])
            ("g_dataset_id_set_data" variable (:constant-flag t) nil [5452 5473])
            ("g_dataset_id_remove_data" variable (:constant-flag t) nil [5556 5580])
            ("g_dataset_get_data" variable (:constant-flag t) nil [5650 5668])
            ("g_dataset_set_data_full" variable (:constant-flag t) nil [5759 5782])
            ("g_dataset_remove_no_notify" variable (:constant-flag t) nil [5882 5908])
            ("g_dataset_set_data" variable (:constant-flag t) nil [5997 6015])
            ("g_dataset_remove_data" variable (:constant-flag t) nil [6098 6119]))          
      :file "gdataset.h"
      :pointmax 6244
      :fsize 6243
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 6202 . 6213) (punctuation 5440 . 5441) (semantic-list 5272 . 5440) (symbol 5242 . 5259) (VOID 5232 . 5236) (symbol 5210 . 5231) (punctuation 5208 . 5209) (semantic-list 5107 . 5208) (symbol 5077 . 5106) (symbol 5067 . 5075) (symbol 5045 . 5066) (punctuation 5043 . 5044) (semantic-list 4806 . 5043) (symbol 4776 . 4802) (VOID 4766 . 4770) (symbol 4744 . 4765) (punctuation 4742 . 4743) (semantic-list 4698 . 4742) (symbol 4667 . 4686) (symbol 4657 . 4665) (symbol 4635 . 4656) (punctuation 4633 . 4634) (semantic-list 4532 . 4633) (symbol 4502 . 4523) (symbol 4492 . 4500) (symbol 4470 . 4491) (punctuation 4468 . 4469) (semantic-list 4433 . 4468) (symbol 4403 . 4420) (VOID 4393 . 4397) (symbol 4371 . 4392) (punctuation 3667 . 3668) (semantic-list 3638 . 3667) (symbol 3607 . 3627) (symbol 3598 . 3603) (symbol 3576 . 3597) (punctuation 3574 . 3575) (semantic-list 3513 . 3574) (symbol 3482 . 3504) (VOID 3473 . 3477) (symbol 3451 . 3472) (punctuation 3449 . 3450) (semantic-list 3388 . 3449) (symbol 3357 . 3377) (VOID 3348 . 3352) (symbol 3326 . 3347) (punctuation 3087 . 3088) (semantic-list 2991 . 3087) (symbol 2960 . 2978) (VOID 2951 . 2955) (symbol 2929 . 2950) (punctuation 2927 . 2928) (semantic-list 2865 . 2927) (symbol 2834 . 2864) (symbol 2825 . 2833) (symbol 2803 . 2824) (punctuation 2800 . 2801) (semantic-list 2460 . 2800) (symbol 2429 . 2455) (symbol 2420 . 2428) (symbol 2397 . 2419) (punctuation 2395 . 2396) (semantic-list 2192 . 2395) (symbol 2161 . 2183) (symbol 2152 . 2160) (symbol 2129 . 2151) (punctuation 2126 . 2127) (semantic-list 2091 . 2126) (semantic-list 2073 . 2090) (symbol 2064 . 2072) (TYPEDEF 2056 . 2063) (punctuation 2053 . 2054) (semantic-list 1921 . 2053) (symbol 1890 . 1917) (VOID 1881 . 1885) (symbol 1859 . 1880) (punctuation 1857 . 1858) (semantic-list 1795 . 1857) (symbol 1764 . 1786) (symbol 1755 . 1763) (symbol 1733 . 1754) (punctuation 1731 . 1732) (semantic-list 1702 . 1731) (symbol 1671 . 1687) (VOID 1662 . 1666) (symbol 1640 . 1661) (punctuation 1638 . 1639) (semantic-list 1609 . 1638) (symbol 1578 . 1593) (VOID 1569 . 1573) (symbol 1547 . 1568) (punctuation 1521 . 1522) (semantic-list 1353 . 1521) (semantic-list 1329 . 1348) (VOID 1313 . 1317) (TYPEDEF 1305 . 1312) (symbol 1250 . 1263) (string 1174 . 1215) (symbol 1168 . 1173) (punctuation 1167 . 1168))
      :lexical-table 
        '(("g_datalist_set_data" (spp-arg-list ("dl" "k" "d") 4143 . 4153) . ((symbol "g_datalist_set_data_full" 4169 . 4193) (semantic-list "((dl), (k), (d), NULL)" 4194 . 4216)))
          ("g_dataset_id_set_data" (spp-arg-list ("l" "k" "d") 5473 . 5482) . ((symbol "g_dataset_id_set_data_full" 5497 . 5523) (semantic-list "((l), (k), (d), NULL)" 5524 . 5545)))
          ("G_DATALIST_FLAGS_MASK" . ((number "0x3" 3321 . 3324)))
          ("g_datalist_set_data_full" (spp-arg-list ("dl" "k" "d" "f") 3906 . 3919) . ((symbol "g_datalist_id_set_data_full" 3927 . 3954) (semantic-list "((dl), g_quark_from_string (k), (d), (f))" 3955 . 3996)))
          ("g_datalist_remove_no_notify" (spp-arg-list ("dl" "k") 4034 . 4041) . ((symbol "g_datalist_id_remove_no_notify" 4052 . 4082) (semantic-list "((dl), g_quark_try_string (k))" 4083 . 4113)))
          ("g_dataset_set_data_full" (spp-arg-list ("l" "k" "d" "f") 5782 . 5794) . ((symbol "g_dataset_id_set_data_full" 5804 . 5830) (semantic-list "((l), g_quark_from_string (k), (d), (f))" 5831 . 5871)))
          ("g_dataset_set_data" (spp-arg-list ("l" "k" "d") 6015 . 6024) . ((symbol "g_dataset_set_data_full" 6042 . 6065) (semantic-list "((l), (k), (d), NULL)" 6066 . 6087)))
          ("g_dataset_id_remove_data" (spp-arg-list ("l" "k") 5580 . 5586) . ((symbol "g_dataset_id_set_data" 5601 . 5622) (semantic-list "((l), (k), NULL)" 5623 . 5639)))
          ("g_datalist_id_remove_data" (spp-arg-list ("dl" "q") 3811 . 3818) . ((symbol "g_datalist_id_set_data" 3831 . 3853) (semantic-list "((dl), (q), NULL)" 3854 . 3871)))
          ("g_datalist_remove_data" (spp-arg-list ("dl" "k") 4249 . 4256) . ((symbol "g_datalist_id_set_data" 4272 . 4294) (semantic-list "((dl), g_quark_try_string (k), NULL)" 4295 . 4331)))
          ("__G_DATASET_H__")
          ("g_dataset_get_data" (spp-arg-list ("l" "k") 5668 . 5674) . ((semantic-list "(g_dataset_id_get_data ((l), g_quark_try_string (k)))" 5695 . 5748)))
          ("g_dataset_remove_no_notify" (spp-arg-list ("l" "k") 5908 . 5914) . ((symbol "g_dataset_id_remove_no_notify" 5927 . 5956) (semantic-list "((l), g_quark_try_string (k))" 5957 . 5986)))
          ("g_datalist_id_set_data" (spp-arg-list ("dl" "q" "d") 3702 . 3712) . ((symbol "g_datalist_id_set_data_full" 3725 . 3752) (semantic-list "((dl), (q), (d), NULL)" 3753 . 3775)))
          ("g_dataset_remove_data" (spp-arg-list ("l" "k") 6119 . 6125) . ((symbol "g_dataset_id_set_data" 6143 . 6164) (semantic-list "((l), g_quark_try_string (k), NULL)" 6165 . 6200)))
          )
)
    (semanticdb-table "gdate.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_DATE_H__" variable (:constant-flag t) nil [1083 1095])
            ("time.h" include (:system-flag t) nil [1218 1235])
            ("glib/gtypes.h" include (:system-flag t) nil [1237 1261])
            ("glib/gquark.h" include (:system-flag t) nil [1262 1286])
            ((((0) "GTime")) type (:superclasses ("gint32" type (:type "class") nil nil) :type "typedef") nil [1614 1636])
            ((((0) "GDateYear")) type (:superclasses ("guint16" type (:type "class") nil nil) :type "typedef") nil [1637 1663])
            ((((0) "GDateDay")) type (:superclasses ("guint8" type (:type "class") nil nil) :type "typedef") nil [1664 1689])
            ((((0) "GDate")) type (:superclasses ("_GDate" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1715 1743])
            ((((0) "GDateDMY")) type (:superclasses ("" type (:members (("G_DATE_DAY" variable (:constant-flag t :default-value (1847 1848) :type "int") (reparse-symbol enumsubparts) [1832 1848]) ("G_DATE_MONTH" variable (:constant-flag t :default-value (1867 1868) :type "int") (reparse-symbol enumsubparts) [1852 1868]) ("G_DATE_YEAR" variable (:constant-flag t :default-value (1887 1888) :type "int") (reparse-symbol enumsubparts) [1872 1888])) :type "enum") nil nil) :type "typedef") nil [1815 1900])
            ((((0) "GDateWeekday")) type (:superclasses ("" type (:members (("G_DATE_BAD_WEEKDAY" variable (:constant-flag t :default-value (1976 1977) :type "int") (reparse-symbol enumsubparts) [1954 1977]) ("G_DATE_MONDAY" variable (:constant-flag t :default-value (2003 2004) :type "int") (reparse-symbol enumsubparts) [1981 2004]) ("G_DATE_TUESDAY" variable (:constant-flag t :default-value (2030 2031) :type "int") (reparse-symbol enumsubparts) [2008 2031]) ("G_DATE_WEDNESDAY" variable (:constant-flag t :default-value (2057 2058) :type "int") (reparse-symbol enumsubparts) [2035 2058]) ("G_DATE_THURSDAY" variable (:constant-flag t :default-value (2084 2085) :type "int") (reparse-symbol enumsubparts) [2062 2085]) ("G_DATE_FRIDAY" variable (:constant-flag t :default-value (2111 2112) :type "int") (reparse-symbol enumsubparts) [2089 2112]) ("G_DATE_SATURDAY" variable (:constant-flag t :default-value (2138 2139) :type "int") (reparse-symbol enumsubparts) [2116 2139]) ("G_DATE_SUNDAY" variable (:constant-flag t :default-value (2165 2166) :type "int") (reparse-symbol enumsubparts) [2143 2166])) :type "enum") nil nil) :type "typedef") nil [1937 2182])
            ((((0) "GDateMonth")) type (:superclasses ("" type (:members (("G_DATE_BAD_MONTH" variable (:constant-flag t :default-value (2219 2220) :type "int") (reparse-symbol enumsubparts) [2200 2220]) ("G_DATE_JANUARY" variable (:constant-flag t :default-value (2243 2244) :type "int") (reparse-symbol enumsubparts) [2224 2244]) ("G_DATE_FEBRUARY" variable (:constant-flag t :default-value (2267 2268) :type "int") (reparse-symbol enumsubparts) [2248 2268]) ("G_DATE_MARCH" variable (:constant-flag t :default-value (2291 2292) :type "int") (reparse-symbol enumsubparts) [2272 2292]) ("G_DATE_APRIL" variable (:constant-flag t :default-value (2315 2316) :type "int") (reparse-symbol enumsubparts) [2296 2316]) ("G_DATE_MAY" variable (:constant-flag t :default-value (2339 2340) :type "int") (reparse-symbol enumsubparts) [2320 2340]) ("G_DATE_JUNE" variable (:constant-flag t :default-value (2363 2364) :type "int") (reparse-symbol enumsubparts) [2344 2364]) ("G_DATE_JULY" variable (:constant-flag t :default-value (2387 2388) :type "int") (reparse-symbol enumsubparts) [2368 2388]) ("G_DATE_AUGUST" variable (:constant-flag t :default-value (2411 2412) :type "int") (reparse-symbol enumsubparts) [2392 2412]) ("G_DATE_SEPTEMBER" variable (:constant-flag t :default-value (2435 2436) :type "int") (reparse-symbol enumsubparts) [2416 2436]) ("G_DATE_OCTOBER" variable (:constant-flag t :default-value (2459 2461) :type "int") (reparse-symbol enumsubparts) [2440 2461]) ("G_DATE_NOVEMBER" variable (:constant-flag t :default-value (2484 2486) :type "int") (reparse-symbol enumsubparts) [2465 2486]) ("G_DATE_DECEMBER" variable (:constant-flag t :default-value (2509 2511) :type "int") (reparse-symbol enumsubparts) [2490 2511])) :type "enum") nil nil) :type "typedef") nil [2183 2525])
            ("G_DATE_BAD_JULIAN" variable (:constant-flag t) nil [2535 2552])
            ("G_DATE_BAD_DAY" variable (:constant-flag t) nil [2564 2578])
            ("G_DATE_BAD_YEAR" variable (:constant-flag t) nil [2593 2608])
            ("_GDate" type
               (:members (((("julian_days" 0 "32" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2880 2903]) ((("julian" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3149 3166]) ((("dmy" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3194 3211]) ((("day" 0 "6" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3264 3281]) ((("month" 0 "4" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3284 3301]) ((("year" 0 "16" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3304 3322]))
                :type "struct")
                nil [2862 3325])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [4372 4385])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [4469 4482])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [4565 4578])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [4666 4679])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [4766 4779])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [4988 5001])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [9352 9365])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [9513 9526])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [9615 9628])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [9717 9730])
            ("g_date_weekday" variable (:constant-flag t) nil [11006 11020])
            ("g_date_month" variable (:constant-flag t) nil [11051 11063])
            ("g_date_year" variable (:constant-flag t) nil [11092 11103])
            ("g_date_day" variable (:constant-flag t) nil [11131 11141])
            ("g_date_julian" variable (:constant-flag t) nil [11168 11181])
            ("g_date_day_of_year" variable (:constant-flag t) nil [11211 11229])
            ("g_date_monday_week_of_year" variable (:constant-flag t) nil [11263 11289])
            ("g_date_sunday_week_of_year" variable (:constant-flag t) nil [11330 11356])
            ("g_date_days_in_month" variable (:constant-flag t) nil [11397 11417])
            ("g_date_monday_weeks_in_year" variable (:constant-flag t) nil [11453 11480])
            ("g_date_sunday_weeks_in_year" variable (:constant-flag t) nil [11522 11549]))          
      :file "gdate.h"
      :pointmax 11657
      :fsize 11656
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 11618 . 11629) (punctuation 10965 . 10966) (semantic-list 10761 . 10965) (symbol 10732 . 10747) (symbol 10719 . 10724) (symbol 10697 . 10718) (punctuation 10581 . 10582) (semantic-list 10553 . 10581) (symbol 10524 . 10536) (VOID 10511 . 10515) (symbol 10489 . 10510) (punctuation 10432 . 10433) (semantic-list 10357 . 10432) (symbol 10328 . 10340) (VOID 10315 . 10319) (symbol 10293 . 10314) (punctuation 10290 . 10291) (semantic-list 10211 . 10290) (symbol 10182 . 10201) (VOID 10169 . 10173) (symbol 10147 . 10168) (punctuation 10145 . 10146) (semantic-list 10066 . 10145) (symbol 10037 . 10051) (symbol 10024 . 10028) (symbol 10002 . 10023) (punctuation 9961 . 9962) (semantic-list 9913 . 9961) (symbol 9884 . 9903) (symbol 9871 . 9875) (symbol 9849 . 9870) (semantic-list 9697 . 9716) (symbol 9664 . 9695) (symbol 9651 . 9657) (symbol 9629 . 9650) (semantic-list 9595 . 9614) (symbol 9562 . 9593) (symbol 9549 . 9555) (symbol 9527 . 9548) (semantic-list 9430 . 9512) (symbol 9401 . 9425) (symbol 9388 . 9394) (symbol 9366 . 9387) (semantic-list 9332 . 9351) (symbol 9303 . 9322) (symbol 9290 . 9298) (symbol 9268 . 9289) (punctuation 9266 . 9267) (semantic-list 9182 . 9266) (symbol 9153 . 9174) (VOID 9140 . 9144) (symbol 9118 . 9139) (punctuation 9116 . 9117) (semantic-list 9032 . 9116) (symbol 9003 . 9019) (VOID 8990 . 8994) (symbol 8968 . 8989) (punctuation 8903 . 8904) (semantic-list 8818 . 8903) (symbol 8789 . 8811) (VOID 8776 . 8780) (symbol 8754 . 8775) (punctuation 8752 . 8753) (semantic-list 8667 . 8752) (symbol 8638 . 8655) (VOID 8625 . 8629) (symbol 8603 . 8624) (punctuation 8535 . 8536) (semantic-list 8452 . 8535) (symbol 8423 . 8443) (VOID 8410 . 8414) (symbol 8388 . 8409) (punctuation 8386 . 8387) (semantic-list 8303 . 8386) (symbol 8274 . 8289) (VOID 8261 . 8265) (symbol 8239 . 8260) (punctuation 8163 . 8164) (semantic-list 8144 . 8163) (symbol 8115 . 8138) (symbol 8102 . 8110) (symbol 8080 . 8101) (punctuation 8078 . 8079) (semantic-list 8059 . 8078) (symbol 8030 . 8054) (symbol 8017 . 8025) (symbol 7995 . 8016) (punctuation 7993 . 7994) (semantic-list 7905 . 7993) (symbol 7876 . 7893) (VOID 7863 . 7867) (symbol 7841 . 7862) (punctuation 7839 . 7840) (semantic-list 7637 . 7839) (symbol 7608 . 7622) (VOID 7595 . 7599) (symbol 7573 . 7594) (punctuation 7571 . 7572) (semantic-list 7490 . 7571) (symbol 7461 . 7476) (VOID 7448 . 7452) (symbol 7426 . 7447) (punctuation 7424 . 7425) (semantic-list 7344 . 7424) (symbol 7315 . 7329) (VOID 7302 . 7306) (symbol 7280 . 7301) (punctuation 7278 . 7279) (semantic-list 7196 . 7278) (symbol 7167 . 7183) (VOID 7154 . 7158) (symbol 7132 . 7153) (punctuation 7123 . 7124) (semantic-list 7041 . 7123) (symbol 7012 . 7027) (VOID 6999 . 7003) (semantic-list 6979 . 6998) (symbol 6960 . 6979) (punctuation 6929 . 6930) (semantic-list 6880 . 6929) (symbol 6851 . 6870) (VOID 6838 . 6842) (symbol 6816 . 6837) (punctuation 6814 . 6815) (semantic-list 6767 . 6814) (symbol 6738 . 6755) (VOID 6725 . 6729) (symbol 6703 . 6724) (punctuation 6701 . 6702) (semantic-list 6621 . 6701) (symbol 6592 . 6608) (VOID 6579 . 6583) (symbol 6557 . 6578) (punctuation 6344 . 6345) (semantic-list 6260 . 6344) (symbol 6231 . 6243) (VOID 6218 . 6222) (symbol 6196 . 6217) (punctuation 6024 . 6025) (semantic-list 6005 . 6024) (symbol 5973 . 6004) (symbol 5960 . 5965) (symbol 5938 . 5959) (punctuation 5936 . 5937) (semantic-list 5917 . 5936) (symbol 5886 . 5916) (symbol 5873 . 5878) (symbol 5851 . 5872) (punctuation 5849 . 5850) (semantic-list 5830 . 5849) (symbol 5799 . 5829) (symbol 5786 . 5791) (symbol 5764 . 5785) (punctuation 5511 . 5512) (semantic-list 5492 . 5511) (symbol 5463 . 5485) (symbol 5450 . 5455) (symbol 5428 . 5449) (punctuation 5426 . 5427) (semantic-list 5407 . 5426) (symbol 5378 . 5395) (symbol 5365 . 5372) (symbol 5343 . 5364) (punctuation 5341 . 5342) (semantic-list 5322 . 5341) (symbol 5293 . 5307) (symbol 5280 . 5288) (symbol 5258 . 5279) (punctuation 5256 . 5257) (semantic-list 5237 . 5256) (symbol 5208 . 5223) (symbol 5195 . 5204) (symbol 5173 . 5194) (punctuation 5171 . 5172) (semantic-list 5152 . 5171) (symbol 5123 . 5139) (symbol 5110 . 5120) (symbol 5088 . 5109) (punctuation 5086 . 5087) (semantic-list 5067 . 5086) (symbol 5038 . 5056) (symbol 5025 . 5037) (symbol 5003 . 5024) (semantic-list 4844 . 4987) (symbol 4815 . 4831) (symbol 4802 . 4810) (symbol 4780 . 4801) (semantic-list 4744 . 4765) (symbol 4715 . 4734) (symbol 4702 . 4710) (symbol 4680 . 4701) (semantic-list 4643 . 4665) (symbol 4614 . 4634) (symbol 4601 . 4609) (symbol 4579 . 4600) (semantic-list 4547 . 4564) (symbol 4518 . 4535) (symbol 4505 . 4513) (symbol 4483 . 4504) (semantic-list 4450 . 4468) (symbol 4421 . 4439) (symbol 4408 . 4416) (symbol 4386 . 4407) (semantic-list 4353 . 4371) (symbol 4324 . 4340) (symbol 4311 . 4319) (symbol 4289 . 4310) (punctuation 4287 . 4288) (semantic-list 4268 . 4287) (symbol 4239 . 4251) (symbol 4226 . 4234) (symbol 4204 . 4225) (punctuation 3969 . 3970) (semantic-list 3950 . 3969) (symbol 3921 . 3932) (VOID 3908 . 3912) (symbol 3886 . 3907) (punctuation 3884 . 3885) (semantic-list 3859 . 3884) (symbol 3830 . 3847) (punctuation 3822 . 3823) (symbol 3817 . 3822) (symbol 3795 . 3816) (punctuation 3793 . 3794) (semantic-list 3650 . 3793) (symbol 3621 . 3635) (punctuation 3613 . 3614) (symbol 3608 . 3613) (symbol 3586 . 3607) (punctuation 3584 . 3585) (semantic-list 3578 . 3584) (symbol 3549 . 3559) (punctuation 3541 . 3542) (symbol 3536 . 3541) (symbol 3514 . 3535) (symbol 1288 . 1301) (string 1168 . 1209) (symbol 1162 . 1167) (punctuation 1161 . 1162))
      :lexical-table 
        '(("g_date_weekday" . ((symbol "g_date_get_weekday" 11024 . 11042)))
          ("g_date_month" . ((symbol "g_date_get_month" 11067 . 11083)))
          ("g_date_day_of_year" . ((symbol "g_date_get_day_of_year" 11232 . 11254)))
          ("__G_DATE_H__")
          ("g_date_day" . ((symbol "g_date_get_day" 11145 . 11159)))
          ("g_date_sunday_week_of_year" . ((symbol "g_date_get_sunday_week_of_year" 11358 . 11388)))
          ("g_date_sunday_weeks_in_year" . ((symbol "g_date_get_sunday_weeks_in_year" 11550 . 11581)))
          ("G_DATE_BAD_JULIAN" . ((symbol "0U" 2553 . 2555)))
          ("g_date_julian" . ((symbol "g_date_get_julian" 11185 . 11202)))
          ("g_date_days_in_month" . ((symbol "g_date_get_days_in_month" 11420 . 11444)))
          ("g_date_monday_weeks_in_year" . ((symbol "g_date_get_monday_weeks_in_year" 11482 . 11513)))
          ("g_date_monday_week_of_year" . ((symbol "g_date_get_monday_week_of_year" 11291 . 11321)))
          ("g_date_year" . ((symbol "g_date_get_year" 11107 . 11122)))
          ("G_DATE_BAD_DAY" . ((symbol "0U" 2582 . 2584)))
          ("G_DATE_BAD_YEAR" . ((symbol "0U" 2611 . 2613)))
          )
)
    (semanticdb-table "gdatetime.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_DATE_TIME_H__" variable (:constant-flag t) nil [1096 1113])
            ("glib/gtimezone.h" include (:system-flag t) nil [1236 1263])
            ("G_TIME_SPAN_DAY" variable (:constant-flag t) nil [1377 1392])
            ("G_TIME_SPAN_HOUR" variable (:constant-flag t) nil [1543 1559])
            ("G_TIME_SPAN_MINUTE" variable (:constant-flag t) nil [1712 1730])
            ("G_TIME_SPAN_SECOND" variable (:constant-flag t) nil [1879 1897])
            ("G_TIME_SPAN_MILLISECOND" variable (:constant-flag t) nil [2055 2078])
            ((((0) "GTimeSpan")) type (:superclasses ("gint64" type (:type "class") nil nil) :type "typedef") nil [2220 2245])
            ((((0) "GDateTime")) type (:superclasses ("_GDateTime" type (:prototype t :type "struct") nil nil) :type "typedef") nil [2374 2410])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [12038 12052]))          
      :file "gdatetime.h"
      :pointmax 12098
      :fsize 12098
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 12054 . 12065) (semantic-list 11914 . 12037) (symbol 11866 . 11884) (punctuation 11848 . 11849) (symbol 11842 . 11847) (symbol 11820 . 11841) (punctuation 11817 . 11818) (semantic-list 11791 . 11817) (symbol 11743 . 11761) (punctuation 11729 . 11730) (symbol 11719 . 11728) (symbol 11697 . 11718) (punctuation 11695 . 11696) (semantic-list 11669 . 11695) (symbol 11621 . 11641) (punctuation 11607 . 11608) (symbol 11597 . 11606) (symbol 11575 . 11596) (punctuation 11573 . 11574) (semantic-list 11454 . 11573) (symbol 11406 . 11429) (punctuation 11392 . 11393) (symbol 11382 . 11391) (symbol 11360 . 11381) (punctuation 11357 . 11358) (semantic-list 11331 . 11357) (symbol 11283 . 11314) (symbol 11259 . 11267) (symbol 11237 . 11258) (punctuation 11235 . 11236) (semantic-list 11209 . 11235) (symbol 11161 . 11198) (punctuation 11149 . 11150) (symbol 11143 . 11148) (CONST 11137 . 11142) (symbol 11115 . 11136) (punctuation 11113 . 11114) (semantic-list 11087 . 11113) (symbol 11039 . 11065) (symbol 11015 . 11024) (symbol 10993 . 11014) (punctuation 10990 . 10991) (semantic-list 10871 . 10990) (symbol 10823 . 10845) (symbol 10799 . 10807) (symbol 10777 . 10798) (punctuation 10775 . 10776) (semantic-list 10749 . 10775) (symbol 10701 . 10720) (symbol 10677 . 10683) (symbol 10655 . 10676) (punctuation 10652 . 10653) (semantic-list 10626 . 10652) (symbol 10578 . 10601) (symbol 10554 . 10561) (symbol 10532 . 10553) (punctuation 10530 . 10531) (semantic-list 10504 . 10530) (symbol 10456 . 10483) (symbol 10432 . 10436) (symbol 10410 . 10431) (punctuation 10408 . 10409) (semantic-list 10382 . 10408) (symbol 10334 . 10356) (symbol 10310 . 10314) (symbol 10288 . 10309) (punctuation 10286 . 10287) (semantic-list 10260 . 10286) (symbol 10212 . 10234) (symbol 10188 . 10192) (symbol 10166 . 10187) (punctuation 10164 . 10165) (semantic-list 10138 . 10164) (symbol 10090 . 10110) (symbol 10066 . 10070) (symbol 10044 . 10065) (punctuation 10041 . 10042) (semantic-list 10015 . 10041) (symbol 9967 . 9994) (symbol 9943 . 9947) (symbol 9921 . 9942) (punctuation 9918 . 9919) (semantic-list 9892 . 9918) (symbol 9844 . 9871) (symbol 9820 . 9824) (symbol 9798 . 9819) (punctuation 9796 . 9797) (semantic-list 9770 . 9796) (symbol 9722 . 9750) (symbol 9698 . 9702) (symbol 9676 . 9697) (punctuation 9674 . 9675) (semantic-list 9648 . 9674) (symbol 9600 . 9635) (symbol 9576 . 9580) (symbol 9554 . 9575) (punctuation 9551 . 9552) (semantic-list 9525 . 9551) (symbol 9477 . 9505) (symbol 9453 . 9457) (symbol 9431 . 9452) (punctuation 9429 . 9430) (semantic-list 9403 . 9429) (symbol 9355 . 9376) (symbol 9331 . 9335) (symbol 9309 . 9330) (punctuation 9307 . 9308) (semantic-list 9281 . 9307) (symbol 9233 . 9253) (symbol 9209 . 9213) (symbol 9187 . 9208) (punctuation 9184 . 9185) (semantic-list 8873 . 9184) (symbol 8825 . 8844) (VOID 8801 . 8805) (symbol 8779 . 8800) (punctuation 8776 . 8777) (semantic-list 8661 . 8776) (symbol 8613 . 8630) (symbol 8589 . 8597) (symbol 8567 . 8588) (punctuation 8565 . 8566) (semantic-list 8539 . 8565) (symbol 8491 . 8507) (symbol 8467 . 8472) (symbol 8445 . 8466) (punctuation 8443 . 8444) (semantic-list 8326 . 8443) (symbol 8278 . 8300) (symbol 8254 . 8263) (symbol 8232 . 8253) (punctuation 8230 . 8231) (semantic-list 8115 . 8230) (symbol 8067 . 8086) (symbol 8043 . 8047) (symbol 8021 . 8042) (punctuation 8018 . 8019) (semantic-list 7412 . 8018) (symbol 7364 . 7384) (punctuation 7350 . 7351) (symbol 7340 . 7349) (symbol 7314 . 7339) (symbol 7292 . 7313) (punctuation 7289 . 7290) (semantic-list 7165 . 7289) (symbol 7117 . 7140) (punctuation 7103 . 7104) (symbol 7093 . 7102) (symbol 7067 . 7092) (symbol 7045 . 7066) (punctuation 7043 . 7044) (semantic-list 6919 . 7043) (symbol 6871 . 6894) (punctuation 6857 . 6858) (symbol 6847 . 6856) (symbol 6821 . 6846) (symbol 6799 . 6820) (punctuation 6797 . 6798) (semantic-list 6675 . 6797) (symbol 6627 . 6648) (punctuation 6613 . 6614) (symbol 6603 . 6612) (symbol 6577 . 6602) (symbol 6555 . 6576) (punctuation 6552 . 6553) (semantic-list 6431 . 6552) (symbol 6383 . 6403) (punctuation 6369 . 6370) (symbol 6359 . 6368) (symbol 6333 . 6358) (symbol 6311 . 6332) (punctuation 6309 . 6310) (semantic-list 6187 . 6309) (symbol 6139 . 6160) (punctuation 6125 . 6126) (symbol 6115 . 6124) (symbol 6089 . 6114) (symbol 6067 . 6088) (punctuation 6065 . 6066) (semantic-list 5942 . 6065) (symbol 5894 . 5916) (punctuation 5880 . 5881) (symbol 5870 . 5879) (symbol 5844 . 5869) (symbol 5822 . 5843) (punctuation 5820 . 5821) (semantic-list 5698 . 5820) (symbol 5650 . 5671) (punctuation 5636 . 5637) (symbol 5626 . 5635) (symbol 5600 . 5625) (symbol 5578 . 5599) (punctuation 5575 . 5576) (semantic-list 5450 . 5575) (symbol 5402 . 5417) (punctuation 5388 . 5389) (symbol 5378 . 5387) (symbol 5352 . 5377) (symbol 5330 . 5351) (punctuation 5327 . 5328) (semantic-list 4825 . 5327) (symbol 4777 . 4796) (punctuation 4763 . 4764) (symbol 4753 . 4762) (symbol 4731 . 4752) (punctuation 4729 . 4730) (semantic-list 4227 . 4729) (symbol 4179 . 4200) (punctuation 4165 . 4166) (symbol 4155 . 4164) (symbol 4133 . 4154) (punctuation 4131 . 4132) (semantic-list 3536 . 4131) (symbol 3488 . 3503) (punctuation 3474 . 3475) (symbol 3464 . 3473) (symbol 3442 . 3463) (punctuation 3439 . 3440) (semantic-list 3419 . 3439) (symbol 3371 . 3403) (punctuation 3357 . 3358) (symbol 3347 . 3356) (symbol 3325 . 3346) (punctuation 3323 . 3324) (semantic-list 3303 . 3323) (symbol 3255 . 3289) (punctuation 3241 . 3242) (symbol 3231 . 3240) (symbol 3209 . 3230) (punctuation 3206 . 3207) (semantic-list 3187 . 3206) (symbol 3139 . 3168) (punctuation 3125 . 3126) (symbol 3115 . 3124) (symbol 3093 . 3114) (punctuation 3091 . 3092) (semantic-list 3072 . 3091) (symbol 3024 . 3055) (punctuation 3010 . 3011) (symbol 3000 . 3009) (symbol 2978 . 2999) (punctuation 2975 . 2976) (semantic-list 2969 . 2975) (symbol 2921 . 2944) (punctuation 2907 . 2908) (symbol 2897 . 2906) (symbol 2875 . 2896) (punctuation 2873 . 2874) (semantic-list 2867 . 2873) (symbol 2819 . 2844) (punctuation 2805 . 2806) (symbol 2795 . 2804) (symbol 2773 . 2794) (punctuation 2771 . 2772) (semantic-list 2751 . 2771) (symbol 2703 . 2722) (punctuation 2689 . 2690) (symbol 2679 . 2688) (symbol 2657 . 2678) (punctuation 2654 . 2655) (semantic-list 2628 . 2654) (symbol 2580 . 2595) (punctuation 2566 . 2567) (symbol 2556 . 2565) (symbol 2534 . 2555) (punctuation 2532 . 2533) (semantic-list 2506 . 2532) (symbol 2458 . 2475) (VOID 2434 . 2438) (symbol 2412 . 2433) (symbol 1265 . 1278) (string 1186 . 1227) (symbol 1180 . 1185) (punctuation 1179 . 1180))
      :lexical-table 
        '(("__G_DATE_TIME_H__")
          ("G_TIME_SPAN_MINUTE" . ((semantic-list "(G_GINT64_CONSTANT (60000000))" 1744 . 1774)))
          ("G_TIME_SPAN_HOUR" . ((semantic-list "(G_GINT64_CONSTANT (3600000000))" 1575 . 1607)))
          ("G_TIME_SPAN_MILLISECOND" . ((semantic-list "(G_GINT64_CONSTANT (1000))" 2087 . 2113)))
          ("G_TIME_SPAN_DAY" . ((semantic-list "(G_GINT64_CONSTANT (86400000000))" 1409 . 1442)))
          ("G_TIME_SPAN_SECOND" . ((semantic-list "(G_GINT64_CONSTANT (1000000))" 1911 . 1940)))
          )
)
    (semanticdb-table "gdir.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_DIR_H__" variable (:constant-flag t) nil [930 941])
            ("glib/gerror.h" include (:system-flag t) nil [1064 1088])
            ((((0) "GDir")) type (:superclasses ("_GDir" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1150 1176]))          
      :file "gdir.h"
      :pointmax 2095
      :fsize 2094
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 2057 . 2068) (punctuation 1599 . 1600) (semantic-list 1580 . 1599) (symbol 1559 . 1570) (VOID 1534 . 1538) (symbol 1512 . 1533) (punctuation 1510 . 1511) (semantic-list 1491 . 1510) (symbol 1470 . 1482) (VOID 1445 . 1449) (symbol 1423 . 1444) (punctuation 1421 . 1422) (semantic-list 1402 . 1421) (symbol 1381 . 1396) (punctuation 1368 . 1369) (symbol 1362 . 1367) (CONST 1356 . 1361) (symbol 1334 . 1355) (punctuation 1332 . 1333) (semantic-list 1246 . 1332) (symbol 1225 . 1235) (punctuation 1208 . 1209) (symbol 1200 . 1204) (symbol 1178 . 1199) (symbol 1135 . 1148) (string 1014 . 1055) (symbol 1008 . 1013) (punctuation 1007 . 1008))
      :lexical-table 
        '(("__G_DIR_H__")
          )
)
    (semanticdb-table "genviron.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_ENVIRON_H__" variable (:constant-flag t) nil [1086 1101])
            ("glib/gtypes.h" include (:system-flag t) nil [1224 1248])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [2132 2158])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [2293 2319]))          
      :file "genviron.h"
      :pointmax 2886
      :fsize 2885
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 2844 . 2855) (semantic-list 2214 . 2292) (symbol 2195 . 2213) (punctuation 2188 . 2189) (punctuation 2187 . 2188) (symbol 2181 . 2186) (symbol 2159 . 2180) (semantic-list 1939 . 2131) (symbol 1920 . 1936) (punctuation 1913 . 1914) (punctuation 1912 . 1913) (symbol 1906 . 1911) (symbol 1884 . 1905) (punctuation 1882 . 1883) (semantic-list 1804 . 1882) (symbol 1785 . 1801) (punctuation 1783 . 1784) (symbol 1777 . 1782) (CONST 1771 . 1776) (symbol 1749 . 1770) (punctuation 1747 . 1748) (semantic-list 1741 . 1747) (symbol 1722 . 1735) (punctuation 1715 . 1716) (punctuation 1714 . 1715) (symbol 1708 . 1713) (symbol 1686 . 1707) (punctuation 1683 . 1684) (semantic-list 1677 . 1683) (symbol 1658 . 1667) (punctuation 1651 . 1652) (punctuation 1650 . 1651) (symbol 1644 . 1649) (symbol 1622 . 1643) (punctuation 1620 . 1621) (semantic-list 1596 . 1620) (symbol 1577 . 1587) (VOID 1563 . 1567) (symbol 1541 . 1562) (punctuation 1539 . 1540) (semantic-list 1401 . 1539) (symbol 1382 . 1390) (symbol 1368 . 1376) (symbol 1346 . 1367) (punctuation 1344 . 1345) (semantic-list 1320 . 1344) (symbol 1301 . 1309) (punctuation 1299 . 1300) (symbol 1293 . 1298) (CONST 1287 . 1292) (symbol 1265 . 1286) (symbol 1250 . 1263) (string 1174 . 1215) (symbol 1168 . 1173) (punctuation 1167 . 1168))
      :lexical-table 
        '(("__G_ENVIRON_H__")
          )
)
    (semanticdb-table "gerror.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_ERROR_H__" variable (:constant-flag t) nil [823 836])
            ("stdarg.h" include (:system-flag t) nil [959 978])
            ("glib/gquark.h" include (:system-flag t) nil [980 1004])
            ((((0) "GError")) type (:superclasses ("_GError" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1273 1303])
            ("_GError" type
               (:members (((("domain" 0 nil nil nil)) variable (:type ("GQuark" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1324 1344]) ((("code" 0 nil nil nil)) variable (:type ("gint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1347 1365]) ((("message" 1 nil nil nil)) variable (:type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1368 1389]))
                :type "struct")
                nil [1305 1392])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [1616 1637])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [2064 2084])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [2796 2817])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [3602 3623])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [3924 3945]))          
      :file "gerror.h"
      :pointmax 3987
      :fsize 3986
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 3947 . 3958) (number 3942 . 3943) (number 3939 . 3940) (semantic-list 3737 . 3923) (symbol 3708 . 3734) (VOID 3699 . 3703) (symbol 3677 . 3698) (number 3620 . 3621) (number 3617 . 3618) (semantic-list 3475 . 3601) (symbol 3446 . 3460) (VOID 3437 . 3441) (symbol 3415 . 3436) (punctuation 3352 . 3353) (semantic-list 3332 . 3352) (symbol 3310 . 3323) (VOID 3301 . 3305) (symbol 3279 . 3300) (punctuation 3216 . 3217) (semantic-list 3171 . 3216) (symbol 3149 . 3166) (VOID 3140 . 3144) (symbol 3118 . 3139) (punctuation 3056 . 3057) (semantic-list 2872 . 3056) (symbol 2850 . 2869) (VOID 2841 . 2845) (symbol 2819 . 2840) (number 2814 . 2815) (number 2811 . 2812) (semantic-list 2575 . 2795) (symbol 2553 . 2564) (VOID 2544 . 2548) (symbol 2522 . 2543) (punctuation 2424 . 2425) (semantic-list 2294 . 2424) (symbol 2272 . 2287) (symbol 2263 . 2271) (symbol 2241 . 2262) (punctuation 2238 . 2239) (semantic-list 2216 . 2238) (symbol 2194 . 2206) (punctuation 2191 . 2192) (symbol 2185 . 2191) (symbol 2163 . 2184) (punctuation 2161 . 2162) (semantic-list 2139 . 2161) (symbol 2117 . 2129) (VOID 2108 . 2112) (symbol 2086 . 2107) (number 2081 . 2082) (number 2078 . 2079) (semantic-list 1879 . 2063) (symbol 1857 . 1875) (punctuation 1854 . 1855) (symbol 1848 . 1854) (symbol 1826 . 1847) (punctuation 1824 . 1825) (semantic-list 1692 . 1824) (symbol 1670 . 1689) (punctuation 1667 . 1668) (symbol 1661 . 1667) (symbol 1639 . 1660) (number 1634 . 1635) (number 1631 . 1632) (semantic-list 1447 . 1615) (symbol 1425 . 1436) (punctuation 1422 . 1423) (symbol 1416 . 1422) (symbol 1394 . 1415) (symbol 1006 . 1019) (string 909 . 950) (symbol 903 . 908) (punctuation 902 . 903))
      :lexical-table 
        '(("__G_ERROR_H__")
          )
)
    (semanticdb-table "gfileutils.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_FILEUTILS_H__" variable (:constant-flag t) nil [792 809])
            ("glib/gerror.h" include (:system-flag t) nil [932 956])
            ("G_FILE_ERROR" variable (:constant-flag t) nil [981 993])
            ((((0) "GFileError")) type (:superclasses ("" type (:members (("G_FILE_ERROR_EXIST" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1034 1053]) ("G_FILE_ERROR_ISDIR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1056 1075]) ("G_FILE_ERROR_ACCES" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1078 1097]) ("G_FILE_ERROR_NAMETOOLONG" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1100 1125]) ("G_FILE_ERROR_NOENT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1128 1147]) ("G_FILE_ERROR_NOTDIR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1150 1170]) ("G_FILE_ERROR_NXIO" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1173 1191]) ("G_FILE_ERROR_NODEV" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1194 1213]) ("G_FILE_ERROR_ROFS" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1216 1234]) ("G_FILE_ERROR_TXTBSY" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1237 1257]) ("G_FILE_ERROR_FAULT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1260 1279]) ("G_FILE_ERROR_LOOP" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1282 1300]) ("G_FILE_ERROR_NOSPC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1303 1322]) ("G_FILE_ERROR_NOMEM" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1325 1344]) ("G_FILE_ERROR_MFILE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1347 1366]) ("G_FILE_ERROR_NFILE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1369 1388]) ("G_FILE_ERROR_BADF" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1391 1409]) ("G_FILE_ERROR_INVAL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1412 1431]) ("G_FILE_ERROR_PIPE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1434 1452]) ("G_FILE_ERROR_AGAIN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1455 1474]) ("G_FILE_ERROR_INTR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1477 1495]) ("G_FILE_ERROR_IO" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1498 1514]) ("G_FILE_ERROR_PERM" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1517 1535]) ("G_FILE_ERROR_NOSYS" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1538 1557]) ("G_FILE_ERROR_FAILED" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1560 1581])) :type "enum") nil nil) :type "typedef") nil [1017 1593])
            ((((0) "GFileTest")) type (:superclasses ("" type (:members (("G_FILE_TEST_IS_REGULAR" variable (:constant-flag t :default-value (1774 1775) :type "int") (reparse-symbol enumsubparts) [1746 1775]) ("G_FILE_TEST_IS_SYMLINK" variable (:constant-flag t :default-value (1812 1813) :type "int") (reparse-symbol enumsubparts) [1784 1813]) ("G_FILE_TEST_IS_DIR" variable (:constant-flag t :default-value (1850 1851) :type "int") (reparse-symbol enumsubparts) [1822 1851]) ("G_FILE_TEST_IS_EXECUTABLE" variable (:constant-flag t :default-value (1888 1889) :type "int") (reparse-symbol enumsubparts) [1860 1889]) ("G_FILE_TEST_EXISTS" variable (:constant-flag t :default-value (1926 1927) :type "int") (reparse-symbol enumsubparts) [1898 1927])) :type "enum") nil nil) :type "typedef") nil [1729 1945])
            ((("G_GNUC_NULL_TERMINATED" 0 nil nil nil)) variable (:type ("G_GNUC_MALLOC" type (:type "class") nil nil)) nil [3916 3953])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [4083 4097])
            ((("G_GNUC_NULL_TERMINATED" 0 nil nil nil)) variable (:type ("G_GNUC_MALLOC" type (:type "class") nil nil)) nil [4216 4253])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [4326 4340])
            ("G_DIR_SEPARATOR" variable (:constant-flag t) nil [4913 4928])
            ("G_DIR_SEPARATOR_S" variable (:constant-flag t) nil [4941 4958])
            ("G_IS_DIR_SEPARATOR" variable (:constant-flag t) nil [4971 4989])
            ("G_SEARCHPATH_SEPARATOR" variable (:constant-flag t) nil [5026 5048])
            ("G_SEARCHPATH_SEPARATOR_S" variable (:constant-flag t) nil [5061 5085])
            ("g_dirname" variable (:constant-flag t) nil [5414 5423])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [5582 5596])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [5671 5685]))          
      :file "gfileutils.h"
      :pointmax 6802
      :fsize 6801
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 6758 . 6769) (semantic-list 5646 . 5670) (symbol 5626 . 5644) (punctuation 5625 . 5626) (symbol 5619 . 5624) (symbol 5597 . 5618) (semantic-list 5557 . 5581) (symbol 5537 . 5556) (punctuation 5536 . 5537) (symbol 5530 . 5535) (symbol 5508 . 5529) (punctuation 5506 . 5507) (semantic-list 5500 . 5506) (symbol 5480 . 5497) (punctuation 5479 . 5480) (symbol 5473 . 5478) (symbol 5451 . 5472) (punctuation 5375 . 5376) (semantic-list 5351 . 5375) (symbol 5332 . 5342) (punctuation 5331 . 5332) (symbol 5325 . 5330) (CONST 5319 . 5324) (semantic-list 5297 . 5318) (symbol 5278 . 5297) (punctuation 5275 . 5276) (semantic-list 5251 . 5275) (symbol 5232 . 5248) (punctuation 5231 . 5232) (symbol 5225 . 5230) (CONST 5219 . 5224) (symbol 5197 . 5218) (punctuation 5195 . 5196) (semantic-list 5171 . 5195) (symbol 5152 . 5170) (symbol 5139 . 5147) (symbol 5117 . 5138) (punctuation 4467 . 4468) (semantic-list 4394 . 4467) (symbol 4373 . 4393) (symbol 4364 . 4368) (symbol 4342 . 4363) (semantic-list 4306 . 4325) (symbol 4285 . 4302) (punctuation 4284 . 4285) (symbol 4276 . 4281) (symbol 4254 . 4275) (semantic-list 4151 . 4215) (symbol 4130 . 4146) (punctuation 4129 . 4130) (symbol 4121 . 4126) (symbol 4099 . 4120) (semantic-list 4006 . 4082) (symbol 3985 . 3998) (punctuation 3984 . 3985) (symbol 3976 . 3981) (symbol 3954 . 3975) (semantic-list 3796 . 3915) (symbol 3775 . 3787) (punctuation 3774 . 3775) (symbol 3766 . 3771) (symbol 3744 . 3765) (punctuation 3741 . 3742) (semantic-list 3669 . 3741) (symbol 3648 . 3662) (punctuation 3647 . 3648) (symbol 3639 . 3644) (symbol 3616 . 3638) (punctuation 3614 . 3615) (semantic-list 3486 . 3614) (symbol 3465 . 3480) (symbol 3456 . 3460) (symbol 3434 . 3455) (punctuation 3386 . 3387) (semantic-list 3263 . 3386) (symbol 3242 . 3256) (symbol 3233 . 3237) (symbol 3211 . 3232) (punctuation 3209 . 3210) (semantic-list 3189 . 3209) (symbol 3168 . 3177) (symbol 3159 . 3163) (symbol 3137 . 3158) (punctuation 3094 . 3095) (semantic-list 3023 . 3094) (symbol 3002 . 3016) (punctuation 3001 . 3002) (symbol 2993 . 2998) (symbol 2970 . 2992) (punctuation 2968 . 2969) (semantic-list 2948 . 2968) (symbol 2927 . 2936) (punctuation 2926 . 2927) (symbol 2918 . 2923) (symbol 2895 . 2917) (punctuation 2852 . 2853) (semantic-list 2777 . 2852) (symbol 2757 . 2773) (punctuation 2756 . 2757) (symbol 2748 . 2753) (symbol 2726 . 2747) (punctuation 2724 . 2725) (semantic-list 2543 . 2724) (symbol 2523 . 2542) (symbol 2514 . 2522) (symbol 2492 . 2513) (punctuation 2490 . 2491) (semantic-list 2309 . 2490) (symbol 2289 . 2308) (symbol 2280 . 2288) (symbol 2258 . 2279) (punctuation 2256 . 2257) (semantic-list 2182 . 2256) (symbol 2162 . 2173) (symbol 2153 . 2161) (symbol 2131 . 2152) (punctuation 2128 . 2129) (semantic-list 2115 . 2128) (symbol 2091 . 2114) (symbol 2080 . 2090) (symbol 2058 . 2079) (punctuation 2010 . 2011) (semantic-list 2004 . 2010) (symbol 1980 . 1998) (symbol 1969 . 1975) (symbol 1947 . 1968) (number 1931 . 1932) (punctuation 1929 . 1930) (punctuation 1928 . 1929) (number 1893 . 1894) (punctuation 1891 . 1892) (punctuation 1890 . 1891) (number 1855 . 1856) (punctuation 1853 . 1854) (punctuation 1852 . 1853) (number 1817 . 1818) (punctuation 1815 . 1816) (punctuation 1814 . 1815) (number 1779 . 1780) (punctuation 1777 . 1778) (punctuation 1776 . 1777) (symbol 958 . 971) (string 882 . 923) (symbol 876 . 881) (punctuation 875 . 876))
      :lexical-table 
        '(("G_FILE_ERROR" . ((symbol "g_file_error_quark" 994 . 1012) (semantic-list "()" 1013 . 1015)))
          ("G_DIR_SEPARATOR" . ((string "'/'" 4929 . 4932)))
          ("G_IS_DIR_SEPARATOR" (spp-arg-list ("c") 4989 . 4992) . ((semantic-list "((c) == G_DIR_SEPARATOR)" 4993 . 5017)))
          ("g_dirname" . ((symbol "g_path_get_dirname" 5424 . 5442)))
          ("__G_FILEUTILS_H__")
          ("G_DIR_SEPARATOR_S" . ((string "\"/\"" 4959 . 4962)))
          ("G_SEARCHPATH_SEPARATOR" . ((string "':'" 5049 . 5052)))
          ("G_SEARCHPATH_SEPARATOR_S" . ((string "\":\"" 5086 . 5089)))
          )
)
    (semanticdb-table "ggettext.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_GETTEXT_H__" variable (:constant-flag t) nil [1086 1101])
            ("glib/gtypes.h" include (:system-flag t) nil [1224 1248])
            ("G_GNUC_FORMAT" function
               (:prototype-flag t
                :type "int")
                nil [1388 1405])
            ("G_GNUC_FORMAT" function
               (:prototype-flag t
                :type "int")
                nil [1530 1547])
            ("G_GNUC_FORMAT" function
               (:prototype-flag t
                :type "int")
                nil [1724 1741])
            ("G_GNUC_FORMAT" function
               (:prototype-flag t
                :type "int")
                nil [1968 1985])
            ("G_GNUC_FORMAT" function
               (:prototype-flag t
                :type "int")
                nil [2169 2186])
            ("G_GNUC_FORMAT" function
               (:prototype-flag t
                :type "int")
                nil [2362 2379]))          
      :file "ggettext.h"
      :pointmax 2423
      :fsize 2422
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 2381 . 2392) (number 2376 . 2377) (semantic-list 2238 . 2361) (symbol 2222 . 2234) (punctuation 2221 . 2222) (symbol 2215 . 2220) (CONST 2209 . 2214) (symbol 2187 . 2208) (number 2183 . 2184) (semantic-list 2037 . 2168) (symbol 2021 . 2032) (punctuation 2020 . 2021) (symbol 2014 . 2019) (CONST 2008 . 2013) (symbol 1986 . 2007) (number 1982 . 1983) (semantic-list 1793 . 1967) (symbol 1777 . 1788) (punctuation 1776 . 1777) (symbol 1770 . 1775) (CONST 1764 . 1769) (symbol 1742 . 1763) (number 1738 . 1739) (semantic-list 1599 . 1723) (symbol 1583 . 1594) (punctuation 1582 . 1583) (symbol 1576 . 1581) (CONST 1570 . 1575) (symbol 1548 . 1569) (number 1544 . 1545) (semantic-list 1458 . 1529) (symbol 1442 . 1452) (punctuation 1441 . 1442) (symbol 1435 . 1440) (CONST 1429 . 1434) (symbol 1407 . 1428) (number 1402 . 1403) (semantic-list 1316 . 1387) (symbol 1300 . 1315) (punctuation 1299 . 1300) (symbol 1293 . 1298) (CONST 1287 . 1292) (symbol 1265 . 1286) (symbol 1250 . 1263) (string 1174 . 1215) (symbol 1168 . 1173) (punctuation 1167 . 1168))
      :lexical-table 
        '(("__G_GETTEXT_H__")
          )
)
    (semanticdb-table "ghash.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_HASH_H__" variable (:constant-flag t) nil [1083 1095])
            ("glib/gtypes.h" include (:system-flag t) nil [1218 1242])
            ("glib/glist.h" include (:system-flag t) nil [1243 1266])
            ((((0) "GHashTable")) type (:superclasses ("_GHashTable" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1283 1322])
            ((((0) "GHashTableIter")) type (:superclasses ("_GHashTableIter" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1472 1518])
            ("_GHashTableIter" type
               (:members (((("dummy1" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1565 1586]) ((("dummy2" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1589 1610]) ((("dummy3" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1613 1634]) ((("dummy4" 0 nil nil nil)) variable (:type "int") (reparse-symbol classsubparts) [1637 1658]) ((("dummy5" 0 nil nil nil)) variable (:type ("gboolean" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1661 1682]) ((("dummy6" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1685 1706]))
                :type "struct")
                nil [1520 1709])
            ("g_hash_table_freeze" variable (:constant-flag t) nil [6472 6491])
            ("g_hash_table_thaw" variable (:constant-flag t) nil [6522 6539])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [7369 7382])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [7493 7506]))          
      :file "ghash.h"
      :pointmax 7547
      :fsize 7546
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 7508 . 7519) (semantic-list 7429 . 7492) (symbol 7414 . 7428) (symbol 7405 . 7413) (symbol 7383 . 7404) (semantic-list 7350 . 7368) (symbol 7335 . 7348) (symbol 7326 . 7331) (symbol 7304 . 7325) (punctuation 7301 . 7302) (semantic-list 7283 . 7301) (symbol 7268 . 7281) (symbol 7259 . 7264) (symbol 7237 . 7258) (punctuation 7235 . 7236) (semantic-list 7172 . 7235) (symbol 7157 . 7171) (symbol 7148 . 7156) (symbol 7126 . 7147) (punctuation 7123 . 7124) (semantic-list 7105 . 7123) (symbol 7090 . 7102) (symbol 7081 . 7086) (symbol 7059 . 7080) (punctuation 7057 . 7058) (semantic-list 6994 . 7057) (symbol 6979 . 6992) (symbol 6970 . 6978) (symbol 6948 . 6969) (punctuation 6945 . 6946) (semantic-list 6927 . 6945) (symbol 6912 . 6922) (symbol 6903 . 6908) (symbol 6881 . 6902) (punctuation 6879 . 6880) (semantic-list 6816 . 6879) (symbol 6801 . 6812) (symbol 6792 . 6800) (symbol 6770 . 6791) (punctuation 6767 . 6768) (semantic-list 6749 . 6767) (symbol 6734 . 6744) (symbol 6725 . 6730) (symbol 6703 . 6724) (punctuation 6701 . 6702) (semantic-list 6638 . 6701) (symbol 6623 . 6634) (symbol 6614 . 6622) (symbol 6592 . 6613) (punctuation 6432 . 6433) (semantic-list 6404 . 6432) (symbol 6373 . 6391) (VOID 6361 . 6365) (symbol 6339 . 6360) (punctuation 6337 . 6338) (semantic-list 6309 . 6337) (symbol 6278 . 6294) (punctuation 6276 . 6277) (symbol 6266 . 6276) (symbol 6244 . 6265) (punctuation 6241 . 6242) (semantic-list 6219 . 6241) (symbol 6188 . 6211) (VOID 6176 . 6180) (symbol 6154 . 6175) (punctuation 6152 . 6153) (semantic-list 6063 . 6152) (symbol 6032 . 6057) (VOID 6020 . 6024) (symbol 5997 . 6019) (punctuation 5995 . 5996) (semantic-list 5973 . 5995) (symbol 5942 . 5966) (VOID 5930 . 5934) (symbol 5908 . 5929) (punctuation 5906 . 5907) (semantic-list 5884 . 5906) (symbol 5851 . 5883) (punctuation 5849 . 5850) (symbol 5839 . 5849) (symbol 5817 . 5838) (punctuation 5815 . 5816) (semantic-list 5661 . 5815) (symbol 5630 . 5652) (symbol 5618 . 5626) (symbol 5596 . 5617) (punctuation 5594 . 5595) (semantic-list 5500 . 5594) (symbol 5469 . 5491) (VOID 5457 . 5461) (symbol 5435 . 5456) (punctuation 5432 . 5433) (semantic-list 5336 . 5432) (symbol 5305 . 5335) (punctuation 5302 . 5303) (symbol 5293 . 5301) (symbol 5270 . 5292) (punctuation 5268 . 5269) (semantic-list 5240 . 5268) (symbol 5209 . 5232) (punctuation 5203 . 5204) (symbol 5197 . 5202) (symbol 5175 . 5196) (punctuation 5173 . 5174) (semantic-list 5145 . 5173) (symbol 5114 . 5135) (punctuation 5108 . 5109) (symbol 5102 . 5107) (symbol 5080 . 5101) (punctuation 5078 . 5079) (semantic-list 5050 . 5078) (symbol 5019 . 5036) (symbol 5007 . 5012) (symbol 4985 . 5006) (punctuation 4983 . 4984) (semantic-list 4818 . 4983) (symbol 4787 . 4813) (symbol 4775 . 4780) (symbol 4753 . 4774) (punctuation 4751 . 4752) (semantic-list 4586 . 4751) (symbol 4555 . 4582) (symbol 4543 . 4548) (symbol 4521 . 4542) (punctuation 4519 . 4520) (semantic-list 4349 . 4519) (symbol 4318 . 4335) (symbol 4306 . 4314) (symbol 4284 . 4305) (punctuation 4282 . 4283) (semantic-list 4117 . 4282) (symbol 4086 . 4106) (VOID 4074 . 4078) (symbol 4052 . 4073) (punctuation 4050 . 4051) (semantic-list 3813 . 4050) (symbol 3782 . 3810) (symbol 3770 . 3778) (symbol 3748 . 3769) (punctuation 3746 . 3747) (semantic-list 3653 . 3746) (symbol 3622 . 3643) (symbol 3610 . 3618) (symbol 3588 . 3609) (punctuation 3586 . 3587) (semantic-list 3493 . 3586) (symbol 3462 . 3481) (symbol 3450 . 3458) (symbol 3428 . 3449) (punctuation 3426 . 3427) (semantic-list 3398 . 3426) (symbol 3367 . 3389) (VOID 3355 . 3359) (symbol 3333 . 3354) (punctuation 3331 . 3332) (semantic-list 3238 . 3331) (symbol 3207 . 3225) (symbol 3195 . 3203) (symbol 3173 . 3194) (punctuation 3171 . 3172) (semantic-list 3143 . 3171) (symbol 3112 . 3135) (VOID 3100 . 3104) (symbol 3078 . 3099) (punctuation 3076 . 3077) (semantic-list 2983 . 3076) (symbol 2952 . 2971) (symbol 2940 . 2948) (symbol 2918 . 2939) (punctuation 2916 . 2917) (semantic-list 2823 . 2916) (symbol 2792 . 2808) (symbol 2780 . 2788) (symbol 2758 . 2779) (punctuation 2756 . 2757) (semantic-list 2596 . 2756) (symbol 2565 . 2585) (symbol 2553 . 2561) (symbol 2531 . 2552) (punctuation 2529 . 2530) (semantic-list 2369 . 2529) (symbol 2338 . 2357) (symbol 2326 . 2334) (symbol 2304 . 2325) (punctuation 2302 . 2303) (semantic-list 2274 . 2302) (symbol 2243 . 2263) (VOID 2231 . 2235) (symbol 2209 . 2230) (punctuation 2207 . 2208) (semantic-list 1946 . 2207) (symbol 1915 . 1936) (punctuation 1913 . 1914) (symbol 1903 . 1913) (symbol 1881 . 1902) (punctuation 1879 . 1880) (semantic-list 1776 . 1879) (symbol 1745 . 1761) (punctuation 1743 . 1744) (symbol 1733 . 1743) (symbol 1711 . 1732) (punctuation 1469 . 1470) (semantic-list 1354 . 1469) (semantic-list 1342 . 1352) (symbol 1332 . 1340) (TYPEDEF 1324 . 1331) (symbol 1268 . 1281) (string 1168 . 1209) (symbol 1162 . 1167) (punctuation 1161 . 1162))
      :lexical-table 
        '(("__G_HASH_H__")
          ("g_hash_table_thaw" (spp-arg-list ("hash_table") 6539 . 6551) . ((semantic-list "((void)0)" 6552 . 6561)))
          ("g_hash_table_freeze" (spp-arg-list ("hash_table") 6491 . 6503) . ((semantic-list "((void)0)" 6504 . 6513)))
          )
)
    (semanticdb-table "ghmac.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_HMAC_H__" variable (:constant-flag t) nil [803 815])
            ("glib/gtypes.h" include (:system-flag t) nil [938 962])
            ("gchecksum.h" include nil nil [963 985])
            ((((0) "GHmac")) type (:superclasses ("_GHmac" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1179 1213]))          
      :file "ghmac.h"
      :pointmax 3218
      :fsize 3217
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 3175 . 3186) (punctuation 3172 . 3173) (semantic-list 2845 . 3172) (symbol 2815 . 2840) (punctuation 2814 . 2815) (symbol 2793 . 2798) (symbol 2770 . 2792) (punctuation 2768 . 2769) (semantic-list 2440 . 2768) (symbol 2410 . 2433) (punctuation 2409 . 2410) (symbol 2388 . 2393) (symbol 2365 . 2387) (punctuation 2362 . 2363) (semantic-list 2185 . 2362) (symbol 2155 . 2172) (VOID 2133 . 2137) (symbol 2110 . 2132) (punctuation 2108 . 2109) (semantic-list 2087 . 2108) (symbol 2057 . 2074) (punctuation 2047 . 2048) (symbol 2041 . 2046) (CONST 2035 . 2040) (symbol 2012 . 2034) (punctuation 2010 . 2011) (semantic-list 1839 . 2010) (symbol 1809 . 1822) (VOID 1787 . 1791) (symbol 1764 . 1786) (punctuation 1762 . 1763) (semantic-list 1741 . 1762) (symbol 1711 . 1723) (VOID 1689 . 1693) (symbol 1666 . 1688) (punctuation 1664 . 1665) (semantic-list 1643 . 1664) (symbol 1613 . 1623) (punctuation 1597 . 1598) (symbol 1591 . 1596) (symbol 1568 . 1590) (punctuation 1566 . 1567) (semantic-list 1545 . 1566) (symbol 1515 . 1526) (punctuation 1499 . 1500) (symbol 1493 . 1498) (symbol 1470 . 1492) (punctuation 1468 . 1469) (semantic-list 1290 . 1468) (symbol 1260 . 1270) (punctuation 1244 . 1245) (symbol 1238 . 1243) (symbol 1215 . 1237) (symbol 987 . 1000) (string 888 . 929) (symbol 882 . 887) (punctuation 881 . 882))
      :lexical-table 
        '(("__G_HMAC_H__")
          )
)
    (semanticdb-table "ghook.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_HOOK_H__" variable (:constant-flag t) nil [1083 1095])
            ("glib/gmem.h" include (:system-flag t) nil [1218 1240])
            ((((0) "GHook")) type (:superclasses ("_GHook" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1281 1310])
            ((((0) "GHookList")) type (:superclasses ("_GHookList" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1311 1347])
            ((((0) "GHookFlagMask")) type (:superclasses ("" type (:members (("G_HOOK_FLAG_ACTIVE" variable (:constant-flag t :default-value (1902 1903) :type "int") (reparse-symbol enumsubparts) [1877 1903]) ("G_HOOK_FLAG_IN_CALL" variable (:constant-flag t :default-value (1938 1939) :type "int") (reparse-symbol enumsubparts) [1912 1939]) ("G_HOOK_FLAG_MASK" variable (:constant-flag t :default-value (1971 1975) :type "int") (reparse-symbol enumsubparts) [1948 1975])) :type "enum") nil nil) :type "typedef") nil [1860 1992])
            ("G_HOOK_FLAG_USER_SHIFT" variable (:constant-flag t) nil [2001 2023])
            ("_GHookList" type
               (:members (((("seq_id" 0 nil nil nil)) variable (:type ("gulong" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2077 2095]) ((("hook_size" 0 "16" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2098 2124]) ((("is_setup" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2127 2151]) ((("hooks" 1 nil nil nil)) variable (:type ("GHook" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2154 2171]) ((("dummy3" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2174 2194]) ((("finalize_hook" 0 nil nil nil)) variable (:type ("GHookFinalizeFunc" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2197 2229]) ((("dummy" 0 nil (1) nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2232 2254]))
                :type "struct")
                nil [2055 2257])
            ("_GHook" type
               (:members (((("data" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2276 2291]) ((("next" 1 nil nil nil)) variable (:type ("GHook" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2294 2307]) ((("prev" 1 nil nil nil)) variable (:type ("GHook" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2310 2323]) ((("ref_count" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2326 2344]) ((("hook_id" 0 nil nil nil)) variable (:type ("gulong" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2347 2363]) ((("flags" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2366 2380]) ((("func" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2383 2398]) ((("destroy" 0 nil nil nil)) variable (:type ("GDestroyNotify" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2401 2424]))
                :type "struct")
                nil [2258 2427])
            ("G_HOOK" variable (:constant-flag t) nil [2459 2465])
            ("G_HOOK_FLAGS" variable (:constant-flag t) nil [2500 2512])
            ("G_HOOK_ACTIVE" variable (:constant-flag t) nil [2551 2564])
            ("G_HOOK_IN_CALL" variable (:constant-flag t) nil [2639 2653])
            ("G_HOOK_IS_VALID" variable (:constant-flag t) nil [2729 2744])
            ("G_HOOK_IS_UNLINKED" variable (:constant-flag t) nil [2888 2906])
            ("g_hook_append" variable (:constant-flag t) nil [5442 5455]))          
      :file "ghook.h"
      :pointmax 6357
      :fsize 6356
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 6318 . 6329) (punctuation 6315 . 6316) (semantic-list 6191 . 6315) (symbol 6165 . 6190) (VOID 6159 . 6163) (symbol 6137 . 6158) (punctuation 6135 . 6136) (semantic-list 6016 . 6135) (symbol 5995 . 6014) (VOID 5989 . 5993) (symbol 5967 . 5988) (punctuation 5918 . 5919) (semantic-list 5865 . 5918) (symbol 5840 . 5864) (VOID 5834 . 5838) (symbol 5812 . 5833) (punctuation 5696 . 5697) (semantic-list 5643 . 5696) (symbol 5623 . 5641) (VOID 5617 . 5621) (symbol 5595 . 5616) (punctuation 5406 . 5407) (semantic-list 5363 . 5406) (symbol 5343 . 5361) (symbol 5337 . 5341) (symbol 5315 . 5336) (punctuation 5240 . 5241) (semantic-list 5163 . 5240) (symbol 5144 . 5161) (punctuation 5141 . 5142) (symbol 5136 . 5141) (symbol 5114 . 5135) (punctuation 4986 . 4987) (semantic-list 4930 . 4986) (symbol 4910 . 4928) (punctuation 4907 . 4908) (symbol 4902 . 4907) (symbol 4880 . 4901) (punctuation 4809 . 4810) (semantic-list 4710 . 4809) (symbol 4687 . 4708) (punctuation 4684 . 4685) (symbol 4679 . 4684) (symbol 4657 . 4678) (punctuation 4655 . 4656) (semantic-list 4579 . 4655) (symbol 4561 . 4577) (punctuation 4558 . 4559) (symbol 4553 . 4558) (symbol 4531 . 4552) (punctuation 4529 . 4530) (semantic-list 4453 . 4529) (symbol 4435 . 4451) (punctuation 4432 . 4433) (symbol 4427 . 4432) (symbol 4405 . 4426) (punctuation 4403 . 4404) (semantic-list 4299 . 4403) (symbol 4285 . 4296) (punctuation 4282 . 4283) (symbol 4277 . 4282) (symbol 4255 . 4276) (punctuation 4253 . 4254) (semantic-list 4205 . 4253) (symbol 4192 . 4202) (punctuation 4189 . 4190) (symbol 4184 . 4189) (symbol 4162 . 4183) (punctuation 4160 . 4161) (semantic-list 4086 . 4160) (symbol 4064 . 4084) (VOID 4058 . 4062) (symbol 4036 . 4057) (punctuation 4034 . 4035) (semantic-list 3966 . 4034) (symbol 3944 . 3964) (VOID 3938 . 3942) (symbol 3916 . 3937) (punctuation 3914 . 3915) (semantic-list 3870 . 3914) (symbol 3853 . 3867) (VOID 3847 . 3851) (symbol 3825 . 3846) (punctuation 3823 . 3824) (semantic-list 3779 . 3823) (symbol 3758 . 3777) (VOID 3752 . 3756) (symbol 3730 . 3751) (punctuation 3728 . 3729) (semantic-list 3680 . 3728) (symbol 3663 . 3677) (symbol 3654 . 3662) (symbol 3632 . 3653) (punctuation 3630 . 3631) (semantic-list 3586 . 3630) (symbol 3571 . 3583) (VOID 3565 . 3569) (symbol 3543 . 3564) (punctuation 3541 . 3542) (semantic-list 3497 . 3541) (symbol 3484 . 3494) (punctuation 3481 . 3482) (symbol 3475 . 3480) (symbol 3453 . 3474) (punctuation 3451 . 3452) (semantic-list 3407 . 3451) (symbol 3393 . 3404) (VOID 3387 . 3391) (symbol 3365 . 3386) (punctuation 3363 . 3364) (semantic-list 3340 . 3363) (symbol 3325 . 3337) (punctuation 3322 . 3323) (symbol 3317 . 3322) (symbol 3295 . 3316) (punctuation 3293 . 3294) (semantic-list 3270 . 3293) (symbol 3251 . 3268) (VOID 3245 . 3249) (symbol 3223 . 3244) (punctuation 3221 . 3222) (semantic-list 3172 . 3221) (symbol 3154 . 3170) (VOID 3148 . 3152) (symbol 3126 . 3147) (number 1943 . 1944) (punctuation 1941 . 1942) (punctuation 1940 . 1941) (number 1907 . 1908) (punctuation 1905 . 1906) (punctuation 1904 . 1905) (punctuation 1858 . 1859) (semantic-list 1802 . 1858) (semantic-list 1781 . 1801) (VOID 1775 . 1779) (TYPEDEF 1767 . 1774) (punctuation 1765 . 1766) (semantic-list 1749 . 1765) (semantic-list 1731 . 1748) (symbol 1722 . 1730) (TYPEDEF 1714 . 1721) (punctuation 1712 . 1713) (semantic-list 1696 . 1712) (semantic-list 1682 . 1694) (VOID 1676 . 1680) (TYPEDEF 1668 . 1675) (punctuation 1666 . 1667) (semantic-list 1621 . 1666) (semantic-list 1597 . 1620) (symbol 1588 . 1596) (TYPEDEF 1580 . 1587) (punctuation 1578 . 1579) (semantic-list 1533 . 1578) (semantic-list 1514 . 1532) (VOID 1508 . 1512) (TYPEDEF 1500 . 1507) (punctuation 1498 . 1499) (semantic-list 1461 . 1498) (semantic-list 1444 . 1460) (symbol 1435 . 1443) (TYPEDEF 1427 . 1434) (punctuation 1425 . 1426) (semantic-list 1383 . 1425) (semantic-list 1363 . 1382) (symbol 1357 . 1361) (TYPEDEF 1349 . 1356) (symbol 1242 . 1255) (string 1168 . 1209) (symbol 1162 . 1167) (punctuation 1161 . 1162))
      :lexical-table 
        '(("__G_HOOK_H__")
          ("G_HOOK_IS_UNLINKED" (spp-arg-list ("hook") 2906 . 2912) . ((semantic-list "(G_HOOK (hook)->next == NULL && \\
					 G_HOOK (hook)->prev == NULL && \\
					 G_HOOK (hook)->hook_id == 0 && \\
					 G_HOOK (hook)->ref_count == 0)" 2913 . 3061)))
          ("G_HOOK" (spp-arg-list ("hook") 2465 . 2471) . ((semantic-list "((GHook*) (hook))" 2474 . 2491)))
          ("G_HOOK_FLAG_USER_SHIFT" . ((semantic-list "(4)" 2024 . 2027)))
          ("G_HOOK_IS_VALID" (spp-arg-list ("hook") 2744 . 2750) . ((semantic-list "(G_HOOK (hook)->hook_id != 0 && \\
					 (G_HOOK_FLAGS (hook) & \\
                                          G_HOOK_FLAG_ACTIVE))" 2752 . 2879)))
          ("g_hook_append" (spp-arg-list ("hook_list" "hook") 5455 . 5474) . ((symbol "g_hook_insert_before" 5483 . 5503) (semantic-list "((hook_list), NULL, (hook))" 5504 . 5531)))
          ("G_HOOK_IN_CALL" (spp-arg-list ("hook") 2653 . 2659) . ((semantic-list "((G_HOOK_FLAGS (hook) & \\
					  G_HOOK_FLAG_IN_CALL) != 0)" 2661 . 2720)))
          ("G_HOOK_FLAGS" (spp-arg-list ("hook") 2512 . 2518) . ((semantic-list "(G_HOOK (hook)->flags)" 2520 . 2542)))
          ("G_HOOK_ACTIVE" (spp-arg-list ("hook") 2564 . 2570) . ((semantic-list "((G_HOOK_FLAGS (hook) & \\
					  G_HOOK_FLAG_ACTIVE) != 0)" 2572 . 2630)))
          )
)
    (semanticdb-table "ghostutils.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_HOST_UTILS_H__" variable (:constant-flag t) nil [801 819])
            ("glib/gtypes.h" include (:system-flag t) nil [942 966]))          
      :file "ghostutils.h"
      :pointmax 1455
      :fsize 1454
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 1410 . 1421) (punctuation 1407 . 1408) (semantic-list 1384 . 1407) (symbol 1356 . 1377) (punctuation 1355 . 1356) (symbol 1346 . 1351) (symbol 1324 . 1345) (punctuation 1322 . 1323) (semantic-list 1299 . 1322) (symbol 1271 . 1290) (punctuation 1270 . 1271) (symbol 1261 . 1266) (symbol 1239 . 1260) (punctuation 1236 . 1237) (semantic-list 1213 . 1236) (symbol 1185 . 1209) (symbol 1175 . 1183) (symbol 1153 . 1174) (punctuation 1151 . 1152) (semantic-list 1128 . 1151) (symbol 1100 . 1127) (symbol 1090 . 1098) (symbol 1068 . 1089) (punctuation 1066 . 1067) (semantic-list 1043 . 1066) (symbol 1015 . 1038) (symbol 1005 . 1013) (symbol 983 . 1004) (symbol 968 . 981) (string 892 . 933) (symbol 886 . 891) (punctuation 885 . 886))
      :lexical-table 
        '(("__G_HOST_UTILS_H__")
          )
)
    (semanticdb-table "giochannel.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_IOCHANNEL_H__" variable (:constant-flag t) nil [1088 1105])
            ("glib/gconvert.h" include (:system-flag t) nil [1228 1254])
            ("glib/gmain.h" include (:system-flag t) nil [1255 1278])
            ("glib/gstring.h" include (:system-flag t) nil [1279 1304])
            ((((0) "GIOChannel")) type (:superclasses ("_GIOChannel" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1340 1378])
            ((((0) "GIOFuncs")) type (:superclasses ("_GIOFuncs" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1379 1420])
            ((((0) "GIOError")) type (:superclasses ("" type (:members (("G_IO_ERROR_NONE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1439 1455]) ("G_IO_ERROR_AGAIN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1458 1475]) ("G_IO_ERROR_INVAL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1478 1495]) ("G_IO_ERROR_UNKNOWN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1498 1518])) :type "enum") nil nil) :type "typedef") nil [1422 1528])
            ("G_IO_CHANNEL_ERROR" variable (:constant-flag t) nil [1538 1556])
            ((((0) "GIOChannelError")) type (:superclasses ("" type (:members (("G_IO_CHANNEL_ERROR_FBIG" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1629 1653]) ("G_IO_CHANNEL_ERROR_INVAL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1656 1681]) ("G_IO_CHANNEL_ERROR_IO" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1684 1706]) ("G_IO_CHANNEL_ERROR_ISDIR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1709 1734]) ("G_IO_CHANNEL_ERROR_NOSPC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1737 1762]) ("G_IO_CHANNEL_ERROR_NXIO" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1765 1789]) ("G_IO_CHANNEL_ERROR_OVERFLOW" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1792 1820]) ("G_IO_CHANNEL_ERROR_PIPE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1823 1847]) ("G_IO_CHANNEL_ERROR_FAILED" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1864 1891])) :type "enum") nil nil) :type "typedef") nil [1585 1908])
            ((((0) "GIOStatus")) type (:superclasses ("" type (:members (("G_IO_STATUS_ERROR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1927 1945]) ("G_IO_STATUS_NORMAL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1948 1967]) ("G_IO_STATUS_EOF" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1970 1986]) ("G_IO_STATUS_AGAIN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1989 2008])) :type "enum") nil nil) :type "typedef") nil [1910 2019])
            ((((0) "GSeekType")) type (:superclasses ("" type (:members (("G_SEEK_CUR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2038 2049]) ("G_SEEK_SET" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2052 2063]) ("G_SEEK_END" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2066 2078])) :type "enum") nil nil) :type "typedef") nil [2021 2089])
            ((((0) "GIOFlags")) type (:superclasses ("" type (:members (("G_IO_FLAG_APPEND" variable (:constant-flag t :default-value (2127 2128) :type "int") (reparse-symbol enumsubparts) [2108 2128]) ("G_IO_FLAG_NONBLOCK" variable (:constant-flag t :default-value (2158 2159) :type "int") (reparse-symbol enumsubparts) [2137 2159]) ("G_IO_FLAG_IS_READABLE" variable (:constant-flag t :default-value (2192 2193) :type "int") (reparse-symbol enumsubparts) [2168 2193]) ("G_IO_FLAG_IS_WRITABLE" variable (:constant-flag t :default-value (2247 2248) :type "int") (reparse-symbol enumsubparts) [2223 2248]) ("G_IO_FLAG_IS_WRITEABLE" variable (:constant-flag t :default-value (2303 2304) :type "int") (reparse-symbol enumsubparts) [2278 2304]) ("G_IO_FLAG_IS_SEEKABLE" variable (:constant-flag t :default-value (2383 2384) :type "int") (reparse-symbol enumsubparts) [2359 2384]) ("G_IO_FLAG_MASK" variable (:constant-flag t :default-value (2431 2443) :type "int") (reparse-symbol enumsubparts) [2414 2443]) ("G_IO_FLAG_GET_MASK" variable (:constant-flag t :default-value (2468 2482) :type "int") (reparse-symbol enumsubparts) [2447 2482]) ("G_IO_FLAG_SET_MASK" variable (:constant-flag t :default-value (2507 2544) :type "int") (reparse-symbol enumsubparts) [2486 2544])) :type "enum") nil nil) :type "typedef") nil [2091 2556])
            ("_GIOChannel" type
               (:members (((("ref_count" 0 nil nil nil)) variable (:type ("gint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2599 2614]) ((("funcs" 1 nil nil nil)) variable (:type ("GIOFuncs" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2617 2633]) ((("encoding" 1 nil nil nil)) variable (:type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2637 2653]) ((("read_cd" 0 nil nil nil)) variable (:type ("GIConv" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2656 2671]) ((("write_cd" 0 nil nil nil)) variable (:type ("GIConv" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2674 2690]) ((("line_term" 1 nil nil nil)) variable (:type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2693 2710]) ((("line_term_len" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2769 2789]) ((("buf_size" 0 nil nil nil)) variable (:type ("gsize" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2837 2852]) ((("read_buf" 1 nil nil nil)) variable (:type ("GString" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2855 2873]) ((("encoded_read_buf" 1 nil nil nil)) variable (:type ("GString" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2909 2935]) ((("write_buf" 1 nil nil nil)) variable (:type ("GString" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2979 2998]) ((("partial_write_buf" 0 nil (1) nil)) variable (:type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3045 3072]) ((("use_buffer" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3211 3236]) ((("do_encode" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3275 3300]) ((("close_on_unref" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3348 3373]) ((("is_readable" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3415 3440]) ((("is_writeable" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3464 3489]) ((("is_seekable" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3504 3529]) ((("reserved1" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3545 3564]) ((("reserved2" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3568 3587]))
                :type "struct")
                nil [2558 3591])
            ("_GIOFuncs" type (:type "struct") nil [3706 4640])
            ((("g_io_watch_funcs" 0 nil nil nil)) variable (:type ("GSourceFuncs" type (:type "class") nil nil)) nil [11140 11170]))          
      :file "giochannel.h"
      :pointmax 14306
      :fsize 14305
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 14262 . 14273) (symbol 11131 . 11139) (punctuation 11068 . 11069) (semantic-list 11047 . 11068) (symbol 11022 . 11046) (symbol 11010 . 11014) (symbol 10988 . 11009) (punctuation 10986 . 10987) (semantic-list 10970 . 10986) (symbol 10945 . 10966) (punctuation 10943 . 10944) (symbol 10933 . 10943) (symbol 10911 . 10932) (punctuation 10008 . 10009) (semantic-list 9999 . 10008) (symbol 9969 . 9998) (symbol 9953 . 9968) (symbol 9931 . 9952) (punctuation 9929 . 9930) (semantic-list 9923 . 9929) (symbol 9893 . 9917) (symbol 9877 . 9883) (symbol 9855 . 9876) (punctuation 9830 . 9831) (semantic-list 9749 . 9830) (symbol 9719 . 9740) (punctuation 9717 . 9718) (symbol 9707 . 9717) (symbol 9685 . 9706) (punctuation 9683 . 9684) (semantic-list 9573 . 9683) (symbol 9543 . 9569) (symbol 9531 . 9540) (symbol 9509 . 9530) (punctuation 9507 . 9508) (semantic-list 9424 . 9507) (symbol 9394 . 9420) (symbol 9382 . 9391) (symbol 9360 . 9381) (punctuation 9358 . 9359) (semantic-list 9213 . 9358) (symbol 9183 . 9207) (symbol 9171 . 9180) (symbol 9149 . 9170) (punctuation 9147 . 9148) (semantic-list 9064 . 9147) (symbol 9034 . 9059) (symbol 9022 . 9031) (symbol 9000 . 9021) (punctuation 8998 . 8999) (semantic-list 8856 . 8998) (symbol 8826 . 8849) (symbol 8814 . 8823) (symbol 8792 . 8813) (punctuation 8790 . 8791) (semantic-list 8674 . 8790) (symbol 8644 . 8668) (symbol 8632 . 8641) (symbol 8610 . 8631) (punctuation 8608 . 8609) (semantic-list 8488 . 8608) (symbol 8458 . 8487) (symbol 8446 . 8455) (symbol 8424 . 8445) (punctuation 8422 . 8423) (semantic-list 8268 . 8422) (symbol 8238 . 8260) (symbol 8226 . 8235) (symbol 8204 . 8225) (punctuation 8202 . 8203) (semantic-list 8150 . 8202) (symbol 8120 . 8138) (symbol 8108 . 8117) (symbol 8086 . 8107) (punctuation 8082 . 8083) (semantic-list 8059 . 8082) (symbol 8027 . 8058) (symbol 8005 . 8013) (symbol 7983 . 8004) (punctuation 7981 . 7982) (semantic-list 7926 . 7981) (symbol 7894 . 7925) (VOID 7872 . 7876) (symbol 7850 . 7871) (punctuation 7848 . 7849) (semantic-list 7825 . 7848) (symbol 7791 . 7816) (punctuation 7781 . 7782) (symbol 7775 . 7780) (CONST 7769 . 7774) (symbol 7747 . 7768) (punctuation 7745 . 7746) (semantic-list 7661 . 7745) (symbol 7627 . 7652) (symbol 7605 . 7614) (symbol 7583 . 7604) (punctuation 7581 . 7582) (semantic-list 7558 . 7581) (symbol 7531 . 7556) (symbol 7516 . 7524) (symbol 7494 . 7515) (punctuation 7492 . 7493) (semantic-list 7437 . 7492) (symbol 7410 . 7435) (VOID 7398 . 7402) (symbol 7376 . 7397) (punctuation 7374 . 7375) (semantic-list 7321 . 7374) (symbol 7287 . 7313) (punctuation 7277 . 7278) (symbol 7271 . 7276) (CONST 7265 . 7270) (symbol 7243 . 7264) (punctuation 7241 . 7242) (semantic-list 7155 . 7241) (symbol 7121 . 7147) (VOID 7099 . 7103) (symbol 7077 . 7098) (punctuation 7075 . 7076) (semantic-list 7052 . 7075) (symbol 7018 . 7040) (symbol 6996 . 7004) (symbol 6974 . 6995) (punctuation 6972 . 6973) (semantic-list 6891 . 6972) (symbol 6857 . 6879) (symbol 6835 . 6844) (symbol 6813 . 6834) (punctuation 6811 . 6812) (semantic-list 6788 . 6811) (symbol 6754 . 6787) (symbol 6732 . 6744) (symbol 6710 . 6731) (punctuation 6708 . 6709) (semantic-list 6685 . 6708) (symbol 6651 . 6679) (symbol 6629 . 6634) (symbol 6607 . 6628) (punctuation 6605 . 6606) (semantic-list 6554 . 6605) (symbol 6520 . 6548) (VOID 6498 . 6502) (symbol 6476 . 6497) (punctuation 6415 . 6416) (semantic-list 6295 . 6415) (symbol 6273 . 6287) (symbol 6263 . 6268) (symbol 6241 . 6262) (punctuation 6239 . 6240) (semantic-list 6180 . 6239) (symbol 6158 . 6175) (punctuation 6156 . 6157) (symbol 6148 . 6155) (symbol 6126 . 6147) (punctuation 6124 . 6125) (semantic-list 5942 . 6124) (symbol 5920 . 5939) (symbol 5910 . 5915) (symbol 5888 . 5909) (punctuation 5886 . 5887) (semantic-list 5804 . 5886) (symbol 5782 . 5803) (symbol 5772 . 5781) (symbol 5750 . 5771) (punctuation 5747 . 5748) (semantic-list 5723 . 5747) (symbol 5701 . 5719) (VOID 5691 . 5695) (semantic-list 5667 . 5690) (symbol 5648 . 5667) (punctuation 5645 . 5646) (semantic-list 5511 . 5645) (symbol 5489 . 5506) (symbol 5479 . 5487) (semantic-list 5450 . 5478) (symbol 5431 . 5450) (punctuation 5428 . 5429) (semantic-list 5233 . 5428) (symbol 5211 . 5229) (symbol 5201 . 5209) (semantic-list 5174 . 5200) (symbol 5155 . 5174) (punctuation 5152 . 5153) (semantic-list 4960 . 5152) (symbol 4940 . 4957) (symbol 4928 . 4936) (semantic-list 4902 . 4927) (symbol 4883 . 4902) (punctuation 4880 . 4881) (semantic-list 4856 . 4880) (symbol 4836 . 4854) (VOID 4824 . 4828) (symbol 4802 . 4823) (punctuation 4800 . 4801) (semantic-list 4776 . 4800) (symbol 4756 . 4772) (punctuation 4755 . 4756) (symbol 4744 . 4754) (symbol 4722 . 4743) (punctuation 4720 . 4721) (semantic-list 4696 . 4720) (symbol 4676 . 4693) (VOID 4664 . 4668) (symbol 4642 . 4663) (punctuation 4636 . 4637) (semantic-list 4613 . 4636) (semantic-list 4593 . 4608) (symbol 4582 . 4590) (punctuation 4578 . 4579) (semantic-list 4475 . 4578) (semantic-list 4455 . 4470) (symbol 4444 . 4453) (punctuation 4440 . 4441) (semantic-list 4417 . 4440) (semantic-list 4397 . 4407) (VOID 4386 . 4390) (punctuation 4382 . 4383) (semantic-list 4328 . 4382) (semantic-list 4308 . 4326) (punctuation 4304 . 4305) (symbol 4297 . 4304) (punctuation 4293 . 4294) (semantic-list 4245 . 4293) (semantic-list 4225 . 4236) (symbol 4214 . 4223) (punctuation 4210 . 4211) (semantic-list 4106 . 4210) (semantic-list 4085 . 4095) (symbol 4075 . 4084) (punctuation 4071 . 4072) (semantic-list 3934 . 4071) (semantic-list 3913 . 3924) (symbol 3903 . 3912) (punctuation 3899 . 3900) (semantic-list 3758 . 3899) (semantic-list 3737 . 3747) (symbol 3727 . 3736) (punctuation 3704 . 3705) (semantic-list 3621 . 3704) (semantic-list 3610 . 3620) (symbol 3601 . 3609) (TYPEDEF 3593 . 3600) (number 2388 . 2389) (punctuation 2386 . 2387) (punctuation 2385 . 2386) (number 2308 . 2309) (punctuation 2306 . 2307) (punctuation 2305 . 2306) (number 2252 . 2253) (punctuation 2250 . 2251) (punctuation 2249 . 2250) (number 2197 . 2198) (punctuation 2195 . 2196) (punctuation 2194 . 2195) (number 2163 . 2164) (punctuation 2161 . 2162) (punctuation 2160 . 2161) (number 2132 . 2133) (punctuation 2130 . 2131) (punctuation 2129 . 2130) (symbol 1306 . 1319) (string 1178 . 1219) (symbol 1172 . 1177) (punctuation 1171 . 1172))
      :lexical-table 
        '(("G_IO_CHANNEL_ERROR" . ((symbol "g_io_channel_error_quark" 1557 . 1581) (semantic-list "()" 1581 . 1583)))
          ("__G_IOCHANNEL_H__")
          )
)
    (semanticdb-table "gkeyfile.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_KEY_FILE_H__" variable (:constant-flag t) nil [835 851])
            ("glib/gerror.h" include (:system-flag t) nil [974 998])
            ((((0) "GKeyFileError")) type (:superclasses ("" type (:members (("G_KEY_FILE_ERROR_UNKNOWN_ENCODING" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1032 1066]) ("G_KEY_FILE_ERROR_PARSE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1069 1092]) ("G_KEY_FILE_ERROR_NOT_FOUND" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1095 1122]) ("G_KEY_FILE_ERROR_KEY_NOT_FOUND" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1125 1156]) ("G_KEY_FILE_ERROR_GROUP_NOT_FOUND" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1159 1192]) ("G_KEY_FILE_ERROR_INVALID_VALUE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1195 1227])) :type "enum") nil nil) :type "typedef") nil [1015 1242])
            ("G_KEY_FILE_ERROR" variable (:constant-flag t) nil [1252 1268])
            ((((0) "GKeyFile")) type (:superclasses ("_GKeyFile" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1356 1390])
            ((((0) "GKeyFileFlags")) type (:superclasses ("" type (:members (("G_KEY_FILE_NONE" variable (:constant-flag t :default-value (1440 1441) :type "int") (reparse-symbol enumsubparts) [1409 1441]) ("G_KEY_FILE_KEEP_COMMENTS" variable (:constant-flag t :default-value (1476 1477) :type "int") (reparse-symbol enumsubparts) [1445 1477]) ("G_KEY_FILE_KEEP_TRANSLATIONS" variable (:constant-flag t :default-value (1517 1518) :type "int") (reparse-symbol enumsubparts) [1486 1518])) :type "enum") nil nil) :type "typedef") nil [1392 1540])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [3246 3260])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [3612 3626])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [3766 3780])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [4003 4017])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [4601 4615])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [5055 5069])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [5550 5564])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [8495 8509])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [9070 9084])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [9645 9659])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [10180 10194])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [10995 11009])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [11996 12010])
            ("G_KEY_FILE_DESKTOP_GROUP" variable (:constant-flag t) nil [12771 12795])
            ("G_KEY_FILE_DESKTOP_KEY_TYPE" variable (:constant-flag t) nil [12836 12863])
            ("G_KEY_FILE_DESKTOP_KEY_VERSION" variable (:constant-flag t) nil [12891 12921])
            ("G_KEY_FILE_DESKTOP_KEY_NAME" variable (:constant-flag t) nil [12949 12976])
            ("G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME" variable (:constant-flag t) nil [13004 13039])
            ("G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY" variable (:constant-flag t) nil [13066 13099])
            ("G_KEY_FILE_DESKTOP_KEY_COMMENT" variable (:constant-flag t) nil [13126 13156])
            ("G_KEY_FILE_DESKTOP_KEY_ICON" variable (:constant-flag t) nil [13184 13211])
            ("G_KEY_FILE_DESKTOP_KEY_HIDDEN" variable (:constant-flag t) nil [13239 13268])
            ("G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN" variable (:constant-flag t) nil [13296 13331])
            ("G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN" variable (:constant-flag t) nil [13357 13391])
            ("G_KEY_FILE_DESKTOP_KEY_TRY_EXEC" variable (:constant-flag t) nil [13417 13448])
            ("G_KEY_FILE_DESKTOP_KEY_EXEC" variable (:constant-flag t) nil [13475 13502])
            ("G_KEY_FILE_DESKTOP_KEY_PATH" variable (:constant-flag t) nil [13530 13557])
            ("G_KEY_FILE_DESKTOP_KEY_TERMINAL" variable (:constant-flag t) nil [13585 13616])
            ("G_KEY_FILE_DESKTOP_KEY_MIME_TYPE" variable (:constant-flag t) nil [13644 13676])
            ("G_KEY_FILE_DESKTOP_KEY_CATEGORIES" variable (:constant-flag t) nil [13703 13736])
            ("G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY" variable (:constant-flag t) nil [13764 13801])
            ("G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS" variable (:constant-flag t) nil [13828 13867])
            ("G_KEY_FILE_DESKTOP_KEY_URL" variable (:constant-flag t) nil [13893 13919])
            ("G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE" variable (:constant-flag t) nil [13947 13986])
            ("G_KEY_FILE_DESKTOP_KEY_ACTIONS" variable (:constant-flag t) nil [14013 14043])
            ("G_KEY_FILE_DESKTOP_KEY_GETTEXT_DOMAIN" variable (:constant-flag t) nil [14071 14108])
            ("G_KEY_FILE_DESKTOP_KEY_FULLNAME" variable (:constant-flag t) nil [14144 14175])
            ("G_KEY_FILE_DESKTOP_KEY_KEYWORDS" variable (:constant-flag t) nil [14211 14242])
            ("G_KEY_FILE_DESKTOP_TYPE_APPLICATION" variable (:constant-flag t) nil [14271 14306])
            ("G_KEY_FILE_DESKTOP_TYPE_LINK" variable (:constant-flag t) nil [14333 14361])
            ("G_KEY_FILE_DESKTOP_TYPE_DIRECTORY" variable (:constant-flag t) nil [14388 14421]))          
      :file "gkeyfile.h"
      :pointmax 14484
      :fsize 14483
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 14441 . 14452) (punctuation 12703 . 12704) (semantic-list 12588 . 12703) (symbol 12554 . 12577) (symbol 12544 . 12552) (symbol 12522 . 12543) (punctuation 12520 . 12521) (semantic-list 12368 . 12520) (symbol 12334 . 12355) (symbol 12324 . 12332) (symbol 12302 . 12323) (punctuation 12300 . 12301) (semantic-list 12078 . 12300) (symbol 12044 . 12069) (symbol 12034 . 12042) (symbol 12012 . 12033) (semantic-list 11738 . 11995) (symbol 11704 . 11726) (punctuation 11703 . 11704) (symbol 11694 . 11699) (symbol 11672 . 11693) (punctuation 11670 . 11671) (semantic-list 11337 . 11670) (symbol 11303 . 11325) (symbol 11293 . 11301) (symbol 11271 . 11292) (punctuation 11269 . 11270) (semantic-list 11076 . 11269) (symbol 11042 . 11069) (VOID 11032 . 11036) (symbol 11010 . 11031) (semantic-list 10662 . 10994) (symbol 10628 . 10654) (punctuation 10627 . 10628) (symbol 10618 . 10625) (symbol 10596 . 10617) (punctuation 10594 . 10595) (semantic-list 10261 . 10594) (symbol 10227 . 10253) (VOID 10217 . 10221) (symbol 10195 . 10216) (semantic-list 9987 . 10179) (symbol 9953 . 9980) (punctuation 9952 . 9953) (symbol 9943 . 9947) (symbol 9921 . 9942) (punctuation 9919 . 9920) (semantic-list 9726 . 9919) (symbol 9692 . 9719) (VOID 9682 . 9686) (symbol 9660 . 9681) (semantic-list 9452 . 9644) (symbol 9418 . 9445) (punctuation 9417 . 9418) (symbol 9408 . 9416) (symbol 9386 . 9407) (punctuation 9384 . 9385) (semantic-list 9151 . 9384) (symbol 9117 . 9150) (VOID 9107 . 9111) (symbol 9085 . 9106) (semantic-list 8837 . 9069) (symbol 8803 . 8836) (punctuation 8802 . 8803) (punctuation 8801 . 8802) (symbol 8793 . 8798) (symbol 8771 . 8792) (punctuation 8769 . 8770) (semantic-list 8576 . 8769) (symbol 8542 . 8568) (VOID 8532 . 8536) (symbol 8510 . 8531) (semantic-list 8302 . 8494) (symbol 8268 . 8294) (punctuation 8267 . 8268) (punctuation 8266 . 8267) (symbol 8258 . 8263) (symbol 8236 . 8257) (punctuation 8234 . 8235) (semantic-list 7977 . 8234) (symbol 7943 . 7964) (VOID 7933 . 7937) (symbol 7911 . 7932) (punctuation 7909 . 7910) (semantic-list 7652 . 7909) (symbol 7618 . 7639) (symbol 7608 . 7615) (symbol 7586 . 7607) (punctuation 7584 . 7585) (semantic-list 7432 . 7584) (symbol 7398 . 7419) (VOID 7388 . 7392) (symbol 7366 . 7387) (punctuation 7364 . 7365) (semantic-list 7212 . 7364) (symbol 7178 . 7199) (symbol 7168 . 7175) (symbol 7146 . 7167) (punctuation 7144 . 7145) (semantic-list 6992 . 7144) (symbol 6958 . 6978) (VOID 6948 . 6952) (symbol 6926 . 6947) (punctuation 6924 . 6925) (semantic-list 6772 . 6924) (symbol 6738 . 6758) (symbol 6728 . 6734) (symbol 6706 . 6727) (punctuation 6704 . 6705) (semantic-list 6552 . 6704) (symbol 6518 . 6540) (VOID 6508 . 6512) (symbol 6486 . 6507) (punctuation 6484 . 6485) (semantic-list 6332 . 6484) (symbol 6298 . 6320) (symbol 6288 . 6292) (symbol 6266 . 6287) (punctuation 6264 . 6265) (semantic-list 6112 . 6264) (symbol 6078 . 6100) (VOID 6068 . 6072) (symbol 6046 . 6067) (punctuation 6044 . 6045) (semantic-list 5892 . 6044) (symbol 5858 . 5880) (symbol 5848 . 5856) (symbol 5826 . 5847) (punctuation 5824 . 5825) (semantic-list 5631 . 5824) (symbol 5597 . 5625) (VOID 5587 . 5591) (symbol 5565 . 5586) (semantic-list 5357 . 5549) (symbol 5323 . 5351) (punctuation 5322 . 5323) (symbol 5313 . 5318) (symbol 5291 . 5312) (punctuation 5289 . 5290) (semantic-list 5136 . 5289) (symbol 5102 . 5123) (VOID 5092 . 5096) (symbol 5070 . 5091) (semantic-list 4902 . 5054) (symbol 4868 . 4889) (punctuation 4867 . 4868) (symbol 4858 . 4863) (symbol 4836 . 4857) (punctuation 4834 . 4835) (semantic-list 4682 . 4834) (symbol 4648 . 4668) (VOID 4638 . 4642) (symbol 4616 . 4637) (semantic-list 4448 . 4600) (symbol 4414 . 4434) (punctuation 4413 . 4414) (symbol 4404 . 4409) (symbol 4382 . 4403) (punctuation 4380 . 4381) (semantic-list 4228 . 4380) (symbol 4194 . 4212) (symbol 4184 . 4192) (symbol 4162 . 4183) (punctuation 4160 . 4161) (semantic-list 4084 . 4160) (symbol 4050 . 4070) (symbol 4040 . 4048) (symbol 4018 . 4039) (semantic-list 3847 . 4002) (symbol 3813 . 3832) (punctuation 3812 . 3813) (punctuation 3811 . 3812) (symbol 3803 . 3808) (symbol 3781 . 3802) (semantic-list 3693 . 3765) (symbol 3659 . 3680) (punctuation 3658 . 3659) (punctuation 3657 . 3658) (symbol 3649 . 3654) (symbol 3627 . 3648) (semantic-list 3579 . 3611) (symbol 3545 . 3571) (punctuation 3544 . 3545) (symbol 3535 . 3540) (symbol 3513 . 3534) (punctuation 3511 . 3512) (semantic-list 3328 . 3511) (symbol 3294 . 3317) (symbol 3284 . 3292) (symbol 3261 . 3283) (semantic-list 3134 . 3245) (symbol 3100 . 3118) (punctuation 3099 . 3100) (symbol 3090 . 3095) (symbol 3068 . 3089) (punctuation 3066 . 3067) (semantic-list 2875 . 3066) (symbol 2840 . 2870) (symbol 2831 . 2839) (symbol 2809 . 2830) (punctuation 2807 . 2808) (semantic-list 2597 . 2807) (symbol 2562 . 2587) (symbol 2553 . 2561) (symbol 2531 . 2552) (punctuation 2529 . 2530) (semantic-list 2341 . 2529) (symbol 2307 . 2332) (symbol 2297 . 2305) (symbol 2275 . 2296) (punctuation 2273 . 2274) (semantic-list 2125 . 2273) (symbol 2091 . 2116) (symbol 2081 . 2089) (symbol 2059 . 2080) (punctuation 2057 . 2058) (semantic-list 1982 . 2057) (symbol 1948 . 1977) (VOID 1938 . 1942) (symbol 1916 . 1937) (punctuation 1914 . 1915) (semantic-list 1882 . 1914) (symbol 1848 . 1863) (VOID 1838 . 1842) (symbol 1816 . 1837) (punctuation 1814 . 1815) (semantic-list 1782 . 1814) (symbol 1748 . 1764) (VOID 1738 . 1742) (symbol 1716 . 1737) (punctuation 1714 . 1715) (semantic-list 1682 . 1714) (symbol 1648 . 1662) (punctuation 1647 . 1648) (symbol 1638 . 1646) (symbol 1616 . 1637) (punctuation 1614 . 1615) (semantic-list 1608 . 1614) (symbol 1574 . 1588) (punctuation 1573 . 1574) (symbol 1564 . 1572) (symbol 1542 . 1563) (number 1522 . 1523) (punctuation 1520 . 1521) (punctuation 1519 . 1520) (number 1481 . 1482) (punctuation 1479 . 1480) (punctuation 1478 . 1479) (punctuation 1353 . 1354) (semantic-list 1347 . 1353) (symbol 1324 . 1346) (symbol 1317 . 1323) (symbol 1295 . 1316) (symbol 1000 . 1013) (string 924 . 965) (symbol 918 . 923) (punctuation 917 . 918))
      :lexical-table 
        '(("__G_KEY_FILE_H__")
          ("G_KEY_FILE_DESKTOP_KEY_MIME_TYPE" . ((string "\"MimeType\"" 13684 . 13694)))
          ("G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY" . ((string "\"StartupNotify\"" 13804 . 13819)))
          ("G_KEY_FILE_DESKTOP_GROUP" . ((string "\"Desktop Entry\"" 12811 . 12826)))
          ("G_KEY_FILE_DESKTOP_KEY_VERSION" . ((string "\"Version\"" 12931 . 12940)))
          ("G_KEY_FILE_DESKTOP_KEY_ACTIONS" . ((string "\"Actions\"" 14053 . 14062)))
          ("G_KEY_FILE_DESKTOP_KEY_KEYWORDS" . ((string "\"Keywords\"" 14251 . 14261)))
          ("G_KEY_FILE_DESKTOP_TYPE_DIRECTORY" . ((string "\"Directory\"" 14428 . 14439)))
          ("G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY" . ((string "\"NoDisplay\"" 13106 . 13117)))
          ("G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS" . ((string "\"StartupWMClass\"" 13868 . 13884)))
          ("G_KEY_FILE_DESKTOP_TYPE_APPLICATION" . ((string "\"Application\"" 14311 . 14324)))
          ("G_KEY_FILE_DESKTOP_KEY_TYPE" . ((string "\"Type\"" 12876 . 12882)))
          ("G_KEY_FILE_DESKTOP_KEY_COMMENT" . ((string "\"Comment\"" 13166 . 13175)))
          ("G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN" . ((string "\"NotShowIn\"" 13397 . 13408)))
          ("G_KEY_FILE_DESKTOP_KEY_TRY_EXEC" . ((string "\"TryExec\"" 13457 . 13466)))
          ("G_KEY_FILE_DESKTOP_KEY_CATEGORIES" . ((string "\"Categories\"" 13743 . 13755)))
          ("G_KEY_FILE_DESKTOP_KEY_GETTEXT_DOMAIN" . ((string "\"X-GNOME-Gettext-Domain\"" 14111 . 14135)))
          ("G_KEY_FILE_DESKTOP_KEY_HIDDEN" . ((string "\"Hidden\"" 13279 . 13287)))
          ("G_KEY_FILE_DESKTOP_KEY_TERMINAL" . ((string "\"Terminal\"" 13625 . 13635)))
          ("G_KEY_FILE_DESKTOP_KEY_NAME" . ((string "\"Name\"" 12989 . 12995)))
          ("G_KEY_FILE_DESKTOP_KEY_PATH" . ((string "\"Path\"" 13570 . 13576)))
          ("G_KEY_FILE_DESKTOP_KEY_URL" . ((string "\"URL\"" 13933 . 13938)))
          ("G_KEY_FILE_DESKTOP_TYPE_LINK" . ((string "\"Link\"" 14373 . 14379)))
          ("G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME" . ((string "\"GenericName\"" 13044 . 13057)))
          ("G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE" . ((string "\"DBusActivatable\"" 13987 . 14004)))
          ("G_KEY_FILE_DESKTOP_KEY_ICON" . ((string "\"Icon\"" 13224 . 13230)))
          ("G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN" . ((string "\"OnlyShowIn\"" 13336 . 13348)))
          ("G_KEY_FILE_DESKTOP_KEY_FULLNAME" . ((string "\"X-GNOME-FullName\"" 14184 . 14202)))
          ("G_KEY_FILE_ERROR" . ((symbol "g_key_file_error_quark" 1269 . 1291) (semantic-list "()" 1291 . 1293)))
          ("G_KEY_FILE_DESKTOP_KEY_EXEC" . ((string "\"Exec\"" 13515 . 13521)))
          )
)
    (semanticdb-table "glist.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_LIST_H__" variable (:constant-flag t) nil [1083 1095])
            ("glib/gmem.h" include (:system-flag t) nil [1218 1240])
            ("glib/gnode.h" include (:system-flag t) nil [1241 1264])
            ((((0) "GList")) type (:superclasses ("_GList" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1281 1309])
            ("_GList" type
               (:members (((("data" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1329 1343]) ((("next" 1 nil nil nil)) variable (:type ("GList" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1346 1358]) ((("prev" 1 nil nil nil)) variable (:type ("GList" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1361 1373]))
                :type "struct")
                nil [1311 1376])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [1474 1500])
            ("g_list_free1" variable (:constant-flag t) nil [1686 1698])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [1971 1997])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [2115 2141])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [2293 2319])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [2467 2493])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [2676 2702])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [2853 2879])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [2999 3025])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [3143 3169])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [3287 3313])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [3432 3458])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [3577 3603])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [3691 3717])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [3805 3831])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [3986 4012])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [5289 5315])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [5477 5503])
            ("g_list_previous" variable (:constant-flag t) nil [5629 5644])
            ("g_list_next" variable (:constant-flag t) nil [5711 5722]))          
      :file "glist.h"
      :pointmax 5821
      :fsize 5820
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 5782 . 5793) (punctuation 5617 . 5618) (semantic-list 5566 . 5617) (symbol 5535 . 5550) (symbol 5526 . 5534) (symbol 5504 . 5525) (semantic-list 5378 . 5475) (symbol 5347 . 5368) (punctuation 5343 . 5344) (symbol 5338 . 5343) (symbol 5316 . 5337) (semantic-list 5226 . 5288) (symbol 5195 . 5206) (punctuation 5191 . 5192) (symbol 5186 . 5191) (symbol 5164 . 5185) (punctuation 5162 . 5163) (semantic-list 5073 . 5162) (symbol 5042 . 5056) (VOID 5033 . 5037) (symbol 5011 . 5032) (punctuation 5009 . 5010) (semantic-list 4985 . 5009) (symbol 4954 . 4967) (symbol 4945 . 4950) (symbol 4923 . 4944) (punctuation 4921 . 4922) (semantic-list 4897 . 4921) (symbol 4866 . 4878) (punctuation 4862 . 4863) (symbol 4857 . 4862) (symbol 4835 . 4856) (punctuation 4833 . 4834) (semantic-list 4809 . 4833) (symbol 4778 . 4789) (punctuation 4774 . 4775) (symbol 4769 . 4774) (symbol 4747 . 4768) (punctuation 4745 . 4746) (semantic-list 4691 . 4745) (symbol 4660 . 4672) (symbol 4651 . 4655) (symbol 4629 . 4650) (punctuation 4627 . 4628) (semantic-list 4572 . 4627) (symbol 4541 . 4556) (symbol 4532 . 4536) (symbol 4510 . 4531) (punctuation 4508 . 4509) (semantic-list 4424 . 4508) (symbol 4393 . 4411) (punctuation 4389 . 4390) (symbol 4384 . 4389) (symbol 4362 . 4383) (punctuation 4360 . 4361) (semantic-list 4306 . 4360) (symbol 4275 . 4286) (punctuation 4271 . 4272) (symbol 4266 . 4271) (symbol 4244 . 4265) (punctuation 4242 . 4243) (semantic-list 4191 . 4242) (symbol 4160 . 4175) (punctuation 4156 . 4157) (symbol 4151 . 4156) (symbol 4129 . 4150) (punctuation 4127 . 4128) (semantic-list 4076 . 4127) (symbol 4045 . 4055) (punctuation 4041 . 4042) (symbol 4036 . 4041) (symbol 4014 . 4035) (semantic-list 3896 . 3985) (symbol 3865 . 3881) (punctuation 3861 . 3862) (symbol 3856 . 3861) (symbol 3833 . 3855) (semantic-list 3780 . 3804) (symbol 3749 . 3760) (punctuation 3745 . 3746) (symbol 3740 . 3745) (symbol 3718 . 3739) (semantic-list 3666 . 3690) (symbol 3635 . 3649) (punctuation 3631 . 3632) (symbol 3626 . 3631) (symbol 3604 . 3625) (semantic-list 3521 . 3576) (symbol 3490 . 3508) (punctuation 3486 . 3487) (symbol 3481 . 3486) (symbol 3459 . 3480) (semantic-list 3376 . 3431) (symbol 3345 . 3363) (punctuation 3341 . 3342) (symbol 3336 . 3341) (symbol 3314 . 3335) (semantic-list 3232 . 3286) (symbol 3201 . 3218) (punctuation 3197 . 3198) (symbol 3192 . 3197) (symbol 3170 . 3191) (semantic-list 3088 . 3142) (symbol 3057 . 3070) (punctuation 3053 . 3054) (symbol 3048 . 3053) (symbol 3026 . 3047) (semantic-list 2942 . 2998) (symbol 2911 . 2924) (punctuation 2907 . 2908) (symbol 2902 . 2907) (symbol 2880 . 2901) (semantic-list 2765 . 2852) (symbol 2734 . 2754) (punctuation 2730 . 2731) (symbol 2725 . 2730) (symbol 2703 . 2724) (semantic-list 2556 . 2675) (symbol 2525 . 2555) (punctuation 2521 . 2522) (symbol 2516 . 2521) (symbol 2494 . 2515) (semantic-list 2382 . 2466) (symbol 2351 . 2371) (punctuation 2347 . 2348) (symbol 2342 . 2347) (symbol 2320 . 2341) (semantic-list 2204 . 2292) (symbol 2173 . 2186) (punctuation 2169 . 2170) (symbol 2164 . 2169) (symbol 2142 . 2163) (semantic-list 2060 . 2114) (symbol 2029 . 2043) (punctuation 2025 . 2026) (symbol 2020 . 2025) (symbol 1998 . 2019) (semantic-list 1916 . 1970) (symbol 1885 . 1898) (punctuation 1881 . 1882) (symbol 1876 . 1881) (symbol 1854 . 1875) (punctuation 1852 . 1853) (semantic-list 1793 . 1852) (symbol 1762 . 1778) (VOID 1753 . 1757) (symbol 1731 . 1752) (punctuation 1675 . 1676) (semantic-list 1651 . 1675) (symbol 1620 . 1633) (VOID 1611 . 1615) (symbol 1589 . 1610) (punctuation 1587 . 1588) (semantic-list 1563 . 1587) (symbol 1532 . 1543) (VOID 1523 . 1527) (symbol 1501 . 1522) (semantic-list 1467 . 1473) (symbol 1436 . 1448) (punctuation 1432 . 1433) (symbol 1427 . 1432) (symbol 1405 . 1426) (symbol 1266 . 1279) (string 1168 . 1209) (symbol 1162 . 1167) (punctuation 1161 . 1162))
      :lexical-table 
        '(("g_list_previous" (spp-arg-list ("list") 5644 . 5650) . ((semantic-list "((list) ? (((GList *)(list))->prev) : NULL)" 5659 . 5702)))
          ("g_list_next" (spp-arg-list ("list") 5722 . 5728) . ((semantic-list "((list) ? (((GList *)(list))->next) : NULL)" 5737 . 5780)))
          ("__G_LIST_H__")
          ("g_list_free1" . ((symbol "g_list_free_1" 1717 . 1730)))
          )
)
    (semanticdb-table "gmacros.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_MACROS_H__" variable (:constant-flag t) nil [1205 1219])
            ("stddef.h" include (:system-flag t) nil [1408 1427])
            ("G_GNUC_CHECK_VERSION" variable (:constant-flag t) nil [1437 1457])
            ("G_GNUC_EXTENSION" variable (:constant-flag t) nil [1926 1942])
            ("G_CAN_INLINE" variable (:constant-flag t) nil [2408 2420])
            ("G_INLINE_DEFINE_NEEDED" variable (:constant-flag t) nil [2600 2622])
            ("inline" variable (:constant-flag t) nil [2693 2699])
            ("G_INLINE_FUNC" variable (:constant-flag t) nil [2983 2996])
            ("G_GNUC_PURE" variable (:constant-flag t) nil [3279 3290])
            ("G_GNUC_MALLOC" variable (:constant-flag t) nil [3299 3312])
            ("G_GNUC_NULL_TERMINATED" variable (:constant-flag t) nil [3418 3440])
            ("__has_attribute" variable (:constant-flag t) nil [3563 3578])
            ("__has_feature" variable (:constant-flag t) nil [3622 3635])
            ("__has_builtin" variable (:constant-flag t) nil [3679 3692])
            ("G_GNUC_ALLOC_SIZE" variable (:constant-flag t) nil [4014 4031])
            ("G_GNUC_ALLOC_SIZE2" variable (:constant-flag t) nil [4043 4061])
            ("G_GNUC_PRINTF" variable (:constant-flag t) nil [4810 4823])
            ("G_GNUC_SCANF" variable (:constant-flag t) nil [4855 4867])
            ("G_GNUC_FORMAT" variable (:constant-flag t) nil [4899 4912])
            ("G_GNUC_NORETURN" variable (:constant-flag t) nil [4932 4947])
            ("G_GNUC_CONST" variable (:constant-flag t) nil [4956 4968])
            ("G_GNUC_UNUSED" variable (:constant-flag t) nil [4977 4990])
            ("G_GNUC_NO_INSTRUMENT" variable (:constant-flag t) nil [4999 5019])
            ("G_GNUC_DEPRECATED" variable (:constant-flag t) nil [5179 5196])
            ("G_GNUC_DEPRECATED_FOR" variable (:constant-flag t) nil [5406 5427])
            ("G_GNUC_BEGIN_IGNORE_DEPRECATIONS" variable (:constant-flag t) nil [6259 6291])
            ("G_GNUC_END_IGNORE_DEPRECATIONS" variable (:constant-flag t) nil [6300 6330])
            ("G_GNUC_MAY_ALIAS" variable (:constant-flag t) nil [6468 6484])
            ("G_GNUC_WARN_UNUSED_RESULT" variable (:constant-flag t) nil [6639 6664])
            ("G_GNUC_FUNCTION" variable (:constant-flag t) nil [7061 7076])
            ("G_GNUC_PRETTY_FUNCTION" variable (:constant-flag t) nil [7096 7118])
            ("G_ANALYZER_ANALYZING" variable (:constant-flag t) nil [7370 7390])
            ("G_ANALYZER_NORETURN" variable (:constant-flag t) nil [7401 7420])
            ("G_STRINGIFY" variable (:constant-flag t) nil [7437 7448])
            ("G_STRINGIFY_ARG" variable (:constant-flag t) nil [7508 7523])
            ("G_PASTE_ARGS" variable (:constant-flag t) nil [7647 7659])
            ("G_PASTE" variable (:constant-flag t) nil [7720 7727])
            ("G_STATIC_ASSERT" variable (:constant-flag t) nil [7964 7979])
            ("G_STATIC_ASSERT_EXPR" variable (:constant-flag t) nil [8101 8121])
            ("G_STRLOC" variable (:constant-flag t) nil [8398 8406])
            ("G_STRFUNC" variable (:constant-flag t) nil [8884 8893])
            ("G_BEGIN_DECLS" variable (:constant-flag t) nil [9086 9099])
            ("G_END_DECLS" variable (:constant-flag t) nil [9108 9119])
            ("NULL" variable (:constant-flag t) nil [9452 9456])
            ("FALSE" variable (:constant-flag t) nil [9534 9539])
            ("TRUE" variable (:constant-flag t) nil [9573 9577])
            ("MAX" variable (:constant-flag t) nil [9614 9617])
            ("MIN" variable (:constant-flag t) nil [9671 9674])
            ("ABS" variable (:constant-flag t) nil [9728 9731])
            ("CLAMP" variable (:constant-flag t) nil [9785 9790])
            ("G_N_ELEMENTS" variable (:constant-flag t) nil [10038 10050])
            ("GPOINTER_TO_SIZE" variable (:constant-flag t) nil [10162 10178])
            ("GSIZE_TO_POINTER" variable (:constant-flag t) nil [10204 10220])
            ("G_STRUCT_OFFSET" variable (:constant-flag t) nil [10489 10504])
            ("G_STRUCT_MEMBER_P" variable (:constant-flag t) nil [10600 10617])
            ("G_STRUCT_MEMBER" variable (:constant-flag t) nil [10721 10736])
            ("G_STMT_START" variable (:constant-flag t) nil [11430 11442])
            ("G_STMT_END" variable (:constant-flag t) nil [11637 11647])
            ("G_CONST_RETURN" variable (:constant-flag t) nil [11805 11819])
            ("G_LIKELY" variable (:constant-flag t) nil [12791 12799])
            ("G_UNLIKELY" variable (:constant-flag t) nil [12821 12831])
            ("G_DEPRECATED" variable (:constant-flag t) nil [13072 13084])
            ("G_DEPRECATED_FOR" variable (:constant-flag t) nil [13403 13419])
            ("G_UNAVAILABLE" variable (:constant-flag t) nil [13774 13787])
            ("_GLIB_EXTERN" variable (:constant-flag t) nil [13847 13859])
            ("GLIB_DEPRECATED" variable (:constant-flag t) nil [14306 14321])
            ("GLIB_DEPRECATED_FOR" variable (:constant-flag t) nil [14356 14375])
            ("GLIB_UNAVAILABLE" variable (:constant-flag t) nil [14420 14436])
            ("_GLIB_DEFINE_AUTOPTR_CHAINUP" variable (:constant-flag t) nil [16632 16660])
            ("G_DEFINE_AUTOPTR_CLEANUP_FUNC" variable (:constant-flag t) nil [16732 16761])
            ("G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC" variable (:constant-flag t) nil [16786 16818])
            ("G_DEFINE_AUTO_CLEANUP_FREE_FUNC" variable (:constant-flag t) nil [16843 16874]))          
      :file "gmacros.h"
      :pointmax 16987
      :fsize 16986
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((string 1292 . 1333) (symbol 1286 . 1291) (punctuation 1285 . 1286))
      :lexical-table 
        '(("G_GNUC_FORMAT" (spp-arg-list ("arg_idx") 4912 . 4923))
          ("G_ANALYZER_NORETURN")
          ("G_GNUC_CHECK_VERSION" (spp-arg-list ("major" "minor") 1457 . 1471) . ((semantic-list "(defined(__GNUC__) && \\
     ((__GNUC__ > (major)) || \\
      ((__GNUC__ == (major)) && \\
       (__GNUC_MINOR__ >= (minor)))))" 1478 . 1605)))
          ("G_GNUC_EXTENSION")
          ("G_GNUC_NORETURN")
          ("G_GNUC_NO_INSTRUMENT")
          ("G_PASTE_ARGS" (spp-arg-list ("identifier1" "identifier2") 7659 . 7684) . ((spp-symbol-merge ((symbol "identifier1" 7685 . 7696) (symbol "identifier2" 7700 . 7711)) 7685 . 7711)))
          ("G_STATIC_ASSERT" (spp-arg-list ("expr") 7979 . 7985) . 
              ((TYPEDEF "typedef" 7986 . 7993) (CHAR "char" 7994 . 7998) (symbol "G_PASTE" 7999 . 8006) (semantic-list "(_GStaticAssertCompileTimeAssertion_, __LINE__)" 8007 . 8054) (semantic-list "[(expr) ? 1 : -1]" 8054 . 8071) (symbol "G_GNUC_UNUSED" 8072 . 8085)))
          ("MAX" (spp-arg-list ("a" "b") 9617 . 9623) . ((semantic-list "(((a) > (b)) ? (a) : (b))" 9625 . 9650)))
          ("G_LIKELY" (spp-arg-list ("expr") 12799 . 12805) . ((semantic-list "(expr)" 12806 . 12812)))
          ("__has_builtin" (spp-arg-list ("x") 3692 . 3695) . ((number "0" 3696 . 3697)))
          ("G_GNUC_DEPRECATED")
          ("TRUE" . ((semantic-list "(!FALSE)" 9578 . 9586)))
          ("MIN" (spp-arg-list ("a" "b") 9674 . 9680) . ((semantic-list "(((a) < (b)) ? (a) : (b))" 9682 . 9707)))
          ("G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC" (spp-arg-list ("TypeName" "func") 16818 . 16834))
          ("G_DEFINE_AUTO_CLEANUP_FREE_FUNC" (spp-arg-list ("TypeName" "func" "none") 16874 . 16896))
          ("__G_MACROS_H__")
          ("inline" . ((symbol "__inline" 2700 . 2708)))
          ("__has_feature" (spp-arg-list ("x") 3635 . 3638) . ((number "0" 3639 . 3640)))
          ("G_GNUC_CONST")
          ("G_GNUC_UNUSED")
          ("NULL" . ((semantic-list "((void*) 0)" 9464 . 9475)))
          ("FALSE" . ((semantic-list "(0)" 9540 . 9543)))
          ("CLAMP" (spp-arg-list ("x" "low" "high") 9790 . 9804) . ((semantic-list "(((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))" 9806 . 9863)))
          ("G_N_ELEMENTS" (spp-arg-list ("arr") 10050 . 10055) . ((semantic-list "(sizeof (arr) / sizeof ((arr)[0]))" 10057 . 10091)))
          ("G_STRUCT_OFFSET" (spp-arg-list ("struct_type" "member") 10504 . 10525) . ((semantic-list "((glong) ((guint8*) &((struct_type*) 0)->member))" 10534 . 10583)))
          ("G_STRUCT_MEMBER" (spp-arg-list ("member_type" "struct_p" "struct_offset") 10736 . 10774) . ((semantic-list "(*(member_type*) G_STRUCT_MEMBER_P ((struct_p), (struct_offset)))" 10783 . 10848)))
          ("G_UNLIKELY" (spp-arg-list ("expr") 12831 . 12837) . ((semantic-list "(expr)" 12838 . 12844)))
          ("GLIB_DEPRECATED" . ((symbol "G_DEPRECATED" 14322 . 14334) (symbol "_GLIB_EXTERN" 14335 . 14347)))
          ("GLIB_UNAVAILABLE" (spp-arg-list ("maj" "min") 14436 . 14445) . 
              ((symbol "G_UNAVAILABLE" 14446 . 14459) (semantic-list "(maj,min)" 14459 . 14468) (symbol "_GLIB_EXTERN" 14469 . 14481)))
          ("G_GNUC_END_IGNORE_DEPRECATIONS")
          ("G_GNUC_MAY_ALIAS")
          ("G_STATIC_ASSERT_EXPR" (spp-arg-list ("expr") 8121 . 8127) . ((semantic-list "((void) sizeof (char[(expr) ? 1 : -1]))" 8128 . 8167)))
          ("G_STRUCT_MEMBER_P" (spp-arg-list ("struct_p" "struct_offset") 10617 . 10642) . ((semantic-list "((gpointer) ((guint8*) (struct_p) + (glong) (struct_offset)))" 10651 . 10712)))
          ("G_UNAVAILABLE" (spp-arg-list ("maj" "min") 13787 . 13796) . ((symbol "G_DEPRECATED" 13797 . 13809)))
          ("_GLIB_EXTERN" . ((EXTERN "extern" 13860 . 13866)))
          ("G_GNUC_MALLOC")
          ("G_GNUC_ALLOC_SIZE" (spp-arg-list ("x") 4031 . 4034))
          ("G_STRINGIFY" (spp-arg-list ("macro_or_string") 7448 . 7465) . ((symbol "G_STRINGIFY_ARG" 7466 . 7481) (semantic-list "(macro_or_string)" 7482 . 7499)))
          ("G_CONST_RETURN" . ((CONST "const" 11820 . 11825)))
          ("G_DEPRECATED")
          ("G_GNUC_FUNCTION" . ((string "\"\"" 7085 . 7087)))
          ("_GLIB_DEFINE_AUTOPTR_CHAINUP" (spp-arg-list ("ModuleObjName" "ParentName") 16660 . 16687))
          ("G_GNUC_ALLOC_SIZE2" (spp-arg-list ("x" "y") 4061 . 4066))
          ("GPOINTER_TO_SIZE" (spp-arg-list ("p") 10178 . 10181) . ((semantic-list "((gsize) (p))" 10182 . 10195)))
          ("G_INLINE_FUNC" . ((STATIC "static" 2997 . 3003) (INLINE "inline" 3004 . 3010)))
          ("G_GNUC_NULL_TERMINATED")
          ("ABS" (spp-arg-list ("a") 9731 . 9734) . ((semantic-list "(((a) < 0) ? -(a) : (a))" 9738 . 9762)))
          ("G_STMT_START" . ((DO "do" 11444 . 11446)))
          ("G_GNUC_BEGIN_IGNORE_DEPRECATIONS")
          ("G_CAN_INLINE")
          ("__has_attribute" (spp-arg-list ("x") 3578 . 3581) . ((number "0" 3582 . 3583)))
          ("G_GNUC_SCANF" (spp-arg-list ("format_idx" "arg_idx") 4867 . 4890))
          ("G_ANALYZER_ANALYZING" . ((number "0" 7391 . 7392)))
          ("G_END_DECLS")
          ("GLIB_DEPRECATED_FOR" (spp-arg-list ("f") 14375 . 14378) . 
              ((symbol "G_DEPRECATED_FOR" 14379 . 14395) (semantic-list "(f)" 14395 . 14398) (symbol "_GLIB_EXTERN" 14399 . 14411)))
          ("G_DEFINE_AUTOPTR_CLEANUP_FUNC" (spp-arg-list ("TypeName" "func") 16761 . 16777))
          ("G_GNUC_WARN_UNUSED_RESULT")
          ("G_GNUC_PRETTY_FUNCTION" . ((string "\"\"" 7120 . 7122)))
          ("G_STRINGIFY_ARG" (spp-arg-list ("contents") 7523 . 7533) . ((punctuation "#" 7534 . 7535) (symbol "contents" 7535 . 7543)))
          ("G_PASTE" (spp-arg-list ("identifier1" "identifier2") 7727 . 7752) . ((symbol "G_PASTE_ARGS" 7758 . 7770) (semantic-list "(identifier1, identifier2)" 7771 . 7797)))
          ("G_STRLOC" . 
              ((symbol "__FILE__" 8407 . 8415) (string "\":\"" 8416 . 8419) (symbol "G_STRINGIFY" 8420 . 8431) (semantic-list "(__LINE__)" 8432 . 8442)))
          ("G_BEGIN_DECLS")
          ("G_STMT_END" . ((WHILE "while" 11651 . 11656) (semantic-list "(0)" 11657 . 11660)))
          ("G_DEPRECATED_FOR" (spp-arg-list ("f") 13419 . 13422) . ((symbol "G_DEPRECATED" 13423 . 13435)))
          ("G_GNUC_PURE")
          ("G_GNUC_PRINTF" (spp-arg-list ("format_idx" "arg_idx") 4823 . 4846))
          ("G_GNUC_DEPRECATED_FOR" (spp-arg-list ("f") 5427 . 5430) . ((symbol "G_GNUC_DEPRECATED" 5438 . 5455)))
          ("G_STRFUNC" . ((semantic-list "((const char*) (\"???\"))" 8898 . 8921)))
          ("GSIZE_TO_POINTER" (spp-arg-list ("s") 10220 . 10223) . ((semantic-list "((gpointer) (gsize) (s))" 10224 . 10248)))
          )
)
    (semanticdb-table "gmain.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_MAIN_H__" variable (:constant-flag t) nil [780 792])
            ("glib/gpoll.h" include (:system-flag t) nil [915 938])
            ("glib/gslist.h" include (:system-flag t) nil [939 963])
            ("glib/gthread.h" include (:system-flag t) nil [964 989])
            ((((0) "GIOCondition")) type (:superclasses ("" type (:members (("G_IO_IN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1037 1063]) ("GLIB_SYSDEF_POLLIN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1045 1064]) ("G_IO_OUT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1067 1095]) ("GLIB_SYSDEF_POLLOUT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1076 1096]) ("G_IO_PRI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1099 1127]) ("GLIB_SYSDEF_POLLPRI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1108 1128]) ("G_IO_ERR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1131 1159]) ("GLIB_SYSDEF_POLLERR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1140 1160]) ("G_IO_HUP" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1163 1191]) ("GLIB_SYSDEF_POLLHUP" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1172 1192]) ("G_IO_NVAL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1195 1225]) ("GLIB_SYSDEF_POLLNVAL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1205 1227])) :type "enum") nil nil) :type "typedef") nil [1006 1241])
            ((((0) "GMainContext")) type (:superclasses ("_GMainContext" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1387 1440])
            ((((0) "GMainLoop")) type (:superclasses ("_GMainLoop" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1583 1633])
            ((((0) "GSource")) type (:superclasses ("_GSource" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1738 1786])
            ((((0) "GSourcePrivate")) type (:superclasses ("_GSourcePrivate" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1787 1842])
            ((((0) "GSourceCallbackFuncs")) type (:superclasses ("_GSourceCallbackFuncs" type (:prototype t :type "struct") nil nil) :type "typedef") nil [2193 2254])
            ((((0) "GSourceFuncs")) type (:superclasses ("_GSourceFuncs" type (:prototype t :type "struct") nil nil) :type "typedef") nil [5289 5342])
            ("_GSource" type
               (:members (((("callback_data" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6730 6753]) ((("callback_funcs" 1 nil nil nil)) variable (:type ("GSourceCallbackFuncs" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6756 6793]) ((("source_funcs" 1 nil nil nil)) variable (:constant-flag t :type ("GSourceFuncs" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6797 6830]) ((("ref_count" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6833 6849]) ((("context" 1 nil nil nil)) variable (:type ("GMainContext" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6853 6875]) ((("priority" 0 nil nil nil)) variable (:type ("gint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6879 6893]) ((("flags" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6896 6908]) ((("source_id" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6911 6927]) ((("poll_fds" 1 nil nil nil)) variable (:type ("GSList" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6931 6948]) ((("prev" 1 nil nil nil)) variable (:type ("GSource" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6954 6968]) ((("next" 1 nil nil nil)) variable (:type ("GSource" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6971 6985]) ((("name" 1 nil nil nil)) variable (:type "char") (reparse-symbol classsubparts) [6989 7003]) ((("priv" 1 nil nil nil)) variable (:type ("GSourcePrivate" type (:type "class") nil nil)) (reparse-symbol classsubparts) [7007 7028]))
                :type "struct")
                nil [6692 7031])
            ("_GSourceCallbackFuncs" type (:type "struct") nil [7033 7297])
            ("_GSourceFuncs" type
               (:members (((("closure_callback" 0 nil nil nil)) variable (:type ("GSourceFunc" type (:type "class") nil nil)) (reparse-symbol classsubparts) [7905 7938]) ((("closure_marshal" 0 nil nil nil)) variable (:type ("GSourceDummyMarshal" type (:type "class") nil nil)) (reparse-symbol classsubparts) [7949 7985]))
                :type "struct")
                nil [7484 8028])
            ("G_PRIORITY_HIGH" variable (:constant-flag t) nil [8183 8198])
            ("G_PRIORITY_DEFAULT" variable (:constant-flag t) nil [8459 8477])
            ("G_PRIORITY_HIGH_IDLE" variable (:constant-flag t) nil [8859 8879])
            ("G_PRIORITY_DEFAULT_IDLE" variable (:constant-flag t) nil [9073 9096])
            ("G_PRIORITY_LOW" variable (:constant-flag t) nil [9238 9252])
            ("G_SOURCE_REMOVE" variable (:constant-flag t) nil [9430 9445])
            ("G_SOURCE_CONTINUE" variable (:constant-flag t) nil [9619 9636])
            ((("g_timeout_funcs" 0 nil nil nil)) variable (:type ("GSourceFuncs" type (:type "class") nil nil)) nil [22089 22118])
            ((("g_child_watch_funcs" 0 nil nil nil)) variable (:type ("GSourceFuncs" type (:type "class") nil nil)) nil [22128 22161])
            ((("g_idle_funcs" 0 nil nil nil)) variable (:type ("GSourceFuncs" type (:type "class") nil nil)) nil [22171 22197]))          
      :file "gmain.h"
      :pointmax 22351
      :fsize 22350
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 22312 . 22323) (symbol 22162 . 22170) (symbol 22119 . 22127) (symbol 22080 . 22088) (punctuation 22018 . 22019) (semantic-list 21871 . 22018) (symbol 21844 . 21865) (VOID 21835 . 21839) (symbol 21813 . 21834) (punctuation 21811 . 21812) (semantic-list 21540 . 21811) (symbol 21513 . 21539) (VOID 21504 . 21508) (symbol 21482 . 21503) (punctuation 21479 . 21480) (semantic-list 21457 . 21479) (symbol 21430 . 21451) (symbol 21421 . 21429) (symbol 21399 . 21420) (punctuation 21397 . 21398) (semantic-list 21188 . 21397) (symbol 21161 . 21176) (symbol 21152 . 21157) (symbol 21130 . 21151) (punctuation 21128 . 21129) (semantic-list 21043 . 21128) (symbol 21016 . 21026) (symbol 21007 . 21012) (symbol 20985 . 21006) (punctuation 20983 . 20984) (semantic-list 20840 . 20983) (symbol 20813 . 20830) (symbol 20804 . 20809) (symbol 20782 . 20803) (punctuation 20780 . 20781) (semantic-list 20513 . 20780) (symbol 20486 . 20508) (symbol 20477 . 20482) (symbol 20455 . 20476) (punctuation 20453 . 20454) (semantic-list 20305 . 20453) (symbol 20278 . 20299) (symbol 20269 . 20274) (symbol 20247 . 20268) (punctuation 20245 . 20246) (semantic-list 19973 . 20245) (symbol 19946 . 19972) (symbol 19937 . 19942) (symbol 19915 . 19936) (punctuation 19913 . 19914) (semantic-list 19765 . 19913) (symbol 19738 . 19751) (symbol 19729 . 19734) (symbol 19707 . 19728) (punctuation 19705 . 19706) (semantic-list 19433 . 19705) (symbol 19406 . 19424) (symbol 19397 . 19402) (symbol 19375 . 19396) (punctuation 19331 . 19332) (semantic-list 19237 . 19331) (symbol 19201 . 19235) (symbol 19192 . 19200) (symbol 19170 . 19191) (punctuation 19168 . 19169) (semantic-list 19142 . 19168) (symbol 19106 . 19134) (symbol 19097 . 19105) (symbol 19075 . 19096) (punctuation 19073 . 19074) (semantic-list 19053 . 19073) (symbol 19017 . 19032) (symbol 19008 . 19016) (symbol 18986 . 19007) (punctuation 18950 . 18951) (semantic-list 18944 . 18950) (symbol 18909 . 18924) (symbol 18902 . 18908) (symbol 18880 . 18901) (punctuation 18878 . 18879) (semantic-list 18872 . 18878) (symbol 18837 . 18857) (symbol 18830 . 18836) (symbol 18808 . 18829) (punctuation 18806 . 18807) (semantic-list 18782 . 18806) (symbol 18747 . 18765) (VOID 18740 . 18744) (symbol 18718 . 18739) (punctuation 18684 . 18685) (semantic-list 18668 . 18684) (symbol 18639 . 18667) (punctuation 18638 . 18639) (symbol 18630 . 18637) (symbol 18608 . 18629) (punctuation 18606 . 18607) (semantic-list 18590 . 18606) (symbol 18565 . 18585) (punctuation 18564 . 18565) (symbol 18556 . 18563) (symbol 18534 . 18555) (punctuation 18532 . 18533) (semantic-list 18522 . 18532) (symbol 18497 . 18521) (punctuation 18496 . 18497) (symbol 18488 . 18495) (symbol 18466 . 18487) (punctuation 18464 . 18465) (semantic-list 18458 . 18464) (symbol 18433 . 18450) (punctuation 18432 . 18433) (symbol 18424 . 18431) (symbol 18402 . 18423) (punctuation 18246 . 18247) (semantic-list 18222 . 18246) (symbol 18196 . 18213) (symbol 18187 . 18193) (symbol 18165 . 18186) (punctuation 18162 . 18163) (semantic-list 18077 . 18162) (symbol 18051 . 18076) (VOID 18042 . 18046) (semantic-list 18022 . 18041) (symbol 17995 . 18022) (punctuation 17992 . 17993) (semantic-list 17927 . 17992) (symbol 17898 . 17926) (VOID 17889 . 17893) (symbol 17867 . 17888) (punctuation 17865 . 17866) (semantic-list 17800 . 17865) (symbol 17771 . 17796) (VOID 17762 . 17766) (symbol 17740 . 17761) (punctuation 17737 . 17738) (semantic-list 17682 . 17737) (symbol 17653 . 17673) (VOID 17644 . 17648) (symbol 17622 . 17643) (punctuation 17620 . 17621) (semantic-list 17565 . 17620) (symbol 17536 . 17553) (VOID 17527 . 17531) (symbol 17505 . 17526) (punctuation 17502 . 17503) (semantic-list 17323 . 17502) (symbol 17292 . 17322) (VOID 17287 . 17291) (symbol 17265 . 17286) (punctuation 16387 . 16388) (semantic-list 16363 . 16387) (symbol 16339 . 16362) (symbol 16318 . 16324) (symbol 16295 . 16317) (punctuation 16293 . 16294) (semantic-list 16195 . 16293) (symbol 16171 . 16194) (VOID 16150 . 16154) (symbol 16127 . 16149) (punctuation 16124 . 16125) (semantic-list 16035 . 16124) (symbol 16011 . 16034) (VOID 15990 . 15994) (symbol 15968 . 15989) (punctuation 15966 . 15967) (semantic-list 15942 . 15966) (symbol 15918 . 15935) (punctuation 15908 . 15909) (CHAR 15903 . 15907) (CONST 15897 . 15902) (symbol 15875 . 15896) (punctuation 15873 . 15874) (semantic-list 15781 . 15873) (symbol 15757 . 15774) (VOID 15736 . 15740) (symbol 15714 . 15735) (punctuation 15711 . 15712) (semantic-list 15687 . 15711) (symbol 15662 . 15683) (symbol 15653 . 15661) (symbol 15631 . 15652) (punctuation 15629 . 15630) (semantic-list 15547 . 15629) (symbol 15522 . 15540) (VOID 15513 . 15517) (symbol 15491 . 15512) (punctuation 15488 . 15489) (semantic-list 15291 . 15488) (symbol 15266 . 15287) (VOID 15257 . 15261) (symbol 15235 . 15256) (punctuation 15232 . 15233) (semantic-list 15209 . 15232) (symbol 15188 . 15208) (punctuation 15187 . 15188) (symbol 15174 . 15186) (symbol 15152 . 15173) (punctuation 15149 . 15150) (semantic-list 15125 . 15149) (symbol 15100 . 15115) (symbol 15091 . 15096) (symbol 15069 . 15090) (punctuation 15067 . 15068) (semantic-list 15043 . 15067) (symbol 15018 . 15042) (symbol 15009 . 15017) (symbol 14987 . 15008) (punctuation 14985 . 14986) (semantic-list 14897 . 14985) (symbol 14872 . 14896) (VOID 14863 . 14867) (symbol 14841 . 14862) (punctuation 14839 . 14840) (semantic-list 14815 . 14839) (symbol 14790 . 14811) (symbol 14781 . 14785) (symbol 14759 . 14780) (punctuation 14757 . 14758) (semantic-list 14672 . 14757) (symbol 14647 . 14668) (VOID 14638 . 14642) (symbol 14616 . 14637) (punctuation 14613 . 14614) (semantic-list 14589 . 14613) (symbol 14564 . 14580) (VOID 14555 . 14559) (symbol 14533 . 14554) (punctuation 14531 . 14532) (semantic-list 14447 . 14531) (symbol 14422 . 14437) (symbol 14413 . 14418) (symbol 14391 . 14412) (punctuation 14388 . 14389) (semantic-list 14364 . 14388) (symbol 14339 . 14353) (VOID 14330 . 14334) (symbol 14308 . 14329) (punctuation 14306 . 14307) (semantic-list 14282 . 14306) (symbol 14257 . 14269) (punctuation 14256 . 14257) (symbol 14248 . 14255) (symbol 14226 . 14247) (punctuation 14224 . 14225) (semantic-list 14130 . 14224) (symbol 14105 . 14117) (punctuation 14104 . 14105) (symbol 14096 . 14103) (symbol 14074 . 14095) (punctuation 14055 . 14056) (semantic-list 14035 . 14055) (symbol 14011 . 14034) (punctuation 14010 . 14011) (symbol 13997 . 14009) (symbol 13975 . 13996) (punctuation 13973 . 13974) (semantic-list 13953 . 13973) (symbol 13930 . 13952) (symbol 13919 . 13927) (symbol 13897 . 13918) (punctuation 13895 . 13896) (semantic-list 13875 . 13895) (symbol 13852 . 13869) (VOID 13841 . 13845) (symbol 13819 . 13840) (punctuation 13817 . 13818) (semantic-list 13797 . 13817) (symbol 13774 . 13789) (punctuation 13773 . 13774) (symbol 13763 . 13772) (symbol 13741 . 13762) (punctuation 13739 . 13740) (semantic-list 13719 . 13739) (symbol 13696 . 13712) (VOID 13685 . 13689) (symbol 13663 . 13684) (punctuation 13661 . 13662) (semantic-list 13641 . 13661) (symbol 13618 . 13633) (VOID 13607 . 13611) (symbol 13585 . 13606) (punctuation 13583 . 13584) (semantic-list 13499 . 13583) (symbol 13476 . 13491) (punctuation 13475 . 13476) (symbol 13465 . 13474) (symbol 13443 . 13464) (punctuation 13422 . 13423) (semantic-list 13416 . 13422) (symbol 13381 . 13414) (punctuation 13380 . 13381) (symbol 13367 . 13379) (symbol 13345 . 13366) (punctuation 13343 . 13344) (semantic-list 13337 . 13343) (symbol 13302 . 13335) (punctuation 13301 . 13302) (symbol 13288 . 13300) (symbol 13266 . 13287) (punctuation 13264 . 13265) (semantic-list 13241 . 13264) (symbol 13206 . 13239) (VOID 13192 . 13196) (symbol 13170 . 13191) (punctuation 13168 . 13169) (semantic-list 13145 . 13168) (symbol 13110 . 13144) (VOID 13096 . 13100) (symbol 13074 . 13095) (punctuation 13032 . 13033) (semantic-list 13026 . 13032) (symbol 12999 . 13020) (punctuation 12998 . 12999) (symbol 12990 . 12997) (symbol 12968 . 12989) (punctuation 12966 . 12967) (semantic-list 12960 . 12966) (symbol 12933 . 12945) (symbol 12924 . 12928) (symbol 12902 . 12923) (punctuation 12899 . 12900) (semantic-list 12821 . 12899) (symbol 12794 . 12820) (VOID 12785 . 12789) (symbol 12763 . 12784) (punctuation 12761 . 12762) (semantic-list 12622 . 12761) (symbol 12595 . 12618) (VOID 12586 . 12590) (symbol 12564 . 12585) (punctuation 12500 . 12501) (semantic-list 12477 . 12500) (symbol 12448 . 12476) (symbol 12438 . 12447) (symbol 12416 . 12437) (punctuation 12414 . 12415) (semantic-list 12332 . 12414) (symbol 12303 . 12331) (VOID 12294 . 12298) (symbol 12272 . 12293) (punctuation 12269 . 12270) (semantic-list 12246 . 12269) (symbol 12222 . 12245) (VOID 12213 . 12217) (symbol 12191 . 12212) (punctuation 12189 . 12190) (semantic-list 11996 . 12189) (symbol 11972 . 11992) (symbol 11963 . 11967) (symbol 11941 . 11962) (punctuation 11939 . 11940) (semantic-list 11688 . 11939) (symbol 11664 . 11684) (symbol 11655 . 11659) (symbol 11633 . 11654) (punctuation 11631 . 11632) (semantic-list 11550 . 11631) (symbol 11526 . 11548) (symbol 11517 . 11525) (symbol 11495 . 11516) (punctuation 11492 . 11493) (semantic-list 11362 . 11492) (symbol 11339 . 11358) (symbol 11330 . 11338) (symbol 11308 . 11329) (punctuation 11306 . 11307) (semantic-list 11283 . 11306) (symbol 11259 . 11282) (symbol 11250 . 11258) (symbol 11228 . 11249) (punctuation 11226 . 11227) (semantic-list 11203 . 11226) (symbol 11180 . 11202) (VOID 11171 . 11175) (symbol 11149 . 11170) (punctuation 11147 . 11148) (semantic-list 11124 . 11147) (symbol 11101 . 11123) (symbol 11092 . 11100) (symbol 11070 . 11091) (punctuation 11068 . 11069) (semantic-list 11045 . 11068) (symbol 11022 . 11043) (VOID 11013 . 11017) (symbol 10991 . 11012) (punctuation 10925 . 10926) (semantic-list 10734 . 10925) (symbol 10688 . 10733) (punctuation 10687 . 10688) (symbol 10674 . 10681) (symbol 10652 . 10673) (punctuation 10650 . 10651) (semantic-list 10541 . 10650) (symbol 10495 . 10534) (punctuation 10494 . 10495) (symbol 10481 . 10488) (symbol 10459 . 10480) (punctuation 10457 . 10458) (semantic-list 10348 . 10457) (symbol 10302 . 10334) (punctuation 10301 . 10302) (symbol 10288 . 10295) (symbol 10266 . 10287) (punctuation 10216 . 10217) (semantic-list 10193 . 10216) (symbol 10168 . 10190) (symbol 10154 . 10162) (symbol 10132 . 10153) (punctuation 10130 . 10131) (semantic-list 10042 . 10130) (symbol 10017 . 10041) (symbol 10003 . 10011) (symbol 9981 . 10002) (punctuation 9978 . 9979) (semantic-list 9972 . 9978) (symbol 9947 . 9969) (punctuation 9946 . 9947) (symbol 9933 . 9945) (symbol 9911 . 9932) (punctuation 9909 . 9910) (semantic-list 9886 . 9909) (symbol 9861 . 9881) (VOID 9847 . 9851) (symbol 9825 . 9846) (punctuation 9823 . 9824) (semantic-list 9800 . 9823) (symbol 9775 . 9793) (punctuation 9774 . 9775) (symbol 9761 . 9773) (symbol 9739 . 9760) (punctuation 9737 . 9738) (semantic-list 9731 . 9737) (symbol 9706 . 9724) (punctuation 9705 . 9706) (symbol 9692 . 9704) (symbol 9670 . 9691) (punctuation 7824 . 7825) (semantic-list 7804 . 7824) (semantic-list 7792 . 7803) (VOID 7783 . 7787) (punctuation 7779 . 7780) (semantic-list 7666 . 7779) (semantic-list 7654 . 7665) (symbol 7645 . 7653) (punctuation 7641 . 7642) (semantic-list 7621 . 7641) (semantic-list 7609 . 7617) (symbol 7600 . 7608) (punctuation 7596 . 7597) (semantic-list 7530 . 7596) (semantic-list 7518 . 7528) (symbol 7509 . 7517) (punctuation 7481 . 7482) (semantic-list 7475 . 7481) (semantic-list 7452 . 7474) (VOID 7447 . 7451) (TYPEDEF 7439 . 7446) (punctuation 7293 . 7294) (semantic-list 7160 . 7293) (semantic-list 7151 . 7157) (VOID 7146 . 7150) (punctuation 7142 . 7143) (semantic-list 7120 . 7142) (semantic-list 7111 . 7119) (VOID 7106 . 7110) (punctuation 7102 . 7103) (semantic-list 7080 . 7102) (semantic-list 7071 . 7077) (VOID 7066 . 7070) (punctuation 6690 . 6691) (semantic-list 6561 . 6690) (semantic-list 6540 . 6558) (VOID 6531 . 6535) (TYPEDEF 6523 . 6530) (punctuation 6117 . 6118) (semantic-list 6097 . 6117) (semantic-list 6076 . 6090) (symbol 6067 . 6075) (TYPEDEF 6059 . 6066) (symbol 991 . 1004) (string 865 . 906) (symbol 859 . 864) (punctuation 858 . 859))
      :lexical-table 
        '(("G_SOURCE_REMOVE" . ((symbol "FALSE" 9454 . 9459)))
          ("G_PRIORITY_DEFAULT" . ((number "0" 8487 . 8488)))
          ("G_PRIORITY_LOW" . ((number "300" 9266 . 9269)))
          ("G_PRIORITY_HIGH" . ((punctuation "-" 8210 . 8211) (number "100" 8211 . 8214)))
          ("G_PRIORITY_DEFAULT_IDLE" . ((number "200" 9101 . 9104)))
          ("__G_MAIN_H__")
          ("G_PRIORITY_HIGH_IDLE" . ((number "100" 8887 . 8890)))
          ("G_SOURCE_CONTINUE" . ((symbol "TRUE" 9643 . 9647)))
          )
)
    (semanticdb-table "gmappedfile.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_MAPPED_FILE_H__" variable (:constant-flag t) nil [865 884])
            ("glib/gbytes.h" include (:system-flag t) nil [1007 1031])
            ("glib/gerror.h" include (:system-flag t) nil [1032 1056])
            ((((0) "GMappedFile")) type (:superclasses ("_GMappedFile" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1073 1113])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [1273 1287])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [1426 1440]))          
      :file "gmappedfile.h"
      :pointmax 2013
      :fsize 2012
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 1967 . 1978) (punctuation 1964 . 1965) (semantic-list 1944 . 1964) (symbol 1917 . 1935) (VOID 1904 . 1908) (semantic-list 1882 . 1903) (symbol 1863 . 1882) (punctuation 1860 . 1861) (semantic-list 1840 . 1860) (symbol 1813 . 1832) (VOID 1800 . 1804) (symbol 1778 . 1799) (punctuation 1776 . 1777) (semantic-list 1756 . 1776) (symbol 1729 . 1746) (punctuation 1728 . 1729) (symbol 1716 . 1727) (symbol 1694 . 1715) (punctuation 1692 . 1693) (semantic-list 1672 . 1692) (symbol 1645 . 1668) (punctuation 1639 . 1640) (symbol 1632 . 1638) (symbol 1609 . 1631) (punctuation 1607 . 1608) (semantic-list 1587 . 1607) (symbol 1560 . 1586) (punctuation 1559 . 1560) (symbol 1547 . 1552) (symbol 1525 . 1546) (punctuation 1523 . 1524) (semantic-list 1503 . 1523) (symbol 1476 . 1500) (symbol 1463 . 1468) (symbol 1441 . 1462) (semantic-list 1350 . 1425) (symbol 1323 . 1348) (punctuation 1322 . 1323) (symbol 1310 . 1321) (symbol 1288 . 1309) (semantic-list 1177 . 1272) (symbol 1150 . 1167) (punctuation 1149 . 1150) (symbol 1137 . 1148) (symbol 1115 . 1136) (symbol 1058 . 1071) (string 957 . 998) (symbol 951 . 956) (punctuation 950 . 951))
      :lexical-table 
        '(("__G_MAPPED_FILE_H__")
          )
)
    (semanticdb-table "gmarkup.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_MARKUP_H__" variable (:constant-flag t) nil [800 814])
            ("stdarg.h" include (:system-flag t) nil [937 956])
            ("glib/gerror.h" include (:system-flag t) nil [958 982])
            ("glib/gslist.h" include (:system-flag t) nil [983 1007])
            ((((0) "GMarkupError")) type (:superclasses ("" type (:members (("G_MARKUP_ERROR_BAD_UTF8" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1771 1795]) ("G_MARKUP_ERROR_EMPTY" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1798 1819]) ("G_MARKUP_ERROR_PARSE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1822 1843]) ("G_MARKUP_ERROR_UNKNOWN_ELEMENT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1950 1981]) ("G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1984 2017]) ("G_MARKUP_ERROR_INVALID_CONTENT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2020 2051]) ("G_MARKUP_ERROR_MISSING_ATTRIBUTE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2054 2088])) :type "enum") nil nil) :type "typedef") nil [1754 2102])
            ("G_MARKUP_ERROR" variable (:constant-flag t) nil [2296 2310])
            ((((0) "GMarkupParseFlags")) type (:superclasses ("" type (:members (("G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG" variable (:constant-flag t :default-value (3500 3501) :type "int") (reparse-symbol enumsubparts) [3456 3501]) ("G_MARKUP_TREAT_CDATA_AS_TEXT" variable (:constant-flag t :default-value (3554 3555) :type "int") (reparse-symbol enumsubparts) [3510 3555]) ("G_MARKUP_PREFIX_ERROR_POSITION" variable (:constant-flag t :default-value (3608 3609) :type "int") (reparse-symbol enumsubparts) [3564 3609]) ("G_MARKUP_IGNORE_QUALIFIED" variable (:constant-flag t :default-value (3662 3663) :type "int") (reparse-symbol enumsubparts) [3618 3663])) :type "enum") nil nil) :type "typedef") nil [3439 3689])
            ((((0) "GMarkupParseContext")) type (:superclasses ("_GMarkupParseContext" type (:prototype t :type "struct") nil nil) :type "typedef") nil [3913 3969])
            ((((0) "GMarkupParser")) type (:superclasses ("_GMarkupParser" type (:prototype t :type "struct") nil nil) :type "typedef") nil [3970 4014])
            ("_GMarkupParser" type (:type "struct") nil [5561 7421])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [9932 9953])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [10052 10072])
            ((((0) "GMarkupCollectType")) type (:superclasses ("" type (:members (("G_MARKUP_COLLECT_INVALID" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [10091 10116]) ("G_MARKUP_COLLECT_STRING" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [10119 10143]) ("G_MARKUP_COLLECT_STRDUP" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [10146 10170]) ("G_MARKUP_COLLECT_BOOLEAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [10173 10198]) ("G_MARKUP_COLLECT_TRISTATE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [10201 10227]) ("G_MARKUP_COLLECT_OPTIONAL" variable (:constant-flag t :default-value (10259 10268) :type "int") (reparse-symbol enumsubparts) [10231 10268])) :type "enum") nil nil) :type "typedef") nil [10074 10290]))          
      :file "gmarkup.h"
      :pointmax 10881
      :fsize 10880
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 10840 . 10851) (punctuation 10837 . 10838) (semantic-list 10386 . 10837) (symbol 10358 . 10385) (symbol 10347 . 10355) (symbol 10325 . 10346) (number 10069 . 10070) (number 10066 . 10067) (semantic-list 10008 . 10051) (symbol 9983 . 10007) (punctuation 9982 . 9983) (symbol 9976 . 9981) (symbol 9954 . 9975) (number 9950 . 9951) (number 9947 . 9948) (semantic-list 9902 . 9931) (symbol 9878 . 9901) (punctuation 9877 . 9878) (symbol 9871 . 9876) (symbol 9849 . 9870) (punctuation 9846 . 9847) (semantic-list 9777 . 9846) (symbol 9756 . 9776) (punctuation 9754 . 9755) (symbol 9749 . 9754) (symbol 9727 . 9748) (punctuation 9699 . 9700) (semantic-list 9669 . 9699) (symbol 9632 . 9668) (symbol 9611 . 9619) (symbol 9589 . 9610) (punctuation 9587 . 9588) (semantic-list 9373 . 9587) (symbol 9337 . 9372) (VOID 9316 . 9320) (symbol 9294 . 9315) (punctuation 9223 . 9224) (semantic-list 9193 . 9223) (symbol 9152 . 9192) (punctuation 9144 . 9145) (symbol 9137 . 9143) (CONST 9131 . 9136) (symbol 9109 . 9130) (punctuation 9107 . 9108) (semantic-list 9077 . 9107) (symbol 9042 . 9076) (punctuation 9033 . 9034) (symbol 9027 . 9032) (CONST 9021 . 9026) (symbol 8999 . 9020) (punctuation 8997 . 8998) (semantic-list 8884 . 8997) (symbol 8851 . 8883) (symbol 8830 . 8838) (symbol 8808 . 8829) (punctuation 8805 . 8806) (semantic-list 8775 . 8805) (symbol 8746 . 8772) (symbol 8725 . 8733) (symbol 8703 . 8724) (punctuation 8701 . 8702) (semantic-list 8508 . 8701) (symbol 8479 . 8506) (VOID 8458 . 8462) (symbol 8436 . 8457) (punctuation 8434 . 8435) (semantic-list 8165 . 8434) (symbol 8136 . 8164) (symbol 8115 . 8123) (symbol 8093 . 8114) (punctuation 8091 . 8092) (semantic-list 8061 . 8091) (symbol 8032 . 8059) (VOID 8011 . 8015) (symbol 7989 . 8010) (punctuation 7987 . 7988) (semantic-list 7957 . 7987) (symbol 7928 . 7956) (VOID 7907 . 7911) (symbol 7884 . 7906) (punctuation 7882 . 7883) (semantic-list 7852 . 7882) (symbol 7823 . 7849) (punctuation 7822 . 7823) (symbol 7802 . 7821) (symbol 7779 . 7801) (punctuation 7777 . 7778) (semantic-list 7495 . 7777) (symbol 7466 . 7492) (punctuation 7465 . 7466) (symbol 7445 . 7464) (symbol 7423 . 7444) (punctuation 7417 . 7418) (semantic-list 7275 . 7417) (semantic-list 7257 . 7265) (VOID 7252 . 7256) (punctuation 7132 . 7133) (semantic-list 6868 . 7132) (semantic-list 6850 . 6864) (VOID 6845 . 6849) (punctuation 6604 . 6605) (semantic-list 6352 . 6604) (semantic-list 6334 . 6341) (VOID 6329 . 6333) (punctuation 6255 . 6256) (semantic-list 6052 . 6255) (semantic-list 6034 . 6048) (VOID 6029 . 6033) (punctuation 5987 . 5988) (semantic-list 5655 . 5987) (semantic-list 5637 . 5653) (VOID 5632 . 5636) (number 3667 . 3668) (punctuation 3665 . 3666) (punctuation 3664 . 3665) (number 3613 . 3614) (punctuation 3611 . 3612) (punctuation 3610 . 3611) (number 3559 . 3560) (punctuation 3557 . 3558) (punctuation 3556 . 3557) (number 3505 . 3506) (punctuation 3503 . 3504) (punctuation 3502 . 3503) (punctuation 2392 . 2393) (semantic-list 2386 . 2392) (symbol 2365 . 2385) (symbol 2358 . 2364) (symbol 2336 . 2357) (symbol 1009 . 1022) (string 887 . 928) (symbol 881 . 886) (punctuation 880 . 881))
      :lexical-table 
        '(("G_MARKUP_ERROR" . ((symbol "g_markup_error_quark" 2311 . 2331) (semantic-list "()" 2332 . 2334)))
          ("__G_MARKUP_H__")
          )
)
    (semanticdb-table "gmem.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_MEM_H__" variable (:constant-flag t) nil [1082 1093])
            ("glib/gutils.h" include (:system-flag t) nil [1216 1240])
            ((((0) "GMemVTable")) type (:superclasses ("_GMemVTable" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1975 2013])
            ("G_MEM_ALIGN" variable (:constant-flag t) nil [2280 2291])
            ("G_GNUC_ALLOC_SIZE" function
               (:prototype-flag t
                :type ("G_GNUC_MALLOC" type (:type "class") nil nil))
                nil [2649 2684])
            ("G_GNUC_ALLOC_SIZE" function
               (:prototype-flag t
                :type ("G_GNUC_MALLOC" type (:type "class") nil nil))
                nil [2750 2785])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [2872 2898])
            ("G_GNUC_ALLOC_SIZE" function
               (:prototype-flag t
                :type ("G_GNUC_MALLOC" type (:type "class") nil nil))
                nil [2964 2999])
            ("G_GNUC_ALLOC_SIZE" function
               (:prototype-flag t
                :type ("G_GNUC_MALLOC" type (:type "class") nil nil))
                nil [3065 3100])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [3187 3213])
            ("G_GNUC_ALLOC_SIZE2" function
               (:prototype-flag t
                :type ("G_GNUC_MALLOC" type (:type "class") nil nil))
                nil [3309 3347])
            ("G_GNUC_ALLOC_SIZE2" function
               (:prototype-flag t
                :type ("G_GNUC_MALLOC" type (:type "class") nil nil))
                nil [3442 3480])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [3596 3622])
            ("G_GNUC_ALLOC_SIZE2" function
               (:prototype-flag t
                :type ("G_GNUC_MALLOC" type (:type "class") nil nil))
                nil [3717 3755])
            ("G_GNUC_ALLOC_SIZE2" function
               (:prototype-flag t
                :type ("G_GNUC_MALLOC" type (:type "class") nil nil))
                nil [3850 3888])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [4004 4030])
            ("g_clear_pointer" variable (:constant-flag t) nil [4040 4055])
            ("g_steal_pointer" variable (:constant-flag t) nil [6634 6649])
            ("_G_NEW" variable (:constant-flag t) nil [7931 7937])
            ("_G_RENEW" variable (:constant-flag t) nil [8053 8061])
            ("g_new" variable (:constant-flag t) nil [8828 8833])
            ("g_new0" variable (:constant-flag t) nil [9564 9570])
            ("g_renew" variable (:constant-flag t) nil [10180 10187])
            ("g_try_new" variable (:constant-flag t) nil [10803 10812])
            ("g_try_new0" variable (:constant-flag t) nil [11444 11454])
            ("g_try_renew" variable (:constant-flag t) nil [12159 12170])
            ("_GMemVTable" type (:type "struct") nil [12402 12812])
            ((("g_mem_gc_friendly" 0 nil nil nil)) variable (:type ("gboolean" type (:type "class") nil nil)) nil [12956 12983])
            ((("glib_mem_profiler_table" 1 nil nil nil)) variable (:type ("GMemVTable" type (:type "class") nil nil)) nil [13071 13107]))          
      :file "gmem.h"
      :pointmax 13198
      :fsize 13197
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 13160 . 13171) (punctuation 13157 . 13158) (semantic-list 13151 . 13157) (symbol 13137 . 13150) (VOID 13132 . 13136) (symbol 13108 . 13131) (symbol 13062 . 13070) (symbol 12947 . 12955) (punctuation 12944 . 12945) (semantic-list 12938 . 12944) (symbol 12915 . 12937) (symbol 12906 . 12914) (symbol 12882 . 12905) (punctuation 12880 . 12881) (semantic-list 12860 . 12880) (symbol 12843 . 12859) (VOID 12837 . 12841) (symbol 12813 . 12836) (punctuation 12808 . 12809) (semantic-list 12770 . 12808) (semantic-list 12755 . 12769) (symbol 12746 . 12754) (punctuation 12742 . 12743) (semantic-list 12724 . 12742) (semantic-list 12709 . 12722) (symbol 12700 . 12708) (punctuation 12696 . 12697) (semantic-list 12647 . 12696) (semantic-list 12632 . 12641) (symbol 12623 . 12631) (punctuation 12575 . 12576) (semantic-list 12561 . 12575) (semantic-list 12546 . 12553) (VOID 12537 . 12541) (punctuation 12533 . 12534) (semantic-list 12495 . 12533) (semantic-list 12480 . 12490) (symbol 12471 . 12479) (punctuation 12467 . 12468) (semantic-list 12449 . 12467) (semantic-list 12434 . 12443) (symbol 12425 . 12433) (semantic-list 6507 . 6606) (semantic-list 6493 . 6506) (symbol 6477 . 6492) (symbol 6468 . 6476) (INLINE 6461 . 6467) (STATIC 6454 . 6460) (semantic-list 3937 . 4003) (symbol 3920 . 3935) (symbol 3911 . 3919) (symbol 3889 . 3910) (number 3885 . 3886) (number 3883 . 3884) (semantic-list 3804 . 3849) (symbol 3787 . 3802) (symbol 3778 . 3786) (symbol 3756 . 3777) (number 3752 . 3753) (number 3750 . 3751) (semantic-list 3671 . 3716) (symbol 3654 . 3668) (symbol 3645 . 3653) (symbol 3623 . 3644) (semantic-list 3529 . 3595) (symbol 3512 . 3523) (symbol 3503 . 3511) (symbol 3481 . 3502) (number 3477 . 3478) (number 3475 . 3476) (semantic-list 3396 . 3441) (symbol 3379 . 3390) (symbol 3370 . 3378) (symbol 3348 . 3369) (number 3344 . 3345) (number 3342 . 3343) (semantic-list 3263 . 3308) (symbol 3246 . 3256) (symbol 3237 . 3245) (symbol 3215 . 3236) (semantic-list 3149 . 3186) (symbol 3132 . 3145) (symbol 3123 . 3131) (symbol 3101 . 3122) (number 3097 . 3098) (semantic-list 3048 . 3064) (symbol 3031 . 3044) (symbol 3022 . 3030) (symbol 3000 . 3021) (number 2996 . 2997) (semantic-list 2947 . 2963) (symbol 2930 . 2942) (symbol 2921 . 2929) (symbol 2899 . 2920) (semantic-list 2834 . 2871) (symbol 2817 . 2826) (symbol 2808 . 2816) (symbol 2786 . 2807) (number 2782 . 2783) (semantic-list 2733 . 2749) (symbol 2716 . 2725) (symbol 2707 . 2715) (symbol 2685 . 2706) (number 2681 . 2682) (semantic-list 2632 . 2648) (symbol 2615 . 2623) (symbol 2606 . 2614) (symbol 2584 . 2605) (punctuation 2581 . 2582) (semantic-list 2511 . 2581) (symbol 2494 . 2509) (VOID 2485 . 2489) (symbol 2462 . 2484) (punctuation 2459 . 2460) (semantic-list 2444 . 2459) (symbol 2427 . 2433) (VOID 2421 . 2425) (symbol 2399 . 2420) (symbol 1242 . 1255) (string 1166 . 1207) (symbol 1160 . 1165) (punctuation 1159 . 1160))
      :lexical-table 
        '(("_G_RENEW" (spp-arg-list ("struct_type" "mem" "n_structs" "func") 8061 . 8096) . ((semantic-list "((struct_type *) g_##func##_n (mem, (n_structs), sizeof (struct_type)))" 8107 . 8178)))
          ("_G_NEW" (spp-arg-list ("struct_type" "n_structs" "func") 7937 . 7967) . ((semantic-list "((struct_type *) g_##func##_n ((n_structs), sizeof (struct_type)))" 7978 . 8044)))
          ("__G_MEM_H__")
          ("G_MEM_ALIGN" . ((symbol "GLIB_SIZEOF_LONG" 2292 . 2308)))
          ("g_steal_pointer" (spp-arg-list ("pp") 6649 . 6653) . ((semantic-list "(0 ? (*(pp)) : (g_steal_pointer) (pp))" 6658 . 6696)))
          ("g_renew" (spp-arg-list ("struct_type" "mem" "n_structs") 10187 . 10216) . ((symbol "_G_RENEW" 10218 . 10226) (semantic-list "(struct_type, mem, n_structs, realloc)" 10227 . 10265)))
          ("g_try_new0" (spp-arg-list ("struct_type" "n_structs") 11454 . 11478) . ((symbol "_G_NEW" 11480 . 11486) (semantic-list "(struct_type, n_structs, try_malloc0)" 11487 . 11524)))
          ("g_try_renew" (spp-arg-list ("struct_type" "mem" "n_structs") 12170 . 12199) . ((symbol "_G_RENEW" 12200 . 12208) (semantic-list "(struct_type, mem, n_structs, try_realloc)" 12209 . 12251)))
          ("g_new" (spp-arg-list ("struct_type" "n_structs") 8833 . 8857) . ((symbol "_G_NEW" 8860 . 8866) (semantic-list "(struct_type, n_structs, malloc)" 8867 . 8899)))
          ("g_clear_pointer" (spp-arg-list ("pp" "destroy") 4055 . 4068) . 
              ((symbol "G_STMT_START" 4073 . 4085) (semantic-list "{                                                               \\
    G_STATIC_ASSERT (sizeof *(pp) == sizeof (gpointer));                       \\
    /* Only one access, please */                                              \\
    gpointer *_pp = (gpointer *) (pp);                                         \\
    gpointer _p;                                                               \\
    /* This assignment is needed to avoid a gcc warning */                     \\
    GDestroyNotify _destroy = (GDestroyNotify) (destroy);                      \\
                                                                               \\
    _p = *_pp;                                                                 \\
    if (_p) 								       \\
      { 								       \\
        *_pp = NULL;							       \\
        _destroy (_p);                                                         \\
      }                                                                        \\
  }" 4086 . 5055) (symbol "G_STMT_END" 5056 . 5066)))
          ("g_new0" (spp-arg-list ("struct_type" "n_structs") 9570 . 9594) . ((symbol "_G_NEW" 9597 . 9603) (semantic-list "(struct_type, n_structs, malloc0)" 9604 . 9637)))
          ("g_try_new" (spp-arg-list ("struct_type" "n_structs") 10812 . 10836) . ((symbol "_G_NEW" 10838 . 10844) (semantic-list "(struct_type, n_structs, try_malloc)" 10845 . 10881)))
          )
)
    (semanticdb-table "gmessages.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_MESSAGES_H__" variable (:constant-flag t) nil [1087 1103])
            ("stdarg.h" include (:system-flag t) nil [1226 1245])
            ("glib/gtypes.h" include (:system-flag t) nil [1246 1270])
            ("glib/gmacros.h" include (:system-flag t) nil [1271 1296])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [1481 1501])
            ("G_LOG_LEVEL_USER_SHIFT" variable (:constant-flag t) nil [1596 1618])
            ((((0) "GLogLevelFlags")) type (:superclasses ("" type (:members (("G_LOG_FLAG_RECURSION" variable (:constant-flag t :default-value (1726 1727) :type "int") (reparse-symbol enumsubparts) [1694 1727]) ("G_LOG_FLAG_FATAL" variable (:constant-flag t :default-value (1768 1769) :type "int") (reparse-symbol enumsubparts) [1736 1769]) ("G_LOG_LEVEL_ERROR" variable (:constant-flag t :default-value (1835 1836) :type "int") (reparse-symbol enumsubparts) [1803 1836]) ("G_LOG_LEVEL_CRITICAL" variable (:constant-flag t :default-value (1902 1903) :type "int") (reparse-symbol enumsubparts) [1870 1903]) ("G_LOG_LEVEL_WARNING" variable (:constant-flag t :default-value (1944 1945) :type "int") (reparse-symbol enumsubparts) [1912 1945]) ("G_LOG_LEVEL_MESSAGE" variable (:constant-flag t :default-value (1986 1987) :type "int") (reparse-symbol enumsubparts) [1954 1987]) ("G_LOG_LEVEL_INFO" variable (:constant-flag t :default-value (2028 2029) :type "int") (reparse-symbol enumsubparts) [1996 2029]) ("G_LOG_LEVEL_DEBUG" variable (:constant-flag t :default-value (2070 2071) :type "int") (reparse-symbol enumsubparts) [2038 2071]) ("G_LOG_LEVEL_MASK" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2081 2112])) :type "enum") nil nil) :type "typedef") nil [1659 2173])
            ("G_LOG_FATAL_MASK" variable (:constant-flag t) nil [2242 2258])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [4145 4166])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [4454 4474])
            ((("G_ANALYZER_NORETURN" 0 nil nil nil)) variable (:type "int") nil [5117 5137])
            ((("G_ANALYZER_NORETURN" 0 nil nil nil)) variable (:type "int") nil [5431 5451])
            ((("G_GNUC_NORETURN" 0 nil nil nil)) variable (:type "int") nil [5666 5682])
            ("G_LOG_DOMAIN" variable (:constant-flag t) nil [5714 5726])
            ((("G_ANALYZER_NORETURN" 0 nil nil nil)) variable (:type ("G_GNUC_NORETURN" type (:type "class") nil nil)) nil [8468 8504])
            ((("G_ANALYZER_NORETURN" 0 nil nil nil)) variable (:type "int") nil [8555 8575])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [10080 10101])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [10321 10342])
            ("g_warn_if_reached" variable (:constant-flag t) nil [10508 10525])
            ("g_warn_if_fail" variable (:constant-flag t) nil [10767 10781])
            ("g_return_if_fail" variable (:constant-flag t) nil [13349 13365])
            ("g_return_val_if_fail" variable (:constant-flag t) nil [13623 13643])
            ("g_return_if_reached" variable (:constant-flag t) nil [13904 13923])
            ("g_return_val_if_reached" variable (:constant-flag t) nil [14175 14198]))          
      :file "gmessages.h"
      :pointmax 14524
      :fsize 14523
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 14481 . 14492) (punctuation 10427 . 10428) (semantic-list 10405 . 10427) (symbol 10381 . 10403) (symbol 10365 . 10375) (symbol 10343 . 10364) (number 10339 . 10340) (number 10336 . 10337) (semantic-list 10250 . 10320) (symbol 10226 . 10236) (VOID 10210 . 10214) (symbol 10188 . 10209) (punctuation 10186 . 10187) (semantic-list 10164 . 10186) (symbol 10140 . 10159) (symbol 10124 . 10134) (symbol 10102 . 10123) (number 10098 . 10099) (number 10095 . 10096) (semantic-list 10009 . 10079) (symbol 9985 . 9992) (VOID 9969 . 9973) (symbol 9947 . 9968) (punctuation 9945 . 9946) (semantic-list 9921 . 9945) (semantic-list 9897 . 9910) (VOID 9889 . 9893) (TYPEDEF 9881 . 9888) (semantic-list 9554 . 9675) (semantic-list 9518 . 9553) (symbol 9510 . 9517) (VOID 9505 . 9509) (STATIC 9498 . 9504) (semantic-list 9377 . 9497) (semantic-list 9342 . 9376) (symbol 9335 . 9341) (VOID 9330 . 9334) (STATIC 9323 . 9329) (semantic-list 9199 . 9322) (semantic-list 9161 . 9198) (symbol 9151 . 9160) (VOID 9146 . 9150) (STATIC 9139 . 9145) (semantic-list 9014 . 9138) (semantic-list 8975 . 9013) (symbol 8964 . 8974) (VOID 8959 . 8963) (STATIC 8952 . 8958) (semantic-list 8828 . 8951) (semantic-list 8790 . 8827) (symbol 8780 . 8789) (VOID 8775 . 8779) (STATIC 8768 . 8774) (semantic-list 8633 . 8767) (semantic-list 8597 . 8632) (symbol 8589 . 8596) (VOID 8584 . 8588) (STATIC 8577 . 8583) (semantic-list 8528 . 8554) (symbol 8517 . 8527) (VOID 8512 . 8516) (STATIC 8505 . 8511) (semantic-list 8441 . 8467) (symbol 8433 . 8440) (VOID 8428 . 8432) (STATIC 8421 . 8427) (semantic-list 5498 . 5665) (symbol 5473 . 5489) (VOID 5468 . 5472) (symbol 5452 . 5467) (semantic-list 5190 . 5430) (symbol 5165 . 5179) (VOID 5160 . 5164) (symbol 5138 . 5159) (semantic-list 5019 . 5116) (symbol 4994 . 5018) (VOID 4989 . 4993) (symbol 4967 . 4988) (punctuation 4899 . 4900) (semantic-list 4773 . 4899) (symbol 4749 . 4772) (VOID 4744 . 4748) (punctuation 4726 . 4727) (semantic-list 4698 . 4726) (symbol 4674 . 4696) (symbol 4658 . 4672) (symbol 4636 . 4657) (punctuation 4634 . 4635) (semantic-list 4537 . 4634) (symbol 4513 . 4533) (symbol 4497 . 4511) (symbol 4475 . 4496) (number 4471 . 4472) (number 4468 . 4469) (semantic-list 4229 . 4453) (symbol 4205 . 4211) (VOID 4189 . 4193) (symbol 4167 . 4188) (number 4163 . 4164) (number 4160 . 4161) (semantic-list 3937 . 4144) (symbol 3913 . 3918) (VOID 3897 . 3901) (symbol 3875 . 3896) (punctuation 3873 . 3874) (semantic-list 3816 . 3873) (symbol 3790 . 3815) (symbol 3774 . 3782) (symbol 3752 . 3773) (punctuation 3750 . 3751) (semantic-list 3518 . 3750) (symbol 3494 . 3515) (VOID 3478 . 3482) (symbol 3456 . 3477) (punctuation 3454 . 3455) (semantic-list 3357 . 3454) (symbol 3333 . 3353) (VOID 3317 . 3321) (symbol 3295 . 3316) (punctuation 3293 . 3294) (semantic-list 2995 . 3293) (symbol 2971 . 2993) (symbol 2955 . 2960) (symbol 2932 . 2954) (punctuation 2930 . 2931) (semantic-list 2698 . 2930) (symbol 2674 . 2691) (symbol 2658 . 2663) (symbol 2636 . 2657) (punctuation 2608 . 2609) (semantic-list 2358 . 2608) (semantic-list 2334 . 2345) (VOID 2318 . 2322) (TYPEDEF 2310 . 2317) (semantic-list 2114 . 2155) (punctuation 2113 . 2114) (punctuation 2111 . 2112) (number 2075 . 2076) (punctuation 2073 . 2074) (punctuation 2072 . 2073) (number 2033 . 2034) (punctuation 2031 . 2032) (punctuation 2030 . 2031) (number 1991 . 1992) (punctuation 1989 . 1990) (punctuation 1988 . 1989) (number 1949 . 1950) (punctuation 1947 . 1948) (punctuation 1946 . 1947) (number 1907 . 1908) (punctuation 1905 . 1906) (punctuation 1904 . 1905) (number 1840 . 1841) (punctuation 1838 . 1839) (punctuation 1837 . 1838) (number 1773 . 1774) (punctuation 1771 . 1772) (punctuation 1770 . 1771) (number 1731 . 1732) (punctuation 1729 . 1730) (punctuation 1728 . 1729) (number 1498 . 1499) (number 1495 . 1496) (semantic-list 1434 . 1480) (symbol 1406 . 1433) (symbol 1400 . 1405) (symbol 1378 . 1399) (symbol 1298 . 1311) (string 1176 . 1217) (symbol 1170 . 1175) (punctuation 1169 . 1170))
      :lexical-table 
        '(("g_return_if_fail" (spp-arg-list ("expr") 13365 . 13371) . 
              ((symbol "G_STMT_START" 13373 . 13385) (semantic-list "{			\\
     if G_LIKELY(expr) { } else       					\\
       {								\\
	 g_return_if_fail_warning (G_LOG_DOMAIN,			\\
		                   G_STRFUNC,				\\
		                   #expr);				\\
	 return;							\\
       };				}" 13385 . 13603) (symbol "G_STMT_END" 13603 . 13613)))
          ("g_warn_if_reached" (spp-arg-list nil 10525 . 10527) . 
              ((DO "do" 10532 . 10534) (semantic-list "{ \\
    g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, NULL); \\
  }" 10535 . 10616) (WHILE "while" 10617 . 10622) (semantic-list "(0)" 10623 . 10626)))
          ("g_return_if_reached" (spp-arg-list nil 13923 . 13925) . 
              ((symbol "G_STMT_START" 13927 . 13939) (semantic-list "{			\\
     g_log (G_LOG_DOMAIN,						\\
	    G_LOG_LEVEL_CRITICAL,					\\
	    \"file %s: line %d (%s): should not be reached\",		\\
	    __FILE__,							\\
	    __LINE__,							\\
	    G_STRFUNC);							\\
     return;				}" 13939 . 14155) (symbol "G_STMT_END" 14155 . 14165)))
          ("G_LOG_DOMAIN" . ((semantic-list "((gchar*) 0)" 5730 . 5742)))
          ("G_LOG_FATAL_MASK" . ((semantic-list "(G_LOG_FLAG_RECURSION | G_LOG_LEVEL_ERROR)" 2266 . 2308)))
          ("__G_MESSAGES_H__")
          ("G_LOG_LEVEL_USER_SHIFT" . ((semantic-list "(8)" 1620 . 1623)))
          ("g_return_val_if_fail" (spp-arg-list ("expr" "val") 13643 . 13653) . 
              ((symbol "G_STMT_START" 13654 . 13666) (semantic-list "{			\\
     if G_LIKELY(expr) { } else						\\
       {								\\
	 g_return_if_fail_warning (G_LOG_DOMAIN,			\\
		                   G_STRFUNC,				\\
		                   #expr);				\\
	 return (val);							\\
       };				}" 13666 . 13884) (symbol "G_STMT_END" 13884 . 13894)))
          ("g_return_val_if_reached" (spp-arg-list ("val") 14198 . 14203) . 
              ((symbol "G_STMT_START" 14204 . 14216) (semantic-list "{			\\
     g_log (G_LOG_DOMAIN,						\\
	    G_LOG_LEVEL_CRITICAL,					\\
	    \"file %s: line %d (%s): should not be reached\",		\\
	    __FILE__,							\\
	    __LINE__,							\\
	    G_STRFUNC);							\\
     return (val);			}" 14216 . 14437) (symbol "G_STMT_END" 14437 . 14447)))
          ("g_warn_if_fail" (spp-arg-list ("expr") 10781 . 10787) . 
              ((DO "do" 10792 . 10794) (semantic-list "{ \\
    if G_LIKELY (expr) ; \\
    else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, #expr); \\
  }" 10795 . 10909) (WHILE "while" 10910 . 10915) (semantic-list "(0)" 10916 . 10919)))
          )
)
    (semanticdb-table "gnode.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_NODE_H__" variable (:constant-flag t) nil [1083 1095])
            ("glib/gmem.h" include (:system-flag t) nil [1218 1240])
            ((((0) "GNode")) type (:superclasses ("_GNode" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1257 1286])
            ((((0) "GTraverseFlags")) type (:superclasses ("" type (:members (("G_TRAVERSE_LEAVES" variable (:constant-flag t :default-value (1355 1356) :type "int") (reparse-symbol enumsubparts) [1331 1356]) ("G_TRAVERSE_NON_LEAVES" variable (:constant-flag t :default-value (1389 1390) :type "int") (reparse-symbol enumsubparts) [1365 1390]) ("G_TRAVERSE_ALL" variable (:constant-flag t :default-value (1423 1464) :type "int") (reparse-symbol enumsubparts) [1399 1464]) ("G_TRAVERSE_MASK" variable (:constant-flag t :default-value (1492 1496) :type "int") (reparse-symbol enumsubparts) [1468 1496]) ("G_TRAVERSE_LEAFS" variable (:constant-flag t :default-value (1524 1541) :type "int") (reparse-symbol enumsubparts) [1500 1541]) ("G_TRAVERSE_NON_LEAFS" variable (:constant-flag t :default-value (1569 1590) :type "int") (reparse-symbol enumsubparts) [1545 1590])) :type "enum") nil nil) :type "typedef") nil [1314 1608])
            ((((0) "GTraverseType")) type (:superclasses ("" type (:members (("G_IN_ORDER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1654 1665]) ("G_PRE_ORDER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1668 1680]) ("G_POST_ORDER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1683 1696]) ("G_LEVEL_ORDER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1699 1714])) :type "enum") nil nil) :type "typedef") nil [1637 1729])
            ("_GNode" type
               (:members (((("data" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2368 2382]) ((("next" 1 nil nil nil)) variable (:type ("GNode" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2385 2399]) ((("prev" 1 nil nil nil)) variable (:type ("GNode" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2402 2416]) ((("parent" 1 nil nil nil)) variable (:type ("GNode" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2419 2435]) ((("children" 1 nil nil nil)) variable (:type ("GNode" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2438 2456]))
                :type "struct")
                nil [2350 2459])
            ("G_NODE_IS_ROOT" variable (:constant-flag t) nil [2672 2686])
            ("G_NODE_IS_LEAF" variable (:constant-flag t) nil [3001 3015])
            ("g_node_append" variable (:constant-flag t) nil [4623 4636])
            ("g_node_insert_data" variable (:constant-flag t) nil [5056 5074])
            ("g_node_insert_data_after" variable (:constant-flag t) nil [5445 5469])
            ("g_node_insert_data_before" variable (:constant-flag t) nil [5844 5869])
            ("g_node_prepend_data" variable (:constant-flag t) nil [6191 6210])
            ("g_node_append_data" variable (:constant-flag t) nil [6506 6524])
            ("g_node_prev_sibling" variable (:constant-flag t) nil [8463 8482])
            ("g_node_next_sibling" variable (:constant-flag t) nil [8734 8753])
            ("g_node_first_child" variable (:constant-flag t) nil [9005 9023]))          
      :file "gnode.h"
      :pointmax 9124
      :fsize 9123
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 9085 . 9096) (punctuation 8257 . 8258) (semantic-list 8241 . 8257) (symbol 8220 . 8239) (punctuation 8217 . 8218) (symbol 8212 . 8217) (symbol 8190 . 8211) (punctuation 8188 . 8189) (semantic-list 8172 . 8188) (symbol 8150 . 8170) (punctuation 8147 . 8148) (symbol 8142 . 8147) (symbol 8120 . 8141) (punctuation 8117 . 8118) (semantic-list 8077 . 8117) (symbol 8057 . 8075) (symbol 8051 . 8055) (symbol 8029 . 8050) (punctuation 8027 . 8028) (semantic-list 7988 . 8027) (symbol 7965 . 7986) (symbol 7959 . 7963) (symbol 7937 . 7958) (punctuation 7935 . 7936) (semantic-list 7865 . 7935) (symbol 7846 . 7863) (punctuation 7843 . 7844) (symbol 7838 . 7843) (symbol 7816 . 7837) (punctuation 7814 . 7815) (semantic-list 7798 . 7814) (symbol 7779 . 7796) (punctuation 7776 . 7777) (symbol 7771 . 7776) (symbol 7749 . 7770) (punctuation 7747 . 7748) (semantic-list 7712 . 7747) (symbol 7694 . 7710) (punctuation 7691 . 7692) (symbol 7686 . 7691) (symbol 7664 . 7685) (punctuation 7662 . 7663) (semantic-list 7646 . 7662) (symbol 7627 . 7644) (symbol 7620 . 7625) (symbol 7598 . 7619) (punctuation 7596 . 7597) (semantic-list 7580 . 7596) (symbol 7556 . 7579) (VOID 7550 . 7554) (symbol 7528 . 7549) (punctuation 7526 . 7527) (semantic-list 7427 . 7526) (symbol 7403 . 7426) (VOID 7397 . 7401) (symbol 7375 . 7396) (punctuation 7372 . 7373) (semantic-list 7359 . 7372) (symbol 7340 . 7357) (symbol 7333 . 7338) (symbol 7311 . 7332) (punctuation 7007 . 7008) (semantic-list 6855 . 7007) (symbol 6839 . 6854) (VOID 6833 . 6837) (symbol 6811 . 6832) (punctuation 4380 . 4381) (semantic-list 4282 . 4380) (symbol 4269 . 4280) (punctuation 4266 . 4267) (symbol 4261 . 4266) (symbol 4239 . 4260) (punctuation 4237 . 4238) (semantic-list 4221 . 4237) (symbol 4207 . 4219) (symbol 4200 . 4205) (symbol 4178 . 4199) (punctuation 4176 . 4177) (semantic-list 4133 . 4176) (symbol 4114 . 4132) (symbol 4105 . 4113) (symbol 4083 . 4104) (punctuation 4081 . 4082) (semantic-list 4065 . 4081) (symbol 4049 . 4064) (punctuation 4046 . 4047) (symbol 4041 . 4046) (symbol 4019 . 4040) (punctuation 4017 . 4018) (semantic-list 3971 . 4017) (symbol 3955 . 3969) (symbol 3948 . 3953) (symbol 3926 . 3947) (punctuation 3924 . 3925) (semantic-list 3885 . 3924) (symbol 3869 . 3883) (punctuation 3866 . 3867) (symbol 3861 . 3866) (symbol 3839 . 3860) (punctuation 3836 . 3837) (semantic-list 3749 . 3836) (symbol 3726 . 3745) (punctuation 3722 . 3723) (symbol 3717 . 3722) (symbol 3695 . 3716) (punctuation 3693 . 3694) (semantic-list 3630 . 3693) (symbol 3609 . 3629) (punctuation 3606 . 3607) (symbol 3601 . 3606) (symbol 3579 . 3600) (punctuation 3577 . 3578) (semantic-list 3514 . 3577) (symbol 3499 . 3512) (punctuation 3496 . 3497) (symbol 3491 . 3496) (symbol 3469 . 3490) (punctuation 3467 . 3468) (semantic-list 3443 . 3467) (symbol 3420 . 3431) (punctuation 3416 . 3417) (symbol 3411 . 3416) (symbol 3389 . 3410) (punctuation 3387 . 3388) (semantic-list 3300 . 3387) (symbol 3277 . 3293) (punctuation 3273 . 3274) (symbol 3268 . 3273) (symbol 3246 . 3267) (punctuation 3244 . 3245) (semantic-list 3228 . 3244) (symbol 3213 . 3226) (VOID 3207 . 3211) (symbol 3185 . 3206) (punctuation 3183 . 3184) (semantic-list 3167 . 3183) (symbol 3151 . 3165) (VOID 3145 . 3149) (symbol 3123 . 3144) (punctuation 3121 . 3122) (semantic-list 3103 . 3121) (symbol 3091 . 3101) (punctuation 3088 . 3089) (symbol 3083 . 3088) (symbol 3061 . 3082) (punctuation 2314 . 2315) (semantic-list 2224 . 2314) (semantic-list 2200 . 2212) (symbol 2191 . 2199) (TYPEDEF 2183 . 2190) (punctuation 1889 . 1890) (semantic-list 1847 . 1889) (semantic-list 1827 . 1846) (VOID 1821 . 1825) (TYPEDEF 1813 . 1820) (punctuation 1811 . 1812) (semantic-list 1769 . 1811) (semantic-list 1748 . 1768) (symbol 1739 . 1747) (TYPEDEF 1731 . 1738) (number 1394 . 1395) (punctuation 1392 . 1393) (punctuation 1391 . 1392) (number 1360 . 1361) (punctuation 1358 . 1359) (punctuation 1357 . 1358) (symbol 1242 . 1255) (string 1168 . 1209) (symbol 1162 . 1167) (punctuation 1161 . 1162))
      :lexical-table 
        '(("g_node_insert_data_before" (spp-arg-list ("parent" "sibling" "data") 5869 . 5892) . ((symbol "g_node_insert_before" 5900 . 5920) (semantic-list "((parent), (sibling), g_node_new (data))" 5921 . 5961)))
          ("g_node_append" (spp-arg-list ("parent" "node") 4636 . 4650) . ((symbol "g_node_insert_before" 4661 . 4681) (semantic-list "((parent), NULL, (node))" 4682 . 4706)))
          ("g_node_prepend_data" (spp-arg-list ("parent" "data") 6210 . 6224) . ((symbol "g_node_prepend" 6234 . 6248) (semantic-list "((parent), g_node_new (data))" 6249 . 6278)))
          ("g_node_insert_data_after" (spp-arg-list ("parent" "sibling" "data") 5469 . 5492) . ((symbol "g_node_insert_after" 5500 . 5519) (semantic-list "((parent), (sibling), g_node_new (data))" 5520 . 5560)))
          ("__G_NODE_H__")
          ("g_node_next_sibling" (spp-arg-list ("node") 8753 . 8759) . ((semantic-list "((node) ? \\
					 ((GNode*) (node))->next : NULL)" 8760 . 8809)))
          ("g_node_append_data" (spp-arg-list ("parent" "data") 6524 . 6538) . ((symbol "g_node_insert_before" 6548 . 6568) (semantic-list "((parent), NULL, g_node_new (data))" 6569 . 6604)))
          ("G_NODE_IS_ROOT" (spp-arg-list ("node") 2686 . 2692) . ((semantic-list "(((GNode*) (node))->parent == NULL && \\
				 ((GNode*) (node))->prev == NULL && \\
				 ((GNode*) (node))->next == NULL)" 2693 . 2812)))
          ("g_node_insert_data" (spp-arg-list ("parent" "position" "data") 5074 . 5098) . ((symbol "g_node_insert" 5107 . 5120) (semantic-list "((parent), (position), g_node_new (data))" 5121 . 5162)))
          ("g_node_prev_sibling" (spp-arg-list ("node") 8482 . 8488) . ((semantic-list "((node) ? \\
					 ((GNode*) (node))->prev : NULL)" 8489 . 8538)))
          ("G_NODE_IS_LEAF" (spp-arg-list ("node") 3015 . 3021) . ((semantic-list "(((GNode*) (node))->children == NULL)" 3022 . 3059)))
          ("g_node_first_child" (spp-arg-list ("node") 9023 . 9029) . ((semantic-list "((node) ? \\
					 ((GNode*) (node))->children : NULL)" 9030 . 9083)))
          )
)
    (semanticdb-table "goption.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_OPTION_H__" variable (:constant-flag t) nil [802 816])
            ("glib/gerror.h" include (:system-flag t) nil [939 963])
            ("glib/gquark.h" include (:system-flag t) nil [964 988])
            ((((0) "GOptionContext")) type (:superclasses ("_GOptionContext" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1213 1259])
            ((((0) "GOptionGroup")) type (:superclasses ("_GOptionGroup" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1701 1745])
            ((((0) "GOptionEntry")) type (:superclasses ("_GOptionEntry" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1746 1790])
            ((((0) "GOptionFlags")) type (:superclasses ("" type (:members (("G_OPTION_FLAG_NONE" variable (:constant-flag t :default-value (3378 3379) :type "int") (reparse-symbol enumsubparts) [3346 3379]) ("G_OPTION_FLAG_HIDDEN" variable (:constant-flag t :default-value (3407 3408) :type "int") (reparse-symbol enumsubparts) [3383 3408]) ("G_OPTION_FLAG_IN_MAIN" variable (:constant-flag t :default-value (3442 3443) :type "int") (reparse-symbol enumsubparts) [3417 3443]) ("G_OPTION_FLAG_REVERSE" variable (:constant-flag t :default-value (3477 3478) :type "int") (reparse-symbol enumsubparts) [3452 3478]) ("G_OPTION_FLAG_NO_ARG" variable (:constant-flag t :default-value (3511 3512) :type "int") (reparse-symbol enumsubparts) [3487 3512]) ("G_OPTION_FLAG_FILENAME" variable (:constant-flag t :default-value (3546 3547) :type "int") (reparse-symbol enumsubparts) [3521 3547]) ("G_OPTION_FLAG_OPTIONAL_ARG" variable (:constant-flag t :default-value (3588 3589) :type "int") (reparse-symbol enumsubparts) [3556 3589]) ("G_OPTION_FLAG_NOALIAS" variable (:constant-flag t :default-value (3630 3631) :type "int") (reparse-symbol enumsubparts) [3598 3631])) :type "enum") nil nil) :type "typedef") nil [3329 3652])
            ((((0) "GOptionArg")) type (:superclasses ("" type (:members (("G_OPTION_ARG_NONE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5083 5101]) ("G_OPTION_ARG_STRING" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5104 5124]) ("G_OPTION_ARG_INT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5127 5144]) ("G_OPTION_ARG_CALLBACK" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5147 5169]) ("G_OPTION_ARG_FILENAME" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5172 5194]) ("G_OPTION_ARG_STRING_ARRAY" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5197 5223]) ("G_OPTION_ARG_FILENAME_ARRAY" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5226 5254]) ("G_OPTION_ARG_DOUBLE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5257 5277]) ("G_OPTION_ARG_INT64" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5280 5300])) :type "enum") nil nil) :type "typedef") nil [5066 5312])
            ("G_OPTION_ERROR" variable (:constant-flag t) nil [7626 7640])
            ((((0) "GOptionError")) type (:superclasses ("" type (:members (("G_OPTION_ERROR_UNKNOWN_OPTION" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [8108 8138]) ("G_OPTION_ERROR_BAD_VALUE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [8141 8166]) ("G_OPTION_ERROR_FAILED" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [8169 8192])) :type "enum") nil nil) :type "typedef") nil [8091 8206])
            ("_GOptionEntry" type
               (:members (((("long_name" 1 nil nil nil)) variable (:constant-flag t :type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [10567 10590]) ((("short_name" 0 nil nil nil)) variable (:type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [10593 10617]) ((("flags" 0 nil nil nil)) variable (:type ("gint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [10620 10639]) ((("arg" 0 nil nil nil)) variable (:type ("GOptionArg" type (:type "class") nil nil)) (reparse-symbol classsubparts) [10643 10660]) ((("arg_data" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [10663 10685]) ((("description" 1 nil nil nil)) variable (:constant-flag t :type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [10691 10716]) ((("arg_description" 1 nil nil nil)) variable (:constant-flag t :type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [10719 10748]))
                :type "struct")
                nil [10542 10751])
            ("G_OPTION_REMAINING" variable (:constant-flag t) nil [11319 11337]))          
      :file "goption.h"
      :pointmax 16025
      :fsize 16024
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 15984 . 15995) (punctuation 15981 . 15982) (semantic-list 15915 . 15981) (symbol 15877 . 15914) (VOID 15863 . 15867) (symbol 15841 . 15862) (punctuation 15839 . 15840) (semantic-list 15691 . 15839) (symbol 15653 . 15686) (VOID 15639 . 15643) (symbol 15617 . 15638) (punctuation 15615 . 15616) (semantic-list 15548 . 15615) (symbol 15510 . 15536) (VOID 15496 . 15500) (symbol 15474 . 15495) (punctuation 15472 . 15473) (semantic-list 15445 . 15472) (symbol 15407 . 15427) (VOID 15393 . 15397) (symbol 15370 . 15392) (punctuation 15368 . 15369) (semantic-list 15341 . 15368) (symbol 15303 . 15321) (punctuation 15302 . 15303) (symbol 15289 . 15301) (symbol 15266 . 15288) (punctuation 15264 . 15265) (semantic-list 15237 . 15264) (symbol 15199 . 15218) (VOID 15185 . 15189) (symbol 15161 . 15184) (punctuation 15159 . 15160) (semantic-list 15091 . 15159) (symbol 15057 . 15086) (VOID 15046 . 15050) (symbol 15024 . 15045) (punctuation 15022 . 15023) (semantic-list 14902 . 15022) (symbol 14867 . 14897) (VOID 14856 . 14860) (symbol 14834 . 14855) (punctuation 14832 . 14833) (semantic-list 14631 . 14832) (symbol 14593 . 14611) (punctuation 14592 . 14593) (symbol 14579 . 14591) (symbol 14557 . 14578) (punctuation 14554 . 14555) (semantic-list 14385 . 14554) (symbol 14353 . 14378) (punctuation 14352 . 14353) (symbol 14339 . 14344) (symbol 14317 . 14338) (punctuation 14315 . 14316) (semantic-list 14290 . 14315) (symbol 14258 . 14289) (punctuation 14257 . 14258) (symbol 14244 . 14256) (symbol 14222 . 14243) (punctuation 14220 . 14221) (semantic-list 14160 . 14220) (symbol 14128 . 14159) (VOID 14114 . 14118) (symbol 14092 . 14113) (punctuation 14090 . 14091) (semantic-list 14035 . 14090) (symbol 14003 . 14029) (VOID 13987 . 13991) (symbol 13965 . 13986) (punctuation 13962 . 13963) (semantic-list 13903 . 13962) (symbol 13863 . 13902) (VOID 13847 . 13851) (symbol 13825 . 13846) (punctuation 13823 . 13824) (semantic-list 13673 . 13823) (symbol 13637 . 13672) (VOID 13621 . 13625) (symbol 13599 . 13620) (punctuation 13597 . 13598) (semantic-list 13405 . 13597) (symbol 13371 . 13398) (symbol 13355 . 13363) (symbol 13332 . 13354) (punctuation 13330 . 13331) (semantic-list 13191 . 13330) (symbol 13157 . 13179) (symbol 13141 . 13149) (symbol 13119 . 13140) (punctuation 13117 . 13118) (semantic-list 12998 . 13117) (symbol 12964 . 12997) (VOID 12948 . 12952) (symbol 12926 . 12947) (punctuation 12923 . 12924) (semantic-list 12898 . 12923) (symbol 12854 . 12887) (symbol 12838 . 12846) (symbol 12815 . 12837) (punctuation 12813 . 12814) (semantic-list 12697 . 12813) (symbol 12653 . 12686) (VOID 12637 . 12641) (symbol 12614 . 12636) (punctuation 12611 . 12612) (semantic-list 12586 . 12611) (symbol 12542 . 12585) (symbol 12526 . 12534) (symbol 12504 . 12525) (punctuation 12502 . 12503) (semantic-list 12435 . 12502) (symbol 12391 . 12434) (VOID 12385 . 12389) (symbol 12363 . 12384) (punctuation 12361 . 12362) (semantic-list 12331 . 12361) (symbol 12297 . 12330) (symbol 12288 . 12296) (symbol 12266 . 12287) (punctuation 12264 . 12265) (semantic-list 12201 . 12264) (symbol 12167 . 12200) (VOID 12161 . 12165) (symbol 12139 . 12160) (punctuation 12137 . 12138) (semantic-list 12107 . 12137) (symbol 12073 . 12094) (VOID 12057 . 12061) (symbol 12035 . 12056) (punctuation 12033 . 12034) (semantic-list 12004 . 12033) (symbol 11970 . 12002) (punctuation 11966 . 11967) (symbol 11960 . 11965) (CONST 11954 . 11959) (symbol 11932 . 11953) (punctuation 11930 . 11931) (semantic-list 11815 . 11930) (symbol 11781 . 11813) (VOID 11765 . 11769) (symbol 11743 . 11764) (punctuation 11741 . 11742) (semantic-list 11712 . 11741) (symbol 11678 . 11706) (punctuation 11674 . 11675) (symbol 11668 . 11673) (CONST 11662 . 11667) (symbol 11640 . 11661) (punctuation 11638 . 11639) (semantic-list 11527 . 11638) (symbol 11493 . 11521) (VOID 11477 . 11481) (symbol 11455 . 11476) (punctuation 11453 . 11454) (semantic-list 11414 . 11453) (symbol 11380 . 11400) (punctuation 11379 . 11380) (symbol 11364 . 11378) (symbol 11342 . 11363) (punctuation 8264 . 8265) (semantic-list 8258 . 8264) (symbol 8237 . 8257) (symbol 8230 . 8236) (symbol 8208 . 8229) (punctuation 7429 . 7430) (semantic-list 7318 . 7429) (semantic-list 7298 . 7317) (VOID 7293 . 7297) (TYPEDEF 7285 . 7292) (punctuation 6901 . 6902) (semantic-list 6779 . 6901) (semantic-list 6759 . 6778) (symbol 6750 . 6758) (TYPEDEF 6742 . 6749) (punctuation 6229 . 6230) (semantic-list 6108 . 6229) (semantic-list 6090 . 6107) (symbol 6081 . 6089) (TYPEDEF 6073 . 6080) (number 3635 . 3636) (punctuation 3633 . 3634) (punctuation 3632 . 3633) (number 3593 . 3594) (punctuation 3591 . 3592) (punctuation 3590 . 3591) (number 3551 . 3552) (punctuation 3549 . 3550) (punctuation 3548 . 3549) (number 3516 . 3517) (punctuation 3514 . 3515) (punctuation 3513 . 3514) (number 3482 . 3483) (punctuation 3480 . 3481) (punctuation 3479 . 3480) (number 3447 . 3448) (punctuation 3445 . 3446) (punctuation 3444 . 3445) (number 3412 . 3413) (punctuation 3410 . 3411) (punctuation 3409 . 3410) (symbol 990 . 1003) (string 889 . 930) (symbol 883 . 888) (punctuation 882 . 883))
      :lexical-table 
        '(("G_OPTION_ERROR" . ((semantic-list "(g_option_error_quark ())" 7641 . 7666)))
          ("__G_OPTION_H__")
          ("G_OPTION_REMAINING" . ((string "\"\"" 11338 . 11340)))
          )
)
    (semanticdb-table "gpattern.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_PATTERN_H__" variable (:constant-flag t) nil [824 839])
            ("glib/gtypes.h" include (:system-flag t) nil [962 986])
            ((((0) "GPatternSpec")) type (:superclasses ("_GPatternSpec" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1004 1049]))          
      :file "gpattern.h"
      :pointmax 1781
      :fsize 1780
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 1739 . 1750) (punctuation 1736 . 1737) (semantic-list 1686 . 1736) (symbol 1661 . 1683) (symbol 1647 . 1655) (symbol 1625 . 1646) (punctuation 1623 . 1624) (semantic-list 1575 . 1623) (symbol 1550 . 1572) (symbol 1536 . 1544) (symbol 1514 . 1535) (punctuation 1512 . 1513) (semantic-list 1394 . 1512) (symbol 1369 . 1384) (symbol 1355 . 1363) (symbol 1333 . 1354) (punctuation 1331 . 1332) (semantic-list 1282 . 1331) (symbol 1257 . 1277) (symbol 1243 . 1251) (symbol 1221 . 1242) (punctuation 1219 . 1220) (semantic-list 1198 . 1219) (symbol 1173 . 1192) (VOID 1159 . 1163) (symbol 1137 . 1158) (punctuation 1135 . 1136) (semantic-list 1112 . 1135) (symbol 1087 . 1105) (punctuation 1085 . 1086) (symbol 1073 . 1085) (symbol 1051 . 1072) (symbol 988 . 1001) (string 912 . 953) (symbol 906 . 911) (punctuation 905 . 906))
      :lexical-table 
        '(("__G_PATTERN_H__")
          )
)
    (semanticdb-table "gpoll.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_POLL_H__" variable (:constant-flag t) nil [772 784])
            ("glibconfig.h" include (:system-flag t) nil [934 957])
            ("glib/gtypes.h" include (:system-flag t) nil [958 982])
            ((((0) "GPollFD")) type (:superclasses ("_GPollFD" type (:prototype t :type "struct") nil nil) :type "typedef") nil [2360 2392])
            ("_GPollFD" type
               (:members (((("fd" 0 nil nil nil)) variable (:type ("gint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3761 3770]) ((("events" 0 nil nil nil)) variable (:type ("gushort" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3780 3796]) ((("revents" 0 nil nil nil)) variable (:type ("gushort" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3799 3816]))
                :type "struct")
                nil [3636 3819]))          
      :file "gpoll.h"
      :pointmax 4127
      :fsize 4126
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 4088 . 4099) (punctuation 4085 . 4086) (semantic-list 4036 . 4085) (symbol 4029 . 4035) (symbol 4024 . 4028) (symbol 4002 . 4023) (punctuation 3055 . 3056) (semantic-list 2940 . 3055) (semantic-list 2924 . 2936) (symbol 2916 . 2920) (TYPEDEF 2908 . 2915) (symbol 984 . 997) (string 884 . 925) (symbol 878 . 883) (punctuation 877 . 878))
      :lexical-table 
        '(("__G_POLL_H__")
          )
)
    (semanticdb-table "gprimes.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_PRIMES_H__" variable (:constant-flag t) nil [1085 1099])
            ("glib/gtypes.h" include (:system-flag t) nil [1222 1246])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [1637 1650]))          
      :file "gprimes.h"
      :pointmax 1693
      :fsize 1692
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 1652 . 1663) (semantic-list 1625 . 1636) (symbol 1601 . 1624) (symbol 1592 . 1597) (symbol 1570 . 1591) (symbol 1248 . 1261) (string 1172 . 1213) (symbol 1166 . 1171) (punctuation 1165 . 1166))
      :lexical-table 
        '(("__G_PRIMES_H__")
          )
)
    (semanticdb-table "gqsort.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_QSORT_H__" variable (:constant-flag t) nil [1085 1098])
            ("glib/gtypes.h" include (:system-flag t) nil [1221 1245]))          
      :file "gqsort.h"
      :pointmax 1498
      :fsize 1497
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 1458 . 1469) (punctuation 1455 . 1456) (semantic-list 1307 . 1455) (symbol 1289 . 1306) (VOID 1284 . 1288) (symbol 1262 . 1283) (symbol 1247 . 1260) (string 1171 . 1212) (symbol 1165 . 1170) (punctuation 1164 . 1165))
      :lexical-table 
        '(("__G_QSORT_H__")
          )
)
    (semanticdb-table "gquark.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_QUARK_H__" variable (:constant-flag t) nil [1084 1097])
            ("glib/gtypes.h" include (:system-flag t) nil [1220 1244])
            ((((0) "GQuark")) type (:superclasses ("guint32" type (:type "class") nil nil) :type "typedef") nil [1261 1284])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [1700 1713])
            ("G_DEFINE_QUARK" variable (:constant-flag t) nil [1723 1737]))          
      :file "gquark.h"
      :pointmax 2687
      :fsize 2686
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 2647 . 2658) (punctuation 2644 . 2645) (semantic-list 2623 . 2644) (symbol 2596 . 2618) (punctuation 2586 . 2587) (symbol 2580 . 2585) (CONST 2574 . 2579) (symbol 2552 . 2573) (punctuation 2550 . 2551) (semantic-list 2529 . 2550) (symbol 2502 . 2517) (punctuation 2492 . 2493) (symbol 2486 . 2491) (CONST 2480 . 2485) (symbol 2458 . 2479) (semantic-list 1679 . 1699) (symbol 1652 . 1669) (punctuation 1642 . 1643) (symbol 1636 . 1641) (CONST 1630 . 1635) (symbol 1608 . 1629) (punctuation 1606 . 1607) (semantic-list 1585 . 1606) (symbol 1558 . 1577) (symbol 1536 . 1542) (symbol 1514 . 1535) (punctuation 1512 . 1513) (semantic-list 1491 . 1512) (symbol 1464 . 1490) (symbol 1442 . 1448) (symbol 1420 . 1441) (punctuation 1418 . 1419) (semantic-list 1397 . 1418) (symbol 1370 . 1388) (symbol 1348 . 1354) (symbol 1326 . 1347) (symbol 1246 . 1259) (string 1170 . 1211) (symbol 1164 . 1169) (punctuation 1163 . 1164))
      :lexical-table 
        '(("G_DEFINE_QUARK" (spp-arg-list ("QN" "q_n") 1737 . 1746) . 
              ((symbol "GQuark" 1789 . 1795) (spp-symbol-merge ((symbol "q_n" 1863 . 1866) (symbol "_quark" 1868 . 1874)) 1863 . 1874) (semantic-list "(void)" 1875 . 1881) (semantic-list "{                                                                       \\
  static GQuark q;                                                      \\
                                                                        \\
  if G_UNLIKELY (q == 0)                                                \\
    q = g_quark_from_static_string (#QN);                               \\
                                                                        \\
  return q;                                                             \\
}" 1937 . 2456)))
          ("__G_QUARK_H__")
          )
)
    (semanticdb-table "gqueue.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_QUEUE_H__" variable (:constant-flag t) nil [1084 1097])
            ("glib/glist.h" include (:system-flag t) nil [1220 1243])
            ((((0) "GQueue")) type (:superclasses ("_GQueue" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1260 1290])
            ("_GQueue" type
               (:members (((("head" 1 nil nil nil)) variable (:type ("GList" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1561 1573]) ((("tail" 1 nil nil nil)) variable (:type ("GList" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1576 1588]) ((("length" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1591 1605]))
                :type "struct")
                nil [1542 1608])
            ("G_QUEUE_INIT" variable (:constant-flag t) nil [1951 1963]))          
      :file "gqueue.h"
      :pointmax 7135
      :fsize 7134
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 7095 . 7106) (punctuation 7092 . 7093) (semantic-list 7009 . 7092) (symbol 6986 . 7005) (VOID 6977 . 6981) (symbol 6955 . 6976) (punctuation 6953 . 6954) (semantic-list 6870 . 6953) (symbol 6847 . 6861) (VOID 6838 . 6842) (symbol 6816 . 6837) (punctuation 6814 . 6815) (semantic-list 6731 . 6814) (symbol 6708 . 6726) (symbol 6699 . 6703) (symbol 6677 . 6698) (punctuation 6675 . 6676) (semantic-list 6596 . 6675) (symbol 6573 . 6594) (punctuation 6569 . 6570) (symbol 6564 . 6569) (symbol 6542 . 6563) (punctuation 6540 . 6541) (semantic-list 6515 . 6540) (symbol 6492 . 6514) (punctuation 6488 . 6489) (symbol 6483 . 6488) (symbol 6461 . 6482) (punctuation 6459 . 6460) (semantic-list 6434 . 6459) (symbol 6411 . 6433) (punctuation 6407 . 6408) (symbol 6402 . 6407) (symbol 6380 . 6401) (punctuation 6378 . 6379) (semantic-list 6299 . 6378) (symbol 6276 . 6296) (punctuation 6272 . 6273) (symbol 6267 . 6272) (symbol 6245 . 6266) (punctuation 6243 . 6244) (semantic-list 6218 . 6243) (symbol 6195 . 6216) (punctuation 6191 . 6192) (symbol 6186 . 6191) (symbol 6164 . 6185) (punctuation 6162 . 6163) (semantic-list 6137 . 6162) (symbol 6114 . 6135) (punctuation 6110 . 6111) (symbol 6105 . 6110) (symbol 6083 . 6104) (punctuation 6081 . 6082) (semantic-list 5944 . 6081) (symbol 5921 . 5942) (VOID 5912 . 5916) (symbol 5890 . 5911) (punctuation 5888 . 5889) (semantic-list 5805 . 5888) (symbol 5782 . 5804) (VOID 5773 . 5777) (symbol 5751 . 5772) (punctuation 5749 . 5750) (semantic-list 5666 . 5749) (symbol 5643 . 5665) (VOID 5634 . 5638) (symbol 5612 . 5633) (punctuation 5609 . 5610) (semantic-list 5408 . 5609) (symbol 5385 . 5406) (VOID 5376 . 5380) (symbol 5354 . 5375) (punctuation 5352 . 5353) (semantic-list 5210 . 5352) (symbol 5187 . 5207) (VOID 5178 . 5182) (symbol 5156 . 5177) (punctuation 5154 . 5155) (semantic-list 5012 . 5154) (symbol 4989 . 5010) (VOID 4980 . 4984) (symbol 4958 . 4979) (punctuation 4956 . 4957) (semantic-list 4874 . 4956) (symbol 4851 . 4869) (symbol 4842 . 4847) (symbol 4820 . 4841) (punctuation 4818 . 4819) (semantic-list 4736 . 4818) (symbol 4713 . 4727) (symbol 4704 . 4712) (symbol 4682 . 4703) (punctuation 4680 . 4681) (semantic-list 4598 . 4680) (symbol 4575 . 4588) (symbol 4566 . 4570) (symbol 4544 . 4565) (punctuation 4542 . 4543) (semantic-list 4463 . 4542) (symbol 4440 . 4456) (symbol 4431 . 4439) (symbol 4409 . 4430) (punctuation 4407 . 4408) (semantic-list 4382 . 4407) (symbol 4359 . 4376) (symbol 4350 . 4358) (symbol 4328 . 4349) (punctuation 4326 . 4327) (semantic-list 4301 . 4326) (symbol 4278 . 4295) (symbol 4269 . 4277) (symbol 4247 . 4268) (punctuation 4245 . 4246) (semantic-list 4166 . 4245) (symbol 4143 . 4158) (symbol 4134 . 4142) (symbol 4112 . 4133) (punctuation 4110 . 4111) (semantic-list 4085 . 4110) (symbol 4062 . 4078) (symbol 4053 . 4061) (symbol 4031 . 4052) (punctuation 4029 . 4030) (semantic-list 4004 . 4029) (symbol 3981 . 3997) (symbol 3972 . 3980) (symbol 3950 . 3971) (punctuation 3948 . 3949) (semantic-list 3812 . 3948) (symbol 3789 . 3805) (VOID 3780 . 3784) (symbol 3758 . 3779) (punctuation 3756 . 3757) (semantic-list 3674 . 3756) (symbol 3651 . 3668) (VOID 3642 . 3646) (symbol 3620 . 3641) (punctuation 3618 . 3619) (semantic-list 3536 . 3618) (symbol 3513 . 3530) (VOID 3504 . 3508) (symbol 3482 . 3503) (punctuation 3479 . 3480) (semantic-list 3327 . 3479) (symbol 3304 . 3316) (VOID 3295 . 3299) (symbol 3273 . 3294) (punctuation 3271 . 3272) (semantic-list 3132 . 3271) (symbol 3109 . 3128) (punctuation 3106 . 3107) (symbol 3100 . 3105) (symbol 3078 . 3099) (punctuation 3076 . 3077) (semantic-list 2994 . 3076) (symbol 2971 . 2983) (punctuation 2968 . 2969) (symbol 2962 . 2967) (symbol 2940 . 2961) (punctuation 2938 . 2939) (semantic-list 2794 . 2938) (symbol 2771 . 2786) (VOID 2762 . 2766) (symbol 2740 . 2761) (punctuation 2738 . 2739) (semantic-list 2713 . 2738) (symbol 2690 . 2702) (punctuation 2688 . 2689) (symbol 2681 . 2687) (symbol 2659 . 2680) (punctuation 2657 . 2658) (semantic-list 2632 . 2657) (symbol 2609 . 2624) (VOID 2600 . 2604) (symbol 2578 . 2599) (punctuation 2576 . 2577) (semantic-list 2551 . 2576) (symbol 2528 . 2546) (symbol 2519 . 2524) (symbol 2497 . 2518) (punctuation 2495 . 2496) (semantic-list 2470 . 2495) (symbol 2447 . 2463) (symbol 2438 . 2446) (symbol 2416 . 2437) (punctuation 2414 . 2415) (semantic-list 2389 . 2414) (symbol 2366 . 2379) (VOID 2357 . 2361) (symbol 2335 . 2356) (punctuation 2333 . 2334) (semantic-list 2308 . 2333) (symbol 2285 . 2297) (VOID 2276 . 2280) (symbol 2254 . 2275) (punctuation 2252 . 2253) (semantic-list 2194 . 2252) (symbol 2171 . 2188) (VOID 2162 . 2166) (symbol 2140 . 2161) (punctuation 2138 . 2139) (semantic-list 2113 . 2138) (symbol 2090 . 2102) (VOID 2081 . 2085) (symbol 2059 . 2080) (punctuation 2057 . 2058) (semantic-list 2051 . 2057) (symbol 2028 . 2039) (punctuation 2025 . 2026) (symbol 2019 . 2025) (symbol 1997 . 2018) (symbol 1245 . 1258) (string 1170 . 1211) (symbol 1164 . 1169) (punctuation 1163 . 1164))
      :lexical-table 
        '(("G_QUEUE_INIT" . ((semantic-list "{ NULL, NULL, 0 }" 1964 . 1981)))
          ("__G_QUEUE_H__")
          )
)
    (semanticdb-table "grand.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_RAND_H__" variable (:constant-flag t) nil [1083 1095])
            ("glib/gtypes.h" include (:system-flag t) nil [1218 1242])
            ((((0) "GRand")) type (:superclasses ("_GRand" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1259 1297])
            ("g_rand_boolean" variable (:constant-flag t) nil [2254 2268])
            ("g_random_boolean" variable (:constant-flag t) nil [2775 2791]))          
      :file "grand.h"
      :pointmax 3181
      :fsize 3180
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 3142 . 3153) (punctuation 3138 . 3139) (semantic-list 3098 . 3138) (symbol 3076 . 3097) (symbol 3068 . 3075) (symbol 3046 . 3067) (punctuation 3044 . 3045) (semantic-list 3038 . 3044) (symbol 3016 . 3031) (symbol 3008 . 3015) (symbol 2986 . 3007) (punctuation 2984 . 2985) (semantic-list 2944 . 2984) (symbol 2922 . 2940) (symbol 2914 . 2920) (symbol 2892 . 2913) (punctuation 2890 . 2891) (semantic-list 2884 . 2890) (symbol 2862 . 2874) (symbol 2854 . 2861) (symbol 2832 . 2853) (punctuation 2764 . 2765) (semantic-list 2749 . 2764) (symbol 2727 . 2744) (VOID 2719 . 2723) (symbol 2697 . 2718) (punctuation 2695 . 2696) (semantic-list 2629 . 2695) (symbol 2607 . 2626) (symbol 2599 . 2606) (symbol 2577 . 2598) (punctuation 2575 . 2576) (semantic-list 2559 . 2575) (symbol 2537 . 2550) (symbol 2529 . 2536) (symbol 2507 . 2528) (punctuation 2505 . 2506) (semantic-list 2439 . 2505) (symbol 2417 . 2433) (symbol 2409 . 2415) (symbol 2387 . 2408) (punctuation 2385 . 2386) (semantic-list 2369 . 2385) (symbol 2347 . 2357) (symbol 2339 . 2346) (symbol 2317 . 2338) (punctuation 2243 . 2244) (semantic-list 2164 . 2243) (symbol 2142 . 2163) (VOID 2137 . 2141) (symbol 2115 . 2136) (punctuation 2113 . 2114) (semantic-list 2072 . 2113) (symbol 2050 . 2065) (VOID 2042 . 2046) (symbol 2020 . 2041) (punctuation 2018 . 2019) (semantic-list 2002 . 2018) (symbol 1980 . 1991) (punctuation 1977 . 1978) (symbol 1972 . 1977) (symbol 1950 . 1971) (punctuation 1948 . 1949) (semantic-list 1932 . 1948) (symbol 1910 . 1921) (VOID 1902 . 1906) (symbol 1880 . 1901) (punctuation 1878 . 1879) (semantic-list 1872 . 1878) (symbol 1850 . 1860) (punctuation 1847 . 1848) (symbol 1842 . 1847) (symbol 1820 . 1841) (punctuation 1818 . 1819) (semantic-list 1770 . 1818) (symbol 1743 . 1769) (punctuation 1740 . 1741) (symbol 1735 . 1740) (symbol 1713 . 1734) (punctuation 1711 . 1712) (semantic-list 1696 . 1711) (symbol 1674 . 1694) (punctuation 1671 . 1672) (symbol 1666 . 1671) (symbol 1644 . 1665) (symbol 1244 . 1257) (string 1168 . 1209) (symbol 1162 . 1167) (punctuation 1161 . 1162))
      :lexical-table 
        '(("g_rand_boolean" (spp-arg-list ("rand_") 2268 . 2275) . ((semantic-list "((g_rand_int (rand_) & (1 << 15)) != 0)" 2276 . 2315)))
          ("g_random_boolean" (spp-arg-list nil 2791 . 2793) . ((semantic-list "((g_random_int () & (1 << 15)) != 0)" 2794 . 2830)))
          ("__G_RAND_H__")
          )
)
    (semanticdb-table "gregex.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_REGEX_H__" variable (:constant-flag t) nil [1004 1017])
            ("glib/gerror.h" include (:system-flag t) nil [1140 1164])
            ("glib/gstring.h" include (:system-flag t) nil [1165 1190])
            ((((0) "GRegexError")) type (:superclasses ("" type (:members (("G_REGEX_ERROR_COMPILE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [7075 7097]) ("G_REGEX_ERROR_OPTIMIZE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [7100 7123]) ("G_REGEX_ERROR_REPLACE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [7126 7148]) ("G_REGEX_ERROR_MATCH" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [7151 7171]) ("G_REGEX_ERROR_INTERNAL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [7174 7197]) ("G_REGEX_ERROR_STRAY_BACKSLASH" variable (:constant-flag t :default-value (7283 7286) :type "int") (reparse-symbol enumsubparts) [7251 7286]) ("G_REGEX_ERROR_MISSING_CONTROL_CHAR" variable (:constant-flag t :default-value (7327 7330) :type "int") (reparse-symbol enumsubparts) [7290 7330]) ("G_REGEX_ERROR_UNRECOGNIZED_ESCAPE" variable (:constant-flag t :default-value (7370 7373) :type "int") (reparse-symbol enumsubparts) [7334 7373]) ("G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER" variable (:constant-flag t :default-value (7418 7421) :type "int") (reparse-symbol enumsubparts) [7377 7421]) ("G_REGEX_ERROR_QUANTIFIER_TOO_BIG" variable (:constant-flag t :default-value (7460 7463) :type "int") (reparse-symbol enumsubparts) [7425 7463]) ("G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS" variable (:constant-flag t :default-value (7512 7515) :type "int") (reparse-symbol enumsubparts) [7467 7515]) ("G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS" variable (:constant-flag t :default-value (7569 7572) :type "int") (reparse-symbol enumsubparts) [7519 7572]) ("G_REGEX_ERROR_RANGE_OUT_OF_ORDER" variable (:constant-flag t :default-value (7611 7614) :type "int") (reparse-symbol enumsubparts) [7576 7614]) ("G_REGEX_ERROR_NOTHING_TO_REPEAT" variable (:constant-flag t :default-value (7652 7655) :type "int") (reparse-symbol enumsubparts) [7618 7655]) ("G_REGEX_ERROR_UNRECOGNIZED_CHARACTER" variable (:constant-flag t :default-value (7698 7701) :type "int") (reparse-symbol enumsubparts) [7659 7701]) ("G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS" variable (:constant-flag t :default-value (7753 7756) :type "int") (reparse-symbol enumsubparts) [7705 7756]) ("G_REGEX_ERROR_UNMATCHED_PARENTHESIS" variable (:constant-flag t :default-value (7798 7801) :type "int") (reparse-symbol enumsubparts) [7760 7801]) ("G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE" variable (:constant-flag t :default-value (7853 7856) :type "int") (reparse-symbol enumsubparts) [7805 7856]) ("G_REGEX_ERROR_UNTERMINATED_COMMENT" variable (:constant-flag t :default-value (7897 7900) :type "int") (reparse-symbol enumsubparts) [7860 7900]) ("G_REGEX_ERROR_EXPRESSION_TOO_LARGE" variable (:constant-flag t :default-value (7941 7944) :type "int") (reparse-symbol enumsubparts) [7904 7944]) ("G_REGEX_ERROR_MEMORY_ERROR" variable (:constant-flag t :default-value (7977 7980) :type "int") (reparse-symbol enumsubparts) [7948 7980]) ("G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND" variable (:constant-flag t :default-value (8027 8030) :type "int") (reparse-symbol enumsubparts) [7984 8030]) ("G_REGEX_ERROR_MALFORMED_CONDITION" variable (:constant-flag t :default-value (8070 8073) :type "int") (reparse-symbol enumsubparts) [8034 8073]) ("G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES" variable (:constant-flag t :default-value (8123 8126) :type "int") (reparse-symbol enumsubparts) [8077 8126]) ("G_REGEX_ERROR_ASSERTION_EXPECTED" variable (:constant-flag t :default-value (8165 8168) :type "int") (reparse-symbol enumsubparts) [8130 8168]) ("G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME" variable (:constant-flag t :default-value (8213 8216) :type "int") (reparse-symbol enumsubparts) [8172 8216]) ("G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED" variable (:constant-flag t :default-value (8275 8278) :type "int") (reparse-symbol enumsubparts) [8220 8278]) ("G_REGEX_ERROR_HEX_CODE_TOO_LARGE" variable (:constant-flag t :default-value (8317 8320) :type "int") (reparse-symbol enumsubparts) [8282 8320]) ("G_REGEX_ERROR_INVALID_CONDITION" variable (:constant-flag t :default-value (8358 8361) :type "int") (reparse-symbol enumsubparts) [8324 8361]) ("G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND" variable (:constant-flag t :default-value (8413 8416) :type "int") (reparse-symbol enumsubparts) [8365 8416]) ("G_REGEX_ERROR_INFINITE_LOOP" variable (:constant-flag t :default-value (8450 8453) :type "int") (reparse-symbol enumsubparts) [8420 8453]) ("G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR" variable (:constant-flag t :default-value (8508 8511) :type "int") (reparse-symbol enumsubparts) [8457 8511]) ("G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME" variable (:constant-flag t :default-value (8557 8560) :type "int") (reparse-symbol enumsubparts) [8515 8560]) ("G_REGEX_ERROR_MALFORMED_PROPERTY" variable (:constant-flag t :default-value (8599 8602) :type "int") (reparse-symbol enumsubparts) [8564 8602]) ("G_REGEX_ERROR_UNKNOWN_PROPERTY" variable (:constant-flag t :default-value (8639 8642) :type "int") (reparse-symbol enumsubparts) [8606 8642]) ("G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG" variable (:constant-flag t :default-value (8687 8690) :type "int") (reparse-symbol enumsubparts) [8646 8690]) ("G_REGEX_ERROR_TOO_MANY_SUBPATTERNS" variable (:constant-flag t :default-value (8731 8734) :type "int") (reparse-symbol enumsubparts) [8694 8734]) ("G_REGEX_ERROR_INVALID_OCTAL_VALUE" variable (:constant-flag t :default-value (8774 8777) :type "int") (reparse-symbol enumsubparts) [8738 8777]) ("G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE" variable (:constant-flag t :default-value (8825 8828) :type "int") (reparse-symbol enumsubparts) [8781 8828]) ("G_REGEX_ERROR_DEFINE_REPETION" variable (:constant-flag t :default-value (8864 8867) :type "int") (reparse-symbol enumsubparts) [8832 8867]) ("G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS" variable (:constant-flag t :default-value (8916 8919) :type "int") (reparse-symbol enumsubparts) [8871 8919]) ("G_REGEX_ERROR_MISSING_BACK_REFERENCE" variable (:constant-flag t :default-value (8962 8965) :type "int") (reparse-symbol enumsubparts) [8923 8965]) ("G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE" variable (:constant-flag t :default-value (9012 9015) :type "int") (reparse-symbol enumsubparts) [8969 9015]) ("G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN" variable (:constant-flag t :default-value (9080 9083) :type "int") (reparse-symbol enumsubparts) [9019 9083]) ("G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB" variable (:constant-flag t :default-value (9138 9141) :type "int") (reparse-symbol enumsubparts) [9087 9141]) ("G_REGEX_ERROR_NUMBER_TOO_BIG" variable (:constant-flag t :default-value (9176 9179) :type "int") (reparse-symbol enumsubparts) [9145 9179]) ("G_REGEX_ERROR_MISSING_SUBPATTERN_NAME" variable (:constant-flag t :default-value (9223 9226) :type "int") (reparse-symbol enumsubparts) [9183 9226]) ("G_REGEX_ERROR_MISSING_DIGIT" variable (:constant-flag t :default-value (9260 9263) :type "int") (reparse-symbol enumsubparts) [9230 9263]) ("G_REGEX_ERROR_INVALID_DATA_CHARACTER" variable (:constant-flag t :default-value (9306 9309) :type "int") (reparse-symbol enumsubparts) [9267 9309]) ("G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME" variable (:constant-flag t :default-value (9351 9354) :type "int") (reparse-symbol enumsubparts) [9313 9354]) ("G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED" variable (:constant-flag t :default-value (9418 9421) :type "int") (reparse-symbol enumsubparts) [9358 9421]) ("G_REGEX_ERROR_INVALID_CONTROL_CHAR" variable (:constant-flag t :default-value (9462 9465) :type "int") (reparse-symbol enumsubparts) [9425 9465]) ("G_REGEX_ERROR_MISSING_NAME" variable (:constant-flag t :default-value (9498 9501) :type "int") (reparse-symbol enumsubparts) [9469 9501]) ("G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS" variable (:constant-flag t :default-value (9544 9547) :type "int") (reparse-symbol enumsubparts) [9505 9547]) ("G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES" variable (:constant-flag t :default-value (9595 9598) :type "int") (reparse-symbol enumsubparts) [9551 9598]) ("G_REGEX_ERROR_NAME_TOO_LONG" variable (:constant-flag t :default-value (9632 9635) :type "int") (reparse-symbol enumsubparts) [9602 9635]) ("G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE" variable (:constant-flag t :default-value (9681 9684) :type "int") (reparse-symbol enumsubparts) [9639 9684])) :type "enum") nil nil) :type "typedef") nil [7058 9699])
            ("G_REGEX_ERROR" variable (:constant-flag t) nil [9914 9927])
            ((((0) "GRegexCompileFlags")) type (:superclasses ("" type (:members (("G_REGEX_CASELESS" variable (:constant-flag t :default-value (14739 14740) :type "int") (reparse-symbol enumsubparts) [14711 14740]) ("G_REGEX_MULTILINE" variable (:constant-flag t :default-value (14777 14778) :type "int") (reparse-symbol enumsubparts) [14749 14778]) ("G_REGEX_DOTALL" variable (:constant-flag t :default-value (14815 14816) :type "int") (reparse-symbol enumsubparts) [14787 14816]) ("G_REGEX_EXTENDED" variable (:constant-flag t :default-value (14853 14854) :type "int") (reparse-symbol enumsubparts) [14825 14854]) ("G_REGEX_ANCHORED" variable (:constant-flag t :default-value (14891 14892) :type "int") (reparse-symbol enumsubparts) [14863 14892]) ("G_REGEX_DOLLAR_ENDONLY" variable (:constant-flag t :default-value (14929 14930) :type "int") (reparse-symbol enumsubparts) [14901 14930]) ("G_REGEX_UNGREEDY" variable (:constant-flag t :default-value (14967 14968) :type "int") (reparse-symbol enumsubparts) [14939 14968]) ("G_REGEX_RAW" variable (:constant-flag t :default-value (15005 15006) :type "int") (reparse-symbol enumsubparts) [14977 15006]) ("G_REGEX_NO_AUTO_CAPTURE" variable (:constant-flag t :default-value (15044 15045) :type "int") (reparse-symbol enumsubparts) [15016 15045]) ("G_REGEX_OPTIMIZE" variable (:constant-flag t :default-value (15083 15084) :type "int") (reparse-symbol enumsubparts) [15055 15084]) ("G_REGEX_FIRSTLINE" variable (:constant-flag t :default-value (15122 15123) :type "int") (reparse-symbol enumsubparts) [15094 15123]) ("G_REGEX_DUPNAMES" variable (:constant-flag t :default-value (15161 15162) :type "int") (reparse-symbol enumsubparts) [15133 15162]) ("G_REGEX_NEWLINE_CR" variable (:constant-flag t :default-value (15200 15201) :type "int") (reparse-symbol enumsubparts) [15172 15201]) ("G_REGEX_NEWLINE_LF" variable (:constant-flag t :default-value (15239 15240) :type "int") (reparse-symbol enumsubparts) [15211 15240]) ("G_REGEX_NEWLINE_CRLF" variable (:constant-flag t :default-value (15278 15317) :type "int") (reparse-symbol enumsubparts) [15250 15317]) ("G_REGEX_NEWLINE_ANYCRLF" variable (:constant-flag t :default-value (15349 15371) :type "int") (reparse-symbol enumsubparts) [15321 15371]) ("G_REGEX_BSR_ANYCRLF" variable (:constant-flag t :default-value (15409 15410) :type "int") (reparse-symbol enumsubparts) [15381 15410]) ("G_REGEX_JAVASCRIPT_COMPAT" variable (:constant-flag t :default-value (15448 15449) :type "int") (reparse-symbol enumsubparts) [15420 15449])) :type "enum") nil nil) :type "typedef") nil [14694 15477])
            ((((0) "GRegexMatchFlags")) type (:superclasses ("" type (:members (("G_REGEX_MATCH_ANCHORED" variable (:constant-flag t :default-value (19835 19836) :type "int") (reparse-symbol enumsubparts) [19802 19836]) ("G_REGEX_MATCH_NOTBOL" variable (:constant-flag t :default-value (19878 19879) :type "int") (reparse-symbol enumsubparts) [19845 19879]) ("G_REGEX_MATCH_NOTEOL" variable (:constant-flag t :default-value (19921 19922) :type "int") (reparse-symbol enumsubparts) [19888 19922]) ("G_REGEX_MATCH_NOTEMPTY" variable (:constant-flag t :default-value (19964 19965) :type "int") (reparse-symbol enumsubparts) [19931 19965]) ("G_REGEX_MATCH_PARTIAL" variable (:constant-flag t :default-value (20008 20009) :type "int") (reparse-symbol enumsubparts) [19975 20009]) ("G_REGEX_MATCH_NEWLINE_CR" variable (:constant-flag t :default-value (20052 20053) :type "int") (reparse-symbol enumsubparts) [20019 20053]) ("G_REGEX_MATCH_NEWLINE_LF" variable (:constant-flag t :default-value (20096 20097) :type "int") (reparse-symbol enumsubparts) [20063 20097]) ("G_REGEX_MATCH_NEWLINE_CRLF" variable (:constant-flag t :default-value (20140 20191) :type "int") (reparse-symbol enumsubparts) [20107 20191]) ("G_REGEX_MATCH_NEWLINE_ANY" variable (:constant-flag t :default-value (20228 20229) :type "int") (reparse-symbol enumsubparts) [20195 20229]) ("G_REGEX_MATCH_NEWLINE_ANYCRLF" variable (:constant-flag t :default-value (20272 20324) :type "int") (reparse-symbol enumsubparts) [20239 20324]) ("G_REGEX_MATCH_BSR_ANYCRLF" variable (:constant-flag t :default-value (20361 20362) :type "int") (reparse-symbol enumsubparts) [20328 20362]) ("G_REGEX_MATCH_BSR_ANY" variable (:constant-flag t :default-value (20405 20406) :type "int") (reparse-symbol enumsubparts) [20372 20406]) ("G_REGEX_MATCH_PARTIAL_SOFT" variable (:constant-flag t :default-value (20449 20470) :type "int") (reparse-symbol enumsubparts) [20416 20470]) ("G_REGEX_MATCH_PARTIAL_HARD" variable (:constant-flag t :default-value (20507 20508) :type "int") (reparse-symbol enumsubparts) [20474 20508]) ("G_REGEX_MATCH_NOTEMPTY_ATSTART" variable (:constant-flag t :default-value (20551 20552) :type "int") (reparse-symbol enumsubparts) [20518 20552])) :type "enum") nil nil) :type "typedef") nil [19785 20578])
            ((((0) "GRegex")) type (:superclasses ("_GRegex" type (:prototype t :type "struct") nil nil) :type "typedef") nil [20760 20791])
            ((((0) "GMatchInfo")) type (:superclasses ("_GMatchInfo" type (:prototype t :type "struct") nil nil) :type "typedef") nil [20901 20939]))          
      :file "gregex.h"
      :pointmax 28162
      :fsize 28161
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 28120 . 28131) (punctuation 28117 . 28118) (semantic-list 28084 . 28117) (symbol 28061 . 28083) (punctuation 28060 . 28061) (punctuation 28059 . 28060) (symbol 28052 . 28057) (symbol 28030 . 28051) (punctuation 28028 . 28029) (semantic-list 27885 . 28028) (symbol 27856 . 27884) (symbol 27845 . 27853) (symbol 27823 . 27844) (punctuation 27821 . 27822) (semantic-list 27754 . 27821) (symbol 27729 . 27753) (punctuation 27728 . 27729) (symbol 27720 . 27725) (symbol 27698 . 27719) (punctuation 27696 . 27697) (semantic-list 27548 . 27696) (symbol 27525 . 27547) (symbol 27514 . 27522) (symbol 27492 . 27513) (punctuation 27490 . 27491) (semantic-list 27418 . 27490) (symbol 27398 . 27416) (punctuation 27397 . 27398) (symbol 27389 . 27394) (symbol 27367 . 27388) (punctuation 27365 . 27366) (semantic-list 27251 . 27365) (symbol 27221 . 27251) (punctuation 27220 . 27221) (symbol 27212 . 27217) (symbol 27190 . 27211) (punctuation 27188 . 27189) (semantic-list 27155 . 27188) (symbol 27125 . 27154) (symbol 27114 . 27122) (symbol 27092 . 27113) (punctuation 27090 . 27091) (semantic-list 27057 . 27090) (symbol 27028 . 27056) (symbol 27020 . 27024) (symbol 26998 . 27019) (punctuation 26996 . 26997) (semantic-list 26963 . 26996) (symbol 26941 . 26961) (symbol 26930 . 26938) (symbol 26908 . 26929) (punctuation 26906 . 26907) (semantic-list 26838 . 26906) (symbol 26819 . 26836) (symbol 26808 . 26816) (symbol 26786 . 26807) (punctuation 26784 . 26785) (semantic-list 26751 . 26784) (symbol 26732 . 26749) (VOID 26724 . 26728) (symbol 26702 . 26723) (punctuation 26700 . 26701) (semantic-list 26667 . 26700) (symbol 26637 . 26655) (VOID 26619 . 26623) (symbol 26597 . 26618) (punctuation 26595 . 26596) (semantic-list 26562 . 26595) (symbol 26532 . 26548) (punctuation 26531 . 26532) (symbol 26514 . 26524) (symbol 26492 . 26513) (punctuation 26489 . 26490) (semantic-list 26456 . 26489) (symbol 26426 . 26449) (punctuation 26425 . 26426) (symbol 26414 . 26419) (CONST 26408 . 26413) (symbol 26386 . 26407) (punctuation 26384 . 26385) (semantic-list 26351 . 26384) (symbol 26328 . 26350) (punctuation 26327 . 26328) (symbol 26318 . 26324) (symbol 26296 . 26317) (punctuation 26276 . 26277) (semantic-list 26163 . 26276) (symbol 26137 . 26162) (symbol 26126 . 26134) (symbol 26104 . 26125) (punctuation 26102 . 26103) (semantic-list 25803 . 26102) (symbol 25781 . 25801) (punctuation 25780 . 25781) (symbol 25772 . 25777) (symbol 25750 . 25771) (punctuation 25748 . 25749) (semantic-list 25481 . 25748) (symbol 25457 . 25480) (punctuation 25456 . 25457) (symbol 25448 . 25453) (symbol 25426 . 25447) (punctuation 25424 . 25425) (semantic-list 25157 . 25424) (symbol 25140 . 25155) (punctuation 25139 . 25140) (symbol 25131 . 25136) (symbol 25109 . 25130) (punctuation 25080 . 25081) (semantic-list 24814 . 25080) (symbol 24794 . 24812) (punctuation 24793 . 24794) (punctuation 24792 . 24793) (symbol 24785 . 24790) (symbol 24763 . 24784) (punctuation 24761 . 24762) (semantic-list 24654 . 24761) (symbol 24638 . 24651) (punctuation 24637 . 24638) (punctuation 24636 . 24637) (symbol 24629 . 24634) (symbol 24607 . 24628) (punctuation 24605 . 24606) (semantic-list 24451 . 24605) (symbol 24429 . 24449) (punctuation 24428 . 24429) (punctuation 24427 . 24428) (symbol 24420 . 24425) (symbol 24398 . 24419) (punctuation 24371 . 24372) (semantic-list 24105 . 24371) (symbol 24082 . 24104) (symbol 24071 . 24079) (symbol 24049 . 24070) (punctuation 24047 . 24048) (semantic-list 23900 . 24047) (symbol 23881 . 23898) (symbol 23870 . 23878) (symbol 23848 . 23869) (punctuation 23846 . 23847) (semantic-list 23580 . 23846) (symbol 23560 . 23578) (symbol 23549 . 23557) (symbol 23527 . 23548) (punctuation 23525 . 23526) (semantic-list 23378 . 23525) (symbol 23362 . 23375) (symbol 23351 . 23359) (symbol 23329 . 23350) (punctuation 23327 . 23328) (semantic-list 23173 . 23327) (symbol 23151 . 23171) (symbol 23140 . 23148) (symbol 23118 . 23139) (punctuation 23099 . 23100) (semantic-list 23071 . 23099) (symbol 23042 . 23065) (symbol 23023 . 23039) (symbol 23001 . 23022) (punctuation 22999 . 23000) (semantic-list 22971 . 22999) (symbol 22942 . 22967) (symbol 22923 . 22941) (symbol 22901 . 22922) (punctuation 22898 . 22899) (semantic-list 22833 . 22898) (symbol 22813 . 22831) (punctuation 22812 . 22813) (symbol 22804 . 22809) (symbol 22782 . 22803) (punctuation 22780 . 22781) (semantic-list 22715 . 22780) (symbol 22692 . 22713) (punctuation 22691 . 22692) (symbol 22683 . 22688) (symbol 22661 . 22682) (punctuation 22659 . 22660) (semantic-list 22596 . 22659) (symbol 22570 . 22595) (symbol 22562 . 22566) (symbol 22540 . 22561) (punctuation 22538 . 22539) (semantic-list 22510 . 22538) (symbol 22480 . 22506) (symbol 22462 . 22466) (symbol 22439 . 22461) (punctuation 22437 . 22438) (semantic-list 22409 . 22437) (symbol 22379 . 22403) (symbol 22361 . 22369) (symbol 22339 . 22360) (punctuation 22337 . 22338) (semantic-list 22309 . 22337) (symbol 22283 . 22308) (symbol 22275 . 22279) (symbol 22253 . 22274) (punctuation 22251 . 22252) (semantic-list 22223 . 22251) (symbol 22199 . 22222) (symbol 22191 . 22195) (symbol 22169 . 22190) (punctuation 22167 . 22168) (semantic-list 22139 . 22167) (symbol 22118 . 22137) (punctuation 22117 . 22118) (symbol 22110 . 22115) (CONST 22104 . 22109) (symbol 22082 . 22103) (punctuation 22080 . 22081) (semantic-list 22052 . 22080) (symbol 22036 . 22049) (VOID 22028 . 22032) (symbol 22006 . 22027) (punctuation 22004 . 22005) (semantic-list 21976 . 22004) (symbol 21962 . 21973) (punctuation 21961 . 21962) (symbol 21944 . 21950) (symbol 21922 . 21943) (punctuation 21920 . 21921) (semantic-list 21767 . 21920) (symbol 21753 . 21764) (punctuation 21752 . 21753) (symbol 21743 . 21749) (symbol 21721 . 21742) (punctuation 21717 . 21718) (semantic-list 21618 . 21717) (semantic-list 21595 . 21616) (symbol 21586 . 21594) (TYPEDEF 21578 . 21585) (number 20556 . 20558) (punctuation 20554 . 20555) (punctuation 20553 . 20554) (number 20512 . 20514) (punctuation 20510 . 20511) (punctuation 20509 . 20510) (number 20410 . 20412) (punctuation 20408 . 20409) (punctuation 20407 . 20408) (number 20366 . 20368) (punctuation 20364 . 20365) (punctuation 20363 . 20364) (number 20233 . 20235) (punctuation 20231 . 20232) (punctuation 20230 . 20231) (number 20101 . 20103) (punctuation 20099 . 20100) (punctuation 20098 . 20099) (number 20057 . 20059) (punctuation 20055 . 20056) (punctuation 20054 . 20055) (number 20013 . 20015) (punctuation 20011 . 20012) (punctuation 20010 . 20011) (number 19969 . 19971) (punctuation 19967 . 19968) (punctuation 19966 . 19967) (number 19926 . 19927) (punctuation 19924 . 19925) (punctuation 19923 . 19924) (number 19883 . 19884) (punctuation 19881 . 19882) (punctuation 19880 . 19881) (number 19840 . 19841) (punctuation 19838 . 19839) (punctuation 19837 . 19838) (number 15453 . 15455) (punctuation 15451 . 15452) (punctuation 15450 . 15451) (number 15414 . 15416) (punctuation 15412 . 15413) (punctuation 15411 . 15412) (number 15375 . 15377) (punctuation 15373 . 15374) (punctuation 15372 . 15373) (number 15244 . 15246) (punctuation 15242 . 15243) (punctuation 15241 . 15242) (number 15205 . 15207) (punctuation 15203 . 15204) (punctuation 15202 . 15203) (number 15166 . 15168) (punctuation 15164 . 15165) (punctuation 15163 . 15164) (number 15127 . 15129) (punctuation 15125 . 15126) (punctuation 15124 . 15125) (number 15088 . 15090) (punctuation 15086 . 15087) (punctuation 15085 . 15086) (number 15049 . 15051) (punctuation 15047 . 15048) (punctuation 15046 . 15047) (number 15010 . 15012) (punctuation 15008 . 15009) (punctuation 15007 . 15008) (number 14972 . 14973) (punctuation 14970 . 14971) (punctuation 14969 . 14970) (number 14934 . 14935) (punctuation 14932 . 14933) (punctuation 14931 . 14932) (number 14896 . 14897) (punctuation 14894 . 14895) (punctuation 14893 . 14894) (number 14858 . 14859) (punctuation 14856 . 14857) (punctuation 14855 . 14856) (number 14820 . 14821) (punctuation 14818 . 14819) (punctuation 14817 . 14818) (number 14782 . 14783) (punctuation 14780 . 14781) (punctuation 14779 . 14780) (number 14744 . 14745) (punctuation 14742 . 14743) (punctuation 14741 . 14742) (punctuation 10007 . 10008) (semantic-list 10001 . 10007) (symbol 9981 . 10000) (symbol 9974 . 9980) (symbol 9952 . 9973) (symbol 1192 . 1205) (string 1090 . 1131) (symbol 1084 . 1089) (punctuation 1083 . 1084))
      :lexical-table 
        '(("__G_REGEX_H__")
          ("G_REGEX_ERROR" . ((symbol "g_regex_error_quark" 9928 . 9947) (semantic-list "()" 9948 . 9950)))
          )
)
    (semanticdb-table "gscanner.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_SCANNER_H__" variable (:constant-flag t) nil [1086 1101])
            ("glib/gdataset.h" include (:system-flag t) nil [1224 1250])
            ("glib/ghash.h" include (:system-flag t) nil [1251 1274])
            ((((0) "GScanner")) type (:superclasses ("_GScanner" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1291 1325])
            ((((0) "GScannerConfig")) type (:superclasses ("_GScannerConfig" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1326 1372])
            ((((0) "GTokenValue")) type (:superclasses ("_GTokenValue" type (:type "union") nil nil) :type "typedef") nil [1373 1417])
            ("G_CSET_A_2_Z" variable (:constant-flag t) nil [1625 1637])
            ("G_CSET_a_2_z" variable (:constant-flag t) nil [1675 1687])
            ("G_CSET_DIGITS" variable (:constant-flag t) nil [1725 1738])
            ("G_CSET_LATINC" variable (:constant-flag t) nil [1760 1773])
            ("G_CSET_LATINS" variable (:constant-flag t) nil [1926 1939])
            ((((0) "GErrorType")) type (:superclasses ("" type (:members (("G_ERR_UNKNOWN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2128 2142]) ("G_ERR_UNEXP_EOF" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2145 2161]) ("G_ERR_UNEXP_EOF_IN_STRING" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2164 2190]) ("G_ERR_UNEXP_EOF_IN_COMMENT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2193 2220]) ("G_ERR_NON_DIGIT_IN_CONST" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2223 2248]) ("G_ERR_DIGIT_RADIX" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2251 2269]) ("G_ERR_FLOAT_RADIX" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2272 2290]) ("G_ERR_FLOAT_MALFORMED" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2293 2316])) :type "enum") nil nil) :type "typedef") nil [2111 2328])
            ((((0) "GTokenType")) type (:superclasses ("" type (:members (("G_TOKEN_EOF" variable (:constant-flag t :default-value (2383 2384) :type "int") (reparse-symbol enumsubparts) [2365 2384]) ("G_TOKEN_LEFT_PAREN" variable (:constant-flag t :default-value (2413 2416) :type "int") (reparse-symbol enumsubparts) [2391 2416]) ("G_TOKEN_RIGHT_PAREN" variable (:constant-flag t :default-value (2443 2446) :type "int") (reparse-symbol enumsubparts) [2420 2446]) ("G_TOKEN_LEFT_CURLY" variable (:constant-flag t :default-value (2472 2475) :type "int") (reparse-symbol enumsubparts) [2450 2475]) ("G_TOKEN_RIGHT_CURLY" variable (:constant-flag t :default-value (2502 2505) :type "int") (reparse-symbol enumsubparts) [2479 2505]) ("G_TOKEN_LEFT_BRACE" variable (:constant-flag t :default-value (2531 2534) :type "int") (reparse-symbol enumsubparts) [2509 2534]) ("G_TOKEN_RIGHT_BRACE" variable (:constant-flag t :default-value (2561 2564) :type "int") (reparse-symbol enumsubparts) [2538 2564]) ("G_TOKEN_EQUAL_SIGN" variable (:constant-flag t :default-value (2590 2593) :type "int") (reparse-symbol enumsubparts) [2568 2593]) ("G_TOKEN_COMMA" variable (:constant-flag t :default-value (2615 2618) :type "int") (reparse-symbol enumsubparts) [2597 2618]) ("G_TOKEN_NONE" variable (:constant-flag t :default-value (2642 2645) :type "int") (reparse-symbol enumsubparts) [2625 2645]) ("G_TOKEN_ERROR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2652 2666]) ("G_TOKEN_CHAR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2672 2685]) ("G_TOKEN_BINARY" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2688 2703]) ("G_TOKEN_OCTAL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2706 2720]) ("G_TOKEN_INT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2723 2735]) ("G_TOKEN_HEX" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2738 2750]) ("G_TOKEN_FLOAT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2753 2767]) ("G_TOKEN_STRING" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2770 2785]) ("G_TOKEN_SYMBOL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2791 2806]) ("G_TOKEN_IDENTIFIER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2809 2828]) ("G_TOKEN_IDENTIFIER_NULL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2831 2855]) ("G_TOKEN_COMMENT_SINGLE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2861 2884]) ("G_TOKEN_COMMENT_MULTI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2887 2909]) ("G_TOKEN_LAST" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2931 2945])) :type "enum") nil nil) :type "typedef") nil [2348 2957])
            ("_GTokenValue" type
               (:members (((("v_symbol" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2982 3000]) ((("v_identifier" 1 nil nil nil)) variable (:type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3003 3024]) ((("v_binary" 0 nil nil nil)) variable (:type ("gulong" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3027 3043]) ((("v_octal" 0 nil nil nil)) variable (:type ("gulong" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3046 3061]) ((("v_int" 0 nil nil nil)) variable (:type ("gulong" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3064 3077]) ((("v_int64" 0 nil nil nil)) variable (:type ("guint64" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3080 3102]) ((("v_float" 0 nil nil nil)) variable (:type ("gdouble" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3105 3121]) ((("v_hex" 0 nil nil nil)) variable (:type ("gulong" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3124 3137]) ((("v_string" 1 nil nil nil)) variable (:type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3140 3157]) ((("v_comment" 1 nil nil nil)) variable (:type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3160 3178]) ((("v_char" 0 nil nil nil)) variable (:type ("guchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3181 3195]) ((("v_error" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3198 3213]))
                :type "union")
                nil [2959 3216])
            ("_GScannerConfig" type
               (:members (((("cset_skip_characters" 1 nil nil nil)) variable (:type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3271 3300]) ((("cset_identifier_first" 1 nil nil nil)) variable (:type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3327 3357]) ((("cset_identifier_nth" 1 nil nil nil)) variable (:type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3360 3388]) ((("cpair_comment_single" 1 nil nil nil)) variable (:type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3391 3420]) ((("case_sensitive" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3501 3527]) ((("skip_comment_multi" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3625 3655]) ((("skip_comment_single" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3680 3711]) ((("scan_comment_multi" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3740 3770]) ((("scan_identifier" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3806 3833]) ((("scan_identifier_1char" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3836 3869]) ((("scan_identifier_NULL" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3872 3904]) ((("scan_symbols" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3907 3931]) ((("scan_binary" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3934 3957]) ((("scan_octal" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3960 3982]) ((("scan_float" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3985 4007]) ((("scan_hex" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4010 4030]) ((("scan_hex_dollar" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4050 4077]) ((("scan_string_sq" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4095 4121]) ((("scan_string_dq" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4150 4176]) ((("numbers_2_int" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4210 4235]) ((("int_2_float" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4268 4291]) ((("identifier_2_string" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4323 4354]) ((("char_2_token" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4357 4381]) ((("symbol_2_token" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4412 4438]) ((("scope_0_fallback" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4441 4469]) ((("store_int64" 0 "1" nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4503 4526]) ((("padding_dummy" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4592 4613]))
                :type "struct")
                nil [3218 4616])
            ("_GScanner" type
               (:members (((("user_data" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4661 4681]) ((("max_parse_errors" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4684 4709]) ((("parse_errors" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4763 4784]) ((("input_name" 1 nil nil nil)) variable (:constant-flag t :type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4860 4885]) ((("qdata" 1 nil nil nil)) variable (:type ("GData" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4912 4927]) ((("config" 1 nil nil nil)) variable (:type ("GScannerConfig" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4977 5000]) ((("token" 0 nil nil nil)) variable (:type ("GTokenType" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5064 5082]) ((("value" 0 nil nil nil)) variable (:type ("GTokenValue" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5085 5104]) ((("line" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5107 5120]) ((("position" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5123 5140]) ((("next_token" 0 nil nil nil)) variable (:type ("GTokenType" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5205 5228]) ((("next_value" 0 nil nil nil)) variable (:type ("GTokenValue" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5231 5255]) ((("next_line" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5258 5276]) ((("next_position" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5279 5301]) ((("symbol_table" 1 nil nil nil)) variable (:type ("GHashTable" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5356 5382]) ((("input_fd" 0 nil nil nil)) variable (:type ("gint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5385 5401]) ((("text" 1 nil nil nil)) variable (:constant-flag t :type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5404 5423]) ((("text_end" 1 nil nil nil)) variable (:constant-flag t :type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5426 5449]) ((("buffer" 1 nil nil nil)) variable (:type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5452 5468]) ((("scope_id" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5471 5488]) ((("msg_handler" 0 nil nil nil)) variable (:type ("GScannerMsgFunc" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5555 5583]))
                :type "struct")
                nil [4618 5586])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [7698 7718])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [7824 7844])
            ("g_scanner_add_symbol" variable (:constant-flag t) nil [7926 7946])
            ("g_scanner_remove_symbol" variable (:constant-flag t) nil [8078 8101])
            ("g_scanner_foreach_symbol" variable (:constant-flag t) nil [8220 8244])
            ("g_scanner_freeze_symbol_table" variable (:constant-flag t) nil [8490 8519])
            ("g_scanner_thaw_symbol_table" variable (:constant-flag t) nil [8547 8574]))          
      :file "gscanner.h"
      :pointmax 8672
      :fsize 8671
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 8630 . 8641) (number 7841 . 7842) (number 7839 . 7840) (semantic-list 7764 . 7823) (symbol 7747 . 7761) (VOID 7741 . 7745) (symbol 7719 . 7740) (number 7715 . 7716) (number 7713 . 7714) (semantic-list 7638 . 7697) (symbol 7620 . 7635) (VOID 7614 . 7618) (symbol 7592 . 7613) (punctuation 7590 . 7591) (semantic-list 7381 . 7590) (symbol 7358 . 7379) (VOID 7352 . 7356) (symbol 7330 . 7351) (punctuation 7328 . 7329) (semantic-list 7281 . 7328) (symbol 7256 . 7279) (symbol 7247 . 7255) (symbol 7225 . 7246) (punctuation 7223 . 7224) (semantic-list 7129 . 7223) (symbol 7098 . 7128) (VOID 7092 . 7096) (symbol 7070 . 7091) (punctuation 7068 . 7069) (semantic-list 6996 . 7068) (symbol 6966 . 6995) (symbol 6957 . 6965) (symbol 6935 . 6956) (punctuation 6933 . 6934) (semantic-list 6861 . 6933) (symbol 6831 . 6860) (VOID 6825 . 6829) (symbol 6803 . 6824) (punctuation 6801 . 6802) (semantic-list 6706 . 6801) (symbol 6679 . 6705) (VOID 6673 . 6677) (symbol 6651 . 6672) (punctuation 6649 . 6650) (semantic-list 6605 . 6649) (symbol 6584 . 6603) (symbol 6577 . 6582) (symbol 6555 . 6576) (punctuation 6553 . 6554) (semantic-list 6534 . 6553) (symbol 6518 . 6531) (symbol 6509 . 6517) (symbol 6487 . 6508) (punctuation 6485 . 6486) (semantic-list 6466 . 6485) (symbol 6442 . 6464) (symbol 6435 . 6440) (symbol 6413 . 6434) (punctuation 6411 . 6412) (semantic-list 6392 . 6411) (symbol 6372 . 6390) (symbol 6365 . 6370) (symbol 6343 . 6364) (punctuation 6341 . 6342) (semantic-list 6322 . 6341) (symbol 6301 . 6320) (symbol 6289 . 6300) (symbol 6267 . 6288) (punctuation 6265 . 6266) (semantic-list 6246 . 6265) (symbol 6225 . 6244) (symbol 6214 . 6224) (symbol 6192 . 6213) (punctuation 6190 . 6191) (semantic-list 6171 . 6190) (symbol 6145 . 6170) (symbol 6134 . 6144) (symbol 6112 . 6133) (punctuation 6110 . 6111) (semantic-list 6091 . 6110) (symbol 6066 . 6090) (symbol 6055 . 6065) (symbol 6033 . 6054) (punctuation 6031 . 6032) (semantic-list 5962 . 6031) (symbol 5940 . 5960) (VOID 5934 . 5938) (symbol 5912 . 5933) (punctuation 5910 . 5911) (semantic-list 5891 . 5910) (symbol 5864 . 5890) (VOID 5858 . 5862) (symbol 5836 . 5857) (punctuation 5834 . 5835) (semantic-list 5792 . 5834) (symbol 5770 . 5790) (VOID 5764 . 5768) (symbol 5742 . 5763) (punctuation 5740 . 5741) (semantic-list 5721 . 5740) (symbol 5702 . 5719) (VOID 5696 . 5700) (symbol 5674 . 5695) (punctuation 5672 . 5673) (semantic-list 5636 . 5672) (symbol 5620 . 5633) (punctuation 5618 . 5619) (symbol 5610 . 5618) (symbol 5588 . 5609) (punctuation 1529 . 1530) (semantic-list 1452 . 1529) (semantic-list 1433 . 1451) (VOID 1427 . 1431) (TYPEDEF 1419 . 1426) (symbol 1276 . 1289) (string 1174 . 1215) (symbol 1168 . 1173) (punctuation 1167 . 1168))
      :lexical-table 
        '(("g_scanner_foreach_symbol" (spp-arg-list ("scanner" "func" "data") 8244 . 8267) . 
              ((symbol "G_STMT_START" 8268 . 8280) (semantic-list "{ \\
  g_scanner_scope_foreach_symbol ((scanner), 0, (func), (data)); \\
}" 8281 . 8353) (symbol "G_STMT_END" 8354 . 8364)))
          ("G_CSET_DIGITS" . ((string "\"0123456789\"" 1739 . 1751)))
          ("g_scanner_freeze_symbol_table" (spp-arg-list ("scanner") 8519 . 8528) . ((semantic-list "((void)0)" 8529 . 8538)))
          ("__G_SCANNER_H__")
          ("G_CSET_LATINC" . 
              ((string "\"\\300\\301\\302\\303\\304\\305\\306\"" 1774 . 1804) (string "\"\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\"" 1809 . 1851) (string "\"\\321\\322\\323\\324\\325\\326\"" 1856 . 1882) (string "\"\\330\\331\\332\\333\\334\\335\\336\"" 1887 . 1917)))
          ("g_scanner_add_symbol" (spp-arg-list ("scanner" "symbol" "value") 7946 . 7972) . 
              ((symbol "G_STMT_START" 7973 . 7985) (semantic-list "{ \\
  g_scanner_scope_add_symbol ((scanner), 0, (symbol), (value)); \\
}" 7986 . 8057) (symbol "G_STMT_END" 8058 . 8068)))
          ("g_scanner_thaw_symbol_table" (spp-arg-list ("scanner") 8574 . 8583) . ((semantic-list "((void)0)" 8584 . 8593)))
          ("G_CSET_a_2_z" . ((string "\"abcdefghijklmnopqrstuvwxyz\"" 1688 . 1716)))
          ("G_CSET_LATINS" . 
              ((string "\"\\337\\340\\341\\342\\343\\344\\345\\346\"" 1940 . 1974) (string "\"\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\"" 1979 . 2021) (string "\"\\361\\362\\363\\364\\365\\366\"" 2026 . 2052) (string "\"\\370\\371\\372\\373\\374\\375\\376\\377\"" 2057 . 2091)))
          ("G_CSET_A_2_Z" . ((string "\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"" 1638 . 1666)))
          ("g_scanner_remove_symbol" (spp-arg-list ("scanner" "symbol") 8101 . 8120) . 
              ((symbol "G_STMT_START" 8121 . 8133) (semantic-list "{ \\
  g_scanner_scope_remove_symbol ((scanner), 0, (symbol)); \\
}" 8134 . 8199) (symbol "G_STMT_END" 8200 . 8210)))
          )
)
    (semanticdb-table "gsequence.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_SEQUENCE_H__" variable (:constant-flag t) nil [857 873])
            ("glib/gtypes.h" include (:system-flag t) nil [996 1020])
            ((((0) "GSequence")) type (:superclasses ("_GSequence" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1037 1078])
            ((((0) "GSequenceIter")) type (:superclasses ("_GSequenceNode" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1079 1124]))          
      :file "gsequence.h"
      :pointmax 8810
      :fsize 8809
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 8767 . 8778) (punctuation 8764 . 8765) (semantic-list 8654 . 8764) (symbol 8624 . 8653) (punctuation 8623 . 8624) (symbol 8609 . 8622) (symbol 8587 . 8608) (punctuation 8585 . 8586) (semantic-list 8481 . 8585) (symbol 8451 . 8474) (symbol 8436 . 8440) (symbol 8414 . 8435) (punctuation 8397 . 8398) (semantic-list 8365 . 8397) (symbol 8335 . 8363) (punctuation 8330 . 8331) (symbol 8320 . 8329) (symbol 8298 . 8319) (punctuation 8296 . 8297) (semantic-list 8185 . 8296) (symbol 8155 . 8175) (punctuation 8154 . 8155) (symbol 8140 . 8153) (symbol 8118 . 8139) (punctuation 8116 . 8117) (semantic-list 8084 . 8116) (symbol 8054 . 8082) (symbol 8039 . 8043) (symbol 8017 . 8038) (punctuation 8015 . 8016) (semantic-list 7983 . 8015) (symbol 7953 . 7973) (punctuation 7952 . 7953) (symbol 7938 . 7951) (symbol 7916 . 7937) (punctuation 7914 . 7915) (semantic-list 7882 . 7914) (symbol 7852 . 7872) (punctuation 7851 . 7852) (symbol 7837 . 7850) (symbol 7815 . 7836) (punctuation 7813 . 7814) (semantic-list 7781 . 7813) (symbol 7751 . 7773) (symbol 7736 . 7744) (symbol 7714 . 7735) (punctuation 7712 . 7713) (semantic-list 7680 . 7712) (symbol 7650 . 7674) (symbol 7635 . 7643) (symbol 7613 . 7634) (punctuation 7574 . 7575) (semantic-list 7464 . 7574) (symbol 7434 . 7448) (VOID 7419 . 7423) (symbol 7397 . 7418) (punctuation 7395 . 7396) (semantic-list 7363 . 7395) (symbol 7333 . 7347) (symbol 7318 . 7326) (symbol 7296 . 7317) (punctuation 7272 . 7273) (semantic-list 6999 . 7272) (symbol 6969 . 6991) (punctuation 6968 . 6969) (symbol 6954 . 6967) (symbol 6932 . 6953) (punctuation 6930 . 6931) (semantic-list 6657 . 6930) (symbol 6627 . 6644) (punctuation 6626 . 6627) (symbol 6612 . 6625) (symbol 6590 . 6611) (punctuation 6588 . 6589) (semantic-list 6315 . 6588) (symbol 6285 . 6307) (punctuation 6284 . 6285) (symbol 6270 . 6283) (symbol 6248 . 6269) (punctuation 6246 . 6247) (semantic-list 5973 . 6246) (symbol 5943 . 5960) (punctuation 5942 . 5943) (symbol 5928 . 5941) (symbol 5906 . 5927) (punctuation 5904 . 5905) (semantic-list 5716 . 5904) (symbol 5686 . 5707) (VOID 5671 . 5675) (symbol 5649 . 5670) (punctuation 5647 . 5648) (semantic-list 5537 . 5647) (symbol 5507 . 5530) (VOID 5492 . 5496) (symbol 5470 . 5491) (punctuation 5468 . 5469) (semantic-list 5436 . 5468) (symbol 5406 . 5423) (VOID 5391 . 5395) (symbol 5369 . 5390) (punctuation 5367 . 5368) (semantic-list 5171 . 5367) (symbol 5141 . 5169) (VOID 5126 . 5130) (symbol 5104 . 5125) (punctuation 5102 . 5103) (semantic-list 4906 . 5102) (symbol 4876 . 4899) (VOID 4861 . 4865) (symbol 4839 . 4860) (punctuation 4837 . 4838) (semantic-list 4564 . 4837) (symbol 4534 . 4563) (punctuation 4533 . 4534) (symbol 4519 . 4532) (symbol 4497 . 4518) (punctuation 4495 . 4496) (semantic-list 4222 . 4495) (symbol 4192 . 4216) (punctuation 4191 . 4192) (symbol 4177 . 4190) (symbol 4155 . 4176) (punctuation 4153 . 4154) (semantic-list 4049 . 4153) (symbol 4019 . 4034) (VOID 4004 . 4008) (symbol 3982 . 4003) (punctuation 3980 . 3981) (semantic-list 3871 . 3980) (symbol 3841 . 3856) (VOID 3826 . 3830) (symbol 3804 . 3825) (punctuation 3802 . 3803) (semantic-list 3692 . 3802) (symbol 3662 . 3686) (punctuation 3661 . 3662) (symbol 3647 . 3660) (symbol 3625 . 3646) (punctuation 3623 . 3624) (semantic-list 3514 . 3623) (symbol 3484 . 3502) (punctuation 3483 . 3484) (symbol 3469 . 3482) (symbol 3447 . 3468) (punctuation 3445 . 3446) (semantic-list 3336 . 3445) (symbol 3306 . 3323) (punctuation 3305 . 3306) (symbol 3291 . 3304) (symbol 3269 . 3290) (punctuation 3267 . 3268) (semantic-list 3159 . 3267) (symbol 3129 . 3155) (punctuation 3128 . 3129) (symbol 3114 . 3127) (symbol 3092 . 3113) (punctuation 3090 . 3091) (semantic-list 3059 . 3090) (symbol 3029 . 3052) (punctuation 3028 . 3029) (symbol 3014 . 3027) (symbol 2992 . 3013) (punctuation 2990 . 2991) (semantic-list 2959 . 2990) (symbol 2929 . 2954) (punctuation 2928 . 2929) (symbol 2914 . 2927) (symbol 2892 . 2913) (punctuation 2868 . 2869) (semantic-list 2837 . 2868) (symbol 2807 . 2826) (symbol 2792 . 2800) (symbol 2769 . 2791) (punctuation 2767 . 2768) (semantic-list 2572 . 2767) (symbol 2542 . 2562) (VOID 2527 . 2531) (symbol 2505 . 2526) (punctuation 2503 . 2504) (semantic-list 2308 . 2503) (symbol 2278 . 2293) (VOID 2263 . 2267) (symbol 2241 . 2262) (punctuation 2239 . 2240) (semantic-list 1968 . 2239) (symbol 1938 . 1962) (VOID 1923 . 1927) (symbol 1901 . 1922) (punctuation 1899 . 1900) (semantic-list 1707 . 1899) (symbol 1677 . 1695) (VOID 1662 . 1666) (symbol 1640 . 1661) (punctuation 1638 . 1639) (semantic-list 1607 . 1638) (symbol 1577 . 1598) (symbol 1562 . 1566) (symbol 1540 . 1561) (punctuation 1538 . 1539) (semantic-list 1507 . 1538) (symbol 1477 . 1492) (VOID 1462 . 1466) (symbol 1440 . 1461) (punctuation 1438 . 1439) (semantic-list 1398 . 1438) (symbol 1368 . 1382) (punctuation 1363 . 1364) (symbol 1353 . 1362) (symbol 1331 . 1352) (punctuation 1311 . 1312) (semantic-list 1168 . 1311) (semantic-list 1139 . 1167) (symbol 1134 . 1138) (TYPEDEF 1126 . 1133) (symbol 1022 . 1035) (string 946 . 987) (symbol 940 . 945) (punctuation 939 . 940))
      :lexical-table 
        '(("__G_SEQUENCE_H__")
          )
)
    (semanticdb-table "gshell.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_SHELL_H__" variable (:constant-flag t) nil [854 867])
            ("glib/gerror.h" include (:system-flag t) nil [990 1014])
            ("G_SHELL_ERROR" variable (:constant-flag t) nil [1039 1052])
            ((((0) "GShellError")) type (:superclasses ("" type (:members (("G_SHELL_ERROR_BAD_QUOTING" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1142 1168]) ("G_SHELL_ERROR_EMPTY_STRING" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1209 1236]) ("G_SHELL_ERROR_FAILED" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1239 1261])) :type "enum") nil nil) :type "typedef") nil [1077 1274]))          
      :file "gshell.h"
      :pointmax 1826
      :fsize 1825
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 1786 . 1797) (punctuation 1783 . 1784) (semantic-list 1601 . 1783) (symbol 1582 . 1600) (symbol 1573 . 1581) (symbol 1551 . 1572) (punctuation 1549 . 1550) (semantic-list 1468 . 1549) (symbol 1449 . 1464) (punctuation 1445 . 1446) (symbol 1440 . 1445) (symbol 1418 . 1439) (punctuation 1416 . 1417) (semantic-list 1384 . 1416) (symbol 1365 . 1378) (punctuation 1361 . 1362) (symbol 1356 . 1361) (symbol 1334 . 1355) (punctuation 1331 . 1332) (semantic-list 1325 . 1331) (symbol 1305 . 1324) (symbol 1298 . 1304) (symbol 1276 . 1297) (symbol 1016 . 1029) (string 940 . 981) (symbol 934 . 939) (punctuation 933 . 934))
      :lexical-table 
        '(("G_SHELL_ERROR" . ((symbol "g_shell_error_quark" 1053 . 1072) (semantic-list "()" 1073 . 1075)))
          ("__G_SHELL_H__")
          )
)
    (semanticdb-table "gslice.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_SLICE_H__" variable (:constant-flag t) nil [798 811])
            ("glib/gtypes.h" include (:system-flag t) nil [934 958])
            ("G_GNUC_ALLOC_SIZE" function
               (:prototype-flag t
                :type ("G_GNUC_MALLOC" type (:type "class") nil nil))
                nil [1119 1154])
            ("G_GNUC_ALLOC_SIZE" function
               (:prototype-flag t
                :type ("G_GNUC_MALLOC" type (:type "class") nil nil))
                nil [1237 1272])
            ("G_GNUC_ALLOC_SIZE" function
               (:prototype-flag t
                :type ("G_GNUC_MALLOC" type (:type "class") nil nil))
                nil [1428 1463])
            ("g_slice_new" variable (:constant-flag t) nil [1741 1752])
            ("g_slice_new0" variable (:constant-flag t) nil [1813 1825])
            ("g_slice_dup" variable (:constant-flag t) nil [2480 2491])
            ("g_slice_free" variable (:constant-flag t) nil [2661 2673])
            ("g_slice_free_chain" variable (:constant-flag t) nil [2901 2919])
            ((((0) "GSliceConfig")) type (:superclasses ("" type (:members (("G_SLICE_CONFIG_ALWAYS_MALLOC" variable (:constant-flag t :default-value (3295 3296) :type "int") (reparse-symbol enumsubparts) [3264 3296]) ("G_SLICE_CONFIG_BYPASS_MAGAZINES" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3300 3332]) ("G_SLICE_CONFIG_WORKING_SET_MSECS" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3335 3368]) ("G_SLICE_CONFIG_COLOR_INCREMENT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3371 3402]) ("G_SLICE_CONFIG_CHUNK_SIZES" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3405 3432]) ("G_SLICE_CONFIG_CONTENTION_COUNTER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3435 3470])) :type "enum") nil nil) :type "typedef") nil [3247 3484]))          
      :file "gslice.h"
      :pointmax 3905
      :fsize 3904
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 3865 . 3876) (punctuation 3763 . 3764) (semantic-list 3711 . 3763) (symbol 3685 . 3709) (punctuation 3682 . 3683) (symbol 3676 . 3682) (symbol 3652 . 3675) (punctuation 3650 . 3651) (semantic-list 3631 . 3650) (symbol 3609 . 3627) (symbol 3600 . 3606) (symbol 3576 . 3599) (punctuation 3574 . 3575) (semantic-list 3541 . 3574) (symbol 3519 . 3537) (VOID 3510 . 3514) (symbol 3486 . 3509) (punctuation 1730 . 1731) (semantic-list 1640 . 1730) (symbol 1609 . 1639) (VOID 1600 . 1604) (symbol 1578 . 1599) (punctuation 1576 . 1577) (semantic-list 1519 . 1576) (symbol 1495 . 1508) (VOID 1486 . 1490) (symbol 1464 . 1485) (number 1460 . 1461) (semantic-list 1335 . 1427) (symbol 1304 . 1316) (symbol 1295 . 1303) (symbol 1273 . 1294) (number 1269 . 1270) (semantic-list 1210 . 1236) (symbol 1186 . 1200) (symbol 1177 . 1185) (symbol 1155 . 1176) (number 1151 . 1152) (semantic-list 1093 . 1118) (symbol 1069 . 1082) (symbol 1060 . 1068) (symbol 1038 . 1059) (symbol 960 . 973) (string 884 . 925) (symbol 878 . 883) (punctuation 877 . 878))
      :lexical-table 
        '(("__G_SLICE_H__")
          ("g_slice_new0" (spp-arg-list ("type") 1825 . 1831) . ((semantic-list "((type*) g_slice_alloc0 (sizeof (type)))" 1836 . 1876)))
          ("g_slice_free" (spp-arg-list ("type" "mem") 2673 . 2684) . 
              ((symbol "G_STMT_START" 2719 . 2731) (semantic-list "{                                                  \\
  if (1) g_slice_free1 (sizeof (type), (mem));			\\
  else   (void) ((type*) 0 == (mem)); 				\\
}" 2732 . 2881) (symbol "G_STMT_END" 2882 . 2892)))
          ("g_slice_new" (spp-arg-list ("type") 1752 . 1758) . ((semantic-list "((type*) g_slice_alloc (sizeof (type)))" 1764 . 1803)))
          ("g_slice_free_chain" (spp-arg-list ("type" "mem_chain" "next") 2919 . 2942) . 
              ((symbol "G_STMT_START" 2959 . 2971) (semantic-list "{                                                  \\
  if (1) g_slice_free_chain_with_offset (sizeof (type),		\\
                 (mem_chain), G_STRUCT_OFFSET (type, next)); 	\\
  else   (void) ((type*) 0 == (mem_chain));			\\
}" 2972 . 3197) (symbol "G_STMT_END" 3198 . 3208)))
          ("g_slice_dup" (spp-arg-list ("type" "mem") 2491 . 2502) . ((semantic-list "(1 ? (type*) g_slice_copy (sizeof (type), (mem))              \\
     : ((void) ((type*) 0 == (mem)), (type*) 0))" 2540 . 2652)))
          )
)
    (semanticdb-table "gslist.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_SLIST_H__" variable (:constant-flag t) nil [1084 1097])
            ("glib/gmem.h" include (:system-flag t) nil [1220 1242])
            ("glib/gnode.h" include (:system-flag t) nil [1243 1266])
            ((((0) "GSList")) type (:superclasses ("_GSList" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1283 1313])
            ("_GSList" type
               (:members (((("data" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1334 1348]) ((("next" 1 nil nil nil)) variable (:type ("GSList" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1351 1364]))
                :type "struct")
                nil [1315 1367])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [1466 1492])
            ("g_slist_free1" variable (:constant-flag t) nil [1680 1693])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [1963 1989])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [2109 2135])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [2290 2316])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [2467 2493])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [2680 2706])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [2861 2887])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [3009 3035])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [3155 3181])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [3301 3327])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [3448 3474])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [3595 3621])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [3710 3736])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [3825 3851])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [4010 4036])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [5127 5153])
            ((("G_GNUC_WARN_UNUSED_RESULT" 0 nil nil nil)) variable (:type "int") nil [5317 5343])
            ("g_slist_next" variable (:constant-flag t) nil [5471 5483]))          
      :file "gslist.h"
      :pointmax 5588
      :fsize 5587
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 5548 . 5559) (punctuation 5459 . 5460) (semantic-list 5407 . 5459) (symbol 5375 . 5391) (symbol 5366 . 5374) (symbol 5344 . 5365) (semantic-list 5217 . 5316) (symbol 5185 . 5207) (punctuation 5182 . 5183) (symbol 5176 . 5182) (symbol 5154 . 5175) (semantic-list 5063 . 5126) (symbol 5031 . 5043) (punctuation 5028 . 5029) (symbol 5022 . 5028) (symbol 5000 . 5021) (punctuation 4998 . 4999) (semantic-list 4907 . 4998) (symbol 4875 . 4890) (VOID 4866 . 4870) (symbol 4844 . 4865) (punctuation 4842 . 4843) (semantic-list 4818 . 4842) (symbol 4786 . 4800) (symbol 4777 . 4782) (symbol 4755 . 4776) (punctuation 4753 . 4754) (semantic-list 4729 . 4753) (symbol 4697 . 4709) (punctuation 4694 . 4695) (symbol 4688 . 4694) (symbol 4666 . 4687) (punctuation 4664 . 4665) (semantic-list 4609 . 4664) (symbol 4577 . 4590) (symbol 4568 . 4572) (symbol 4546 . 4567) (punctuation 4544 . 4545) (semantic-list 4488 . 4544) (symbol 4456 . 4472) (symbol 4447 . 4451) (symbol 4425 . 4446) (punctuation 4423 . 4424) (semantic-list 4337 . 4423) (symbol 4305 . 4324) (punctuation 4302 . 4303) (symbol 4296 . 4302) (symbol 4274 . 4295) (punctuation 4272 . 4273) (semantic-list 4217 . 4272) (symbol 4185 . 4197) (punctuation 4182 . 4183) (symbol 4176 . 4182) (symbol 4154 . 4175) (punctuation 4152 . 4153) (semantic-list 4100 . 4152) (symbol 4068 . 4079) (punctuation 4065 . 4066) (symbol 4059 . 4065) (symbol 4037 . 4058) (semantic-list 3917 . 4009) (symbol 3885 . 3902) (punctuation 3882 . 3883) (symbol 3876 . 3882) (symbol 3853 . 3875) (semantic-list 3800 . 3824) (symbol 3768 . 3780) (punctuation 3765 . 3766) (symbol 3759 . 3765) (symbol 3737 . 3758) (semantic-list 3685 . 3709) (symbol 3653 . 3668) (punctuation 3650 . 3651) (symbol 3644 . 3650) (symbol 3622 . 3643) (semantic-list 3538 . 3594) (symbol 3506 . 3525) (punctuation 3503 . 3504) (symbol 3497 . 3503) (symbol 3475 . 3496) (semantic-list 3391 . 3447) (symbol 3359 . 3378) (punctuation 3356 . 3357) (symbol 3350 . 3356) (symbol 3328 . 3349) (semantic-list 3245 . 3300) (symbol 3213 . 3231) (punctuation 3210 . 3211) (symbol 3204 . 3210) (symbol 3182 . 3203) (semantic-list 3099 . 3154) (symbol 3067 . 3081) (punctuation 3064 . 3065) (symbol 3058 . 3064) (symbol 3036 . 3057) (semantic-list 2951 . 3008) (symbol 2919 . 2933) (punctuation 2916 . 2917) (symbol 2910 . 2916) (symbol 2888 . 2909) (semantic-list 2770 . 2860) (symbol 2738 . 2759) (punctuation 2735 . 2736) (symbol 2729 . 2735) (symbol 2707 . 2728) (semantic-list 2557 . 2679) (symbol 2525 . 2556) (punctuation 2522 . 2523) (symbol 2516 . 2522) (symbol 2494 . 2515) (semantic-list 2380 . 2466) (symbol 2348 . 2369) (punctuation 2345 . 2346) (symbol 2339 . 2345) (symbol 2317 . 2338) (semantic-list 2199 . 2289) (symbol 2167 . 2181) (punctuation 2164 . 2165) (symbol 2158 . 2164) (symbol 2136 . 2157) (semantic-list 2053 . 2108) (symbol 2021 . 2036) (punctuation 2018 . 2019) (symbol 2012 . 2018) (symbol 1990 . 2011) (semantic-list 1907 . 1962) (symbol 1875 . 1889) (punctuation 1872 . 1873) (symbol 1866 . 1872) (symbol 1844 . 1865) (punctuation 1842 . 1843) (semantic-list 1782 . 1842) (symbol 1750 . 1767) (VOID 1741 . 1745) (symbol 1719 . 1740) (punctuation 1669 . 1670) (semantic-list 1645 . 1669) (symbol 1613 . 1627) (VOID 1604 . 1608) (symbol 1582 . 1603) (punctuation 1580 . 1581) (semantic-list 1556 . 1580) (symbol 1524 . 1536) (VOID 1515 . 1519) (symbol 1493 . 1514) (semantic-list 1459 . 1465) (symbol 1427 . 1440) (punctuation 1424 . 1425) (symbol 1418 . 1424) (symbol 1396 . 1417) (symbol 1268 . 1281) (string 1170 . 1211) (symbol 1164 . 1169) (punctuation 1163 . 1164))
      :lexical-table 
        '(("g_slist_next" (spp-arg-list ("slist") 5483 . 5490) . ((semantic-list "((slist) ? (((GSList *)(slist))->next) : NULL)" 5500 . 5546)))
          ("__G_SLIST_H__")
          ("g_slist_free1" . ((symbol "g_slist_free_1" 1704 . 1718)))
          )
)
    (semanticdb-table "gspawn.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_SPAWN_H__" variable (:constant-flag t) nil [848 861])
            ("glib/gerror.h" include (:system-flag t) nil [984 1008])
            ("G_SPAWN_ERROR" variable (:constant-flag t) nil [1287 1300])
            ((((0) "GSpawnError")) type (:superclasses ("" type (:members (("G_SPAWN_ERROR_FORK" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2581 2600]) ("G_SPAWN_ERROR_READ" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2645 2664]) ("G_SPAWN_ERROR_CHDIR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2706 2726]) ("G_SPAWN_ERROR_ACCES" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2767 2787]) ("G_SPAWN_ERROR_PERM" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2821 2840]) ("G_SPAWN_ERROR_TOO_BIG" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2874 2896]) ("G_SPAWN_ERROR_2BIG" variable (:constant-flag t :default-value (2977 2998) :type "int") (reparse-symbol enumsubparts) [2956 2998]) ("G_SPAWN_ERROR_NOEXEC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3009 3030]) ("G_SPAWN_ERROR_NAMETOOLONG" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3064 3090]) ("G_SPAWN_ERROR_NOENT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3119 3139]) ("G_SPAWN_ERROR_NOMEM" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3168 3188]) ("G_SPAWN_ERROR_NOTDIR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3217 3238]) ("G_SPAWN_ERROR_LOOP" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3267 3286]) ("G_SPAWN_ERROR_TXTBUSY" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3317 3339]) ("G_SPAWN_ERROR_IO" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3368 3385]) ("G_SPAWN_ERROR_NFILE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3414 3434]) ("G_SPAWN_ERROR_MFILE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3463 3483]) ("G_SPAWN_ERROR_INVAL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3511 3531]) ("G_SPAWN_ERROR_ISDIR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3560 3580]) ("G_SPAWN_ERROR_LIBBAD" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3609 3630]) ("G_SPAWN_ERROR_FAILED" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [3659 3806])) :type "enum") nil nil) :type "typedef") nil [2564 3819])
            ("G_SPAWN_EXIT_ERROR" variable (:constant-flag t) nil [3960 3978])
            ((((0) "GSpawnFlags")) type (:superclasses ("" type (:members (("G_SPAWN_DEFAULT" variable (:constant-flag t :default-value (7531 7532) :type "int") (reparse-symbol enumsubparts) [7498 7532]) ("G_SPAWN_LEAVE_DESCRIPTORS_OPEN" variable (:constant-flag t :default-value (7569 7570) :type "int") (reparse-symbol enumsubparts) [7536 7570]) ("G_SPAWN_DO_NOT_REAP_CHILD" variable (:constant-flag t :default-value (7612 7613) :type "int") (reparse-symbol enumsubparts) [7579 7613]) ("G_SPAWN_SEARCH_PATH" variable (:constant-flag t :default-value (7710 7711) :type "int") (reparse-symbol enumsubparts) [7677 7711]) ("G_SPAWN_STDOUT_TO_DEV_NULL" variable (:constant-flag t :default-value (7786 7787) :type "int") (reparse-symbol enumsubparts) [7753 7787]) ("G_SPAWN_STDERR_TO_DEV_NULL" variable (:constant-flag t :default-value (7829 7830) :type "int") (reparse-symbol enumsubparts) [7796 7830]) ("G_SPAWN_CHILD_INHERITS_STDIN" variable (:constant-flag t :default-value (7872 7873) :type "int") (reparse-symbol enumsubparts) [7839 7873]) ("G_SPAWN_FILE_AND_ARGV_ZERO" variable (:constant-flag t :default-value (7915 7916) :type "int") (reparse-symbol enumsubparts) [7882 7916]) ("G_SPAWN_SEARCH_PATH_FROM_ENVP" variable (:constant-flag t :default-value (7958 7959) :type "int") (reparse-symbol enumsubparts) [7925 7959]) ("G_SPAWN_CLOEXEC_PIPES" variable (:constant-flag t :default-value (8001 8002) :type "int") (reparse-symbol enumsubparts) [7968 8002])) :type "enum") nil nil) :type "typedef") nil [7481 8022]))          
      :file "gspawn.h"
      :pointmax 14324
      :fsize 14323
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 14284 . 14295) (punctuation 11047 . 11048) (semantic-list 11037 . 11047) (symbol 11019 . 11036) (VOID 11014 . 11018) (symbol 10992 . 11013) (punctuation 10989 . 10990) (semantic-list 10941 . 10989) (symbol 10915 . 10940) (symbol 10906 . 10914) (symbol 10883 . 10905) (punctuation 10880 . 10881) (semantic-list 10778 . 10880) (symbol 10751 . 10777) (symbol 10742 . 10750) (symbol 10720 . 10741) (punctuation 10718 . 10719) (semantic-list 10393 . 10718) (symbol 10366 . 10391) (symbol 10357 . 10365) (symbol 10335 . 10356) (punctuation 10332 . 10333) (semantic-list 9718 . 10332) (symbol 9697 . 9709) (symbol 9688 . 9696) (symbol 9666 . 9687) (punctuation 9529 . 9530) (semantic-list 8808 . 9529) (symbol 8783 . 8807) (symbol 8774 . 8782) (symbol 8752 . 8773) (punctuation 8621 . 8622) (semantic-list 8189 . 8621) (symbol 8175 . 8188) (symbol 8166 . 8174) (symbol 8144 . 8165) (punctuation 8141 . 8142) (semantic-list 8135 . 8141) (symbol 8110 . 8134) (symbol 8103 . 8109) (symbol 8081 . 8102) (punctuation 8079 . 8080) (semantic-list 8073 . 8079) (symbol 8053 . 8072) (symbol 8046 . 8052) (symbol 8024 . 8045) (number 8006 . 8007) (punctuation 8004 . 8005) (punctuation 8003 . 8004) (number 7963 . 7964) (punctuation 7961 . 7962) (punctuation 7960 . 7961) (number 7920 . 7921) (punctuation 7918 . 7919) (punctuation 7917 . 7918) (number 7877 . 7878) (punctuation 7875 . 7876) (punctuation 7874 . 7875) (number 7834 . 7835) (punctuation 7832 . 7833) (punctuation 7831 . 7832) (number 7791 . 7792) (punctuation 7789 . 7790) (punctuation 7788 . 7789) (number 7715 . 7716) (punctuation 7713 . 7714) (punctuation 7712 . 7713) (number 7617 . 7618) (punctuation 7615 . 7616) (punctuation 7614 . 7615) (number 7574 . 7575) (punctuation 7572 . 7573) (punctuation 7571 . 7572) (punctuation 5802 . 5803) (semantic-list 5782 . 5802) (semantic-list 5757 . 5781) (VOID 5752 . 5756) (TYPEDEF 5744 . 5751) (symbol 1010 . 1023) (string 934 . 975) (symbol 928 . 933) (punctuation 927 . 928))
      :lexical-table 
        '(("G_SPAWN_EXIT_ERROR" . ((symbol "g_spawn_exit_error_quark" 3979 . 4003) (semantic-list "()" 4004 . 4006)))
          ("__G_SPAWN_H__")
          ("G_SPAWN_ERROR" . ((symbol "g_spawn_error_quark" 1301 . 1320) (semantic-list "()" 1321 . 1323)))
          )
)
    (semanticdb-table "gstrfuncs.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_STRFUNCS_H__" variable (:constant-flag t) nil [1087 1103])
            ("stdarg.h" include (:system-flag t) nil [1226 1245])
            ("glib/gmacros.h" include (:system-flag t) nil [1246 1271])
            ("glib/gtypes.h" include (:system-flag t) nil [1272 1296])
            ((((0) "GAsciiType")) type (:superclasses ("" type (:members (("G_ASCII_ALNUM" variable (:constant-flag t :default-value (1423 1424) :type "int") (reparse-symbol enumsubparts) [1406 1424]) ("G_ASCII_ALPHA" variable (:constant-flag t :default-value (1450 1451) :type "int") (reparse-symbol enumsubparts) [1433 1451]) ("G_ASCII_CNTRL" variable (:constant-flag t :default-value (1477 1478) :type "int") (reparse-symbol enumsubparts) [1460 1478]) ("G_ASCII_DIGIT" variable (:constant-flag t :default-value (1504 1505) :type "int") (reparse-symbol enumsubparts) [1487 1505]) ("G_ASCII_GRAPH" variable (:constant-flag t :default-value (1531 1532) :type "int") (reparse-symbol enumsubparts) [1514 1532]) ("G_ASCII_LOWER" variable (:constant-flag t :default-value (1558 1559) :type "int") (reparse-symbol enumsubparts) [1541 1559]) ("G_ASCII_PRINT" variable (:constant-flag t :default-value (1585 1586) :type "int") (reparse-symbol enumsubparts) [1568 1586]) ("G_ASCII_PUNCT" variable (:constant-flag t :default-value (1612 1613) :type "int") (reparse-symbol enumsubparts) [1595 1613]) ("G_ASCII_SPACE" variable (:constant-flag t :default-value (1639 1640) :type "int") (reparse-symbol enumsubparts) [1622 1640]) ("G_ASCII_UPPER" variable (:constant-flag t :default-value (1666 1667) :type "int") (reparse-symbol enumsubparts) [1649 1667]) ("G_ASCII_XDIGIT" variable (:constant-flag t :default-value (1693 1694) :type "int") (reparse-symbol enumsubparts) [1676 1694])) :type "enum") nil nil) :type "typedef") nil [1389 1714])
            ((("g_ascii_table" 1 nil nil nil)) variable (:constant-flag t :type ("guint16" type (:type "class") nil nil)) nil [1725 1761])
            ("g_ascii_isalnum" variable (:constant-flag t) nil [1771 1786])
            ("g_ascii_isalpha" variable (:constant-flag t) nil [1856 1871])
            ("g_ascii_iscntrl" variable (:constant-flag t) nil [1941 1956])
            ("g_ascii_isdigit" variable (:constant-flag t) nil [2026 2041])
            ("g_ascii_isgraph" variable (:constant-flag t) nil [2111 2126])
            ("g_ascii_islower" variable (:constant-flag t) nil [2196 2211])
            ("g_ascii_isprint" variable (:constant-flag t) nil [2281 2296])
            ("g_ascii_ispunct" variable (:constant-flag t) nil [2366 2381])
            ("g_ascii_isspace" variable (:constant-flag t) nil [2451 2466])
            ("g_ascii_isupper" variable (:constant-flag t) nil [2536 2551])
            ("g_ascii_isxdigit" variable (:constant-flag t) nil [2621 2637])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [2778 2791])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [2870 2883])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [2963 2976])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [3055 3068])
            ("G_STR_DELIMITERS" variable (:constant-flag t) nil [3196 3212])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [3597 3610])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [3692 3705])
            ("G_ASCII_DTOSTR_BUF_SIZE" variable (:constant-flag t) nil [5327 5350])
            ("g_strstrip" variable (:constant-flag t) nil [5936 5946])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [6339 6353])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [6463 6477])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [7258 7272])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [7386 7400])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [7527 7541])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [7642 7656])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [7772 7786])
            ((("G_GNUC_NULL_TERMINATED" 0 nil nil nil)) variable (:type ("G_GNUC_MALLOC" type (:type "class") nil nil)) nil [7880 7917])
            ((("G_GNUC_NULL_TERMINATED" 0 nil nil nil)) variable (:type ("G_GNUC_MALLOC" type (:type "class") nil nil)) nil [8015 8052])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [8317 8331])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [8837 8851])
            ("G_GNUC_ALLOC_SIZE" function
               (:prototype-flag t
                :type ("G_GNUC_MALLOC" type (:type "class") nil nil))
                nil [8962 8997])
            ((((2) "GStrv")) type (:superclasses ("gchar" type (:type "class") nil nil) :type "typedef") nil [9495 9517])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [9663 9677])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [9814 9828])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [9946 9960])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [10136 10150]))          
      :file "gstrfuncs.h"
      :pointmax 11471
      :fsize 11470
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 11428 . 11439) (punctuation 11425 . 11426) (semantic-list 11332 . 11425) (symbol 11315 . 11330) (symbol 11293 . 11301) (symbol 11270 . 11292) (punctuation 11267 . 11268) (semantic-list 11029 . 11267) (symbol 10981 . 10999) (symbol 10957 . 10965) (symbol 10934 . 10956) (punctuation 10931 . 10932) (semantic-list 10697 . 10931) (symbol 10649 . 10672) (punctuation 10632 . 10633) (punctuation 10631 . 10632) (symbol 10625 . 10630) (symbol 10602 . 10624) (punctuation 10599 . 10600) (semantic-list 10478 . 10599) (symbol 10430 . 10444) (punctuation 10412 . 10413) (symbol 10406 . 10411) (symbol 10383 . 10405) (punctuation 10380 . 10381) (semantic-list 10301 . 10380) (symbol 10284 . 10292) (punctuation 10267 . 10268) (symbol 10262 . 10267) (symbol 10240 . 10261) (punctuation 10237 . 10238) (semantic-list 10212 . 10237) (symbol 10195 . 10208) (symbol 10173 . 10178) (symbol 10151 . 10172) (semantic-list 10110 . 10135) (symbol 10093 . 10102) (punctuation 10077 . 10078) (punctuation 10076 . 10077) (symbol 10071 . 10076) (symbol 10049 . 10070) (punctuation 10047 . 10048) (semantic-list 10022 . 10047) (symbol 10005 . 10015) (VOID 9983 . 9987) (symbol 9961 . 9982) (semantic-list 9890 . 9945) (symbol 9873 . 9883) (punctuation 9856 . 9857) (symbol 9851 . 9856) (symbol 9829 . 9850) (semantic-list 9732 . 9813) (symbol 9715 . 9729) (punctuation 9707 . 9708) (punctuation 9706 . 9707) (symbol 9700 . 9705) (symbol 9678 . 9699) (semantic-list 9579 . 9662) (symbol 9562 . 9572) (punctuation 9546 . 9547) (punctuation 9545 . 9546) (symbol 9540 . 9545) (symbol 9518 . 9539) (number 8994 . 8995) (semantic-list 8913 . 8961) (symbol 8897 . 8905) (symbol 8875 . 8883) (symbol 8853 . 8874) (semantic-list 8785 . 8836) (symbol 8768 . 8779) (punctuation 8751 . 8752) (symbol 8746 . 8751) (symbol 8724 . 8745) (semantic-list 8295 . 8316) (symbol 8278 . 8291) (punctuation 8261 . 8262) (symbol 8256 . 8261) (symbol 8234 . 8255) (semantic-list 7979 . 8014) (symbol 7962 . 7971) (punctuation 7945 . 7946) (symbol 7940 . 7945) (symbol 7918 . 7939) (semantic-list 7847 . 7879) (symbol 7830 . 7841) (punctuation 7814 . 7815) (symbol 7809 . 7814) (symbol 7787 . 7808) (semantic-list 7719 . 7771) (symbol 7702 . 7712) (punctuation 7686 . 7687) (symbol 7681 . 7686) (symbol 7659 . 7680) (semantic-list 7602 . 7641) (symbol 7585 . 7594) (punctuation 7569 . 7570) (symbol 7564 . 7569) (symbol 7542 . 7563) (semantic-list 7520 . 7526) (symbol 7507 . 7520) (number 7524 . 7525) (number 7521 . 7522) (semantic-list 7461 . 7506) (symbol 7444 . 7460) (punctuation 7428 . 7429) (symbol 7423 . 7428) (symbol 7401 . 7422) (semantic-list 7379 . 7385) (symbol 7365 . 7378) (number 7383 . 7384) (number 7380 . 7381) (semantic-list 7333 . 7364) (symbol 7316 . 7331) (punctuation 7300 . 7301) (symbol 7295 . 7300) (symbol 7273 . 7294) (semantic-list 7239 . 7257) (symbol 7223 . 7231) (punctuation 7207 . 7208) (symbol 7202 . 7207) (symbol 7180 . 7201) (punctuation 7037 . 7038) (semantic-list 7016 . 7037) (symbol 6999 . 7006) (punctuation 6982 . 6983) (symbol 6977 . 6982) (symbol 6961 . 6976) (punctuation 6959 . 6960) (semantic-list 6938 . 6959) (symbol 6921 . 6930) (punctuation 6904 . 6905) (symbol 6899 . 6904) (symbol 6883 . 6898) (punctuation 6881 . 6882) (semantic-list 6751 . 6881) (symbol 6734 . 6747) (symbol 6712 . 6716) (symbol 6696 . 6711) (punctuation 6694 . 6695) (semantic-list 6620 . 6694) (symbol 6603 . 6615) (symbol 6581 . 6585) (symbol 6565 . 6580) (punctuation 6562 . 6563) (semantic-list 6544 . 6562) (symbol 6524 . 6538) (symbol 6502 . 6510) (symbol 6479 . 6501) (semantic-list 6418 . 6462) (symbol 6398 . 6411) (punctuation 6381 . 6382) (symbol 6376 . 6381) (symbol 6354 . 6375) (semantic-list 6294 . 6338) (symbol 6274 . 6289) (punctuation 6257 . 6258) (symbol 6252 . 6257) (symbol 6230 . 6251) (punctuation 6228 . 6229) (semantic-list 6162 . 6228) (symbol 6142 . 6161) (symbol 6120 . 6124) (symbol 6098 . 6119) (punctuation 6096 . 6097) (semantic-list 6054 . 6096) (symbol 6034 . 6052) (symbol 6012 . 6016) (symbol 5990 . 6011) (punctuation 5886 . 5887) (semantic-list 5864 . 5886) (symbol 5847 . 5857) (punctuation 5830 . 5831) (symbol 5825 . 5830) (symbol 5803 . 5824) (punctuation 5771 . 5772) (semantic-list 5749 . 5771) (symbol 5732 . 5741) (punctuation 5715 . 5716) (symbol 5710 . 5715) (symbol 5688 . 5709) (punctuation 5656 . 5657) (semantic-list 5557 . 5656) (symbol 5540 . 5555) (punctuation 5524 . 5525) (symbol 5518 . 5523) (symbol 5496 . 5517) (punctuation 5494 . 5495) (semantic-list 5422 . 5494) (symbol 5405 . 5419) (punctuation 5389 . 5390) (symbol 5383 . 5388) (symbol 5361 . 5382) (punctuation 5196 . 5197) (semantic-list 5127 . 5196) (symbol 5110 . 5125) (symbol 5096 . 5102) (symbol 5074 . 5095) (punctuation 5072 . 5073) (semantic-list 5003 . 5072) (symbol 4986 . 5002) (symbol 4971 . 4978) (symbol 4949 . 4970) (punctuation 4947 . 4948) (semantic-list 4902 . 4947) (symbol 4885 . 4899) (symbol 4863 . 4870) (symbol 4841 . 4862) (punctuation 4839 . 4840) (semantic-list 4794 . 4839) (symbol 4777 . 4785) (symbol 4755 . 4762) (symbol 4733 . 4754) (punctuation 4680 . 4681) (semantic-list 4634 . 4680) (symbol 4617 . 4633) (symbol 4595 . 4603) (symbol 4573 . 4594) (punctuation 4571 . 4572) (semantic-list 4525 . 4571) (symbol 4508 . 4524) (symbol 4486 . 4494) (symbol 4464 . 4485) (punctuation 4461 . 4462) (semantic-list 4377 . 4461) (symbol 4360 . 4373) (punctuation 4344 . 4345) (symbol 4338 . 4343) (symbol 4316 . 4337) (punctuation 4314 . 4315) (semantic-list 4263 . 4314) (symbol 4246 . 4255) (punctuation 4230 . 4231) (symbol 4224 . 4229) (symbol 4202 . 4223) (punctuation 4200 . 4201) (semantic-list 4116 . 4200) (symbol 4099 . 4111) (punctuation 4083 . 4084) (symbol 4077 . 4082) (symbol 4055 . 4076) (punctuation 4053 . 4054) (semantic-list 3981 . 4053) (symbol 3964 . 3973) (symbol 3944 . 3949) (symbol 3922 . 3943) (punctuation 3920 . 3921) (semantic-list 3848 . 3920) (symbol 3831 . 3840) (symbol 3811 . 3816) (symbol 3789 . 3810) (punctuation 3787 . 3788) (semantic-list 3767 . 3787) (symbol 3750 . 3762) (punctuation 3734 . 3735) (symbol 3728 . 3733) (symbol 3706 . 3727) (semantic-list 3672 . 3691) (symbol 3655 . 3666) (punctuation 3645 . 3646) (symbol 3639 . 3644) (CONST 3633 . 3638) (symbol 3611 . 3632) (semantic-list 3577 . 3596) (symbol 3560 . 3570) (punctuation 3550 . 3551) (symbol 3544 . 3549) (CONST 3538 . 3543) (symbol 3516 . 3537) (punctuation 3514 . 3515) (semantic-list 3428 . 3514) (symbol 3411 . 3421) (punctuation 3395 . 3396) (symbol 3390 . 3395) (symbol 3368 . 3389) (punctuation 3366 . 3367) (semantic-list 3283 . 3366) (symbol 3266 . 3278) (punctuation 3250 . 3251) (symbol 3245 . 3250) (symbol 3223 . 3244) (semantic-list 3042 . 3054) (symbol 3021 . 3041) (symbol 2999 . 3003) (symbol 2977 . 2998) (semantic-list 2950 . 2962) (symbol 2929 . 2948) (symbol 2907 . 2911) (symbol 2885 . 2906) (semantic-list 2853 . 2869) (symbol 2836 . 2851) (symbol 2814 . 2819) (symbol 2792 . 2813) (semantic-list 2761 . 2777) (symbol 2744 . 2759) (symbol 2722 . 2727) (symbol 2700 . 2721) (symbol 1716 . 1724) (number 1698 . 1700) (punctuation 1696 . 1697) (punctuation 1695 . 1696) (number 1671 . 1672) (punctuation 1669 . 1670) (punctuation 1668 . 1669) (number 1644 . 1645) (punctuation 1642 . 1643) (punctuation 1641 . 1642) (number 1617 . 1618) (punctuation 1615 . 1616) (punctuation 1614 . 1615) (number 1590 . 1591) (punctuation 1588 . 1589) (punctuation 1587 . 1588) (number 1563 . 1564) (punctuation 1561 . 1562) (punctuation 1560 . 1561) (number 1536 . 1537) (punctuation 1534 . 1535) (punctuation 1533 . 1534) (number 1509 . 1510) (punctuation 1507 . 1508) (punctuation 1506 . 1507) (number 1482 . 1483) (punctuation 1480 . 1481) (punctuation 1479 . 1480) (number 1455 . 1456) (punctuation 1453 . 1454) (punctuation 1452 . 1453) (number 1428 . 1429) (punctuation 1426 . 1427) (punctuation 1425 . 1426) (symbol 1298 . 1311) (string 1176 . 1217) (symbol 1170 . 1175) (punctuation 1169 . 1170))
      :lexical-table 
        '(("__G_STRFUNCS_H__")
          ("g_ascii_isgraph" (spp-arg-list ("c") 2126 . 2129) . ((semantic-list "((g_ascii_table[(guchar) (c)] & G_ASCII_GRAPH) != 0)" 2134 . 2186)))
          ("g_ascii_isdigit" (spp-arg-list ("c") 2041 . 2044) . ((semantic-list "((g_ascii_table[(guchar) (c)] & G_ASCII_DIGIT) != 0)" 2049 . 2101)))
          ("g_ascii_isprint" (spp-arg-list ("c") 2296 . 2299) . ((semantic-list "((g_ascii_table[(guchar) (c)] & G_ASCII_PRINT) != 0)" 2304 . 2356)))
          ("g_ascii_isalpha" (spp-arg-list ("c") 1871 . 1874) . ((semantic-list "((g_ascii_table[(guchar) (c)] & G_ASCII_ALPHA) != 0)" 1879 . 1931)))
          ("g_ascii_ispunct" (spp-arg-list ("c") 2381 . 2384) . ((semantic-list "((g_ascii_table[(guchar) (c)] & G_ASCII_PUNCT) != 0)" 2389 . 2441)))
          ("g_strstrip" (spp-arg-list ("string") 5946 . 5956) . ((symbol "g_strchomp" 5957 . 5967) (semantic-list "(g_strchug (string))" 5968 . 5988)))
          ("g_ascii_isxdigit" (spp-arg-list ("c") 2637 . 2640) . ((semantic-list "((g_ascii_table[(guchar) (c)] & G_ASCII_XDIGIT) != 0)" 2645 . 2698)))
          ("g_ascii_islower" (spp-arg-list ("c") 2211 . 2214) . ((semantic-list "((g_ascii_table[(guchar) (c)] & G_ASCII_LOWER) != 0)" 2219 . 2271)))
          ("g_ascii_isspace" (spp-arg-list ("c") 2466 . 2469) . ((semantic-list "((g_ascii_table[(guchar) (c)] & G_ASCII_SPACE) != 0)" 2474 . 2526)))
          ("G_ASCII_DTOSTR_BUF_SIZE" . ((semantic-list "(29 + 10)" 5351 . 5360)))
          ("g_ascii_isalnum" (spp-arg-list ("c") 1786 . 1789) . ((semantic-list "((g_ascii_table[(guchar) (c)] & G_ASCII_ALNUM) != 0)" 1794 . 1846)))
          ("g_ascii_iscntrl" (spp-arg-list ("c") 1956 . 1959) . ((semantic-list "((g_ascii_table[(guchar) (c)] & G_ASCII_CNTRL) != 0)" 1964 . 2016)))
          ("g_ascii_isupper" (spp-arg-list ("c") 2551 . 2554) . ((semantic-list "((g_ascii_table[(guchar) (c)] & G_ASCII_UPPER) != 0)" 2559 . 2611)))
          ("G_STR_DELIMITERS" . ((string "\"_-|> <.\"" 3213 . 3222)))
          )
)
    (semanticdb-table "gstring.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_STRING_H__" variable (:constant-flag t) nil [1085 1099])
            ("glib/gtypes.h" include (:system-flag t) nil [1222 1246])
            ("glib/gunicode.h" include (:system-flag t) nil [1247 1273])
            ("glib/gbytes.h" include (:system-flag t) nil [1274 1298])
            ("glib/gutils.h" include (:system-flag t) nil [1299 1323])
            ((((0) "GString")) type (:superclasses ("_GString" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1364 1404])
            ("_GString" type
               (:members (((("str" 1 nil nil nil)) variable (:type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1426 1438]) ((("len" 0 nil nil nil)) variable (:type ("gsize" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1441 1451]) ((("allocated_len" 0 nil nil nil)) variable (:type ("gsize" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1454 1474]))
                :type "struct")
                nil [1406 1477])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [6148 6168])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [6369 6390])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [6650 6670])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [6871 6892])
            ("g_string_sprintf" variable (:constant-flag t) nil [7838 7854])
            ("g_string_sprintfa" variable (:constant-flag t) nil [7881 7898]))          
      :file "gstring.h"
      :pointmax 7971
      :fsize 7970
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 7930 . 7941) (punctuation 7797 . 7798) (semantic-list 7780 . 7797) (symbol 7766 . 7777) (punctuation 7765 . 7766) (symbol 7757 . 7764) (symbol 7741 . 7756) (punctuation 7739 . 7740) (semantic-list 7722 . 7739) (symbol 7708 . 7721) (punctuation 7707 . 7708) (symbol 7699 . 7706) (symbol 7683 . 7698) (punctuation 7205 . 7206) (semantic-list 6956 . 7205) (symbol 6928 . 6955) (punctuation 6922 . 6923) (symbol 6915 . 6922) (symbol 6893 . 6914) (number 6889 . 6890) (number 6886 . 6887) (semantic-list 6733 . 6870) (symbol 6706 . 6728) (VOID 6693 . 6697) (symbol 6671 . 6692) (number 6667 . 6668) (number 6664 . 6665) (semantic-list 6453 . 6608) (symbol 6426 . 6449) (VOID 6413 . 6417) (symbol 6391 . 6412) (number 6387 . 6388) (number 6384 . 6385) (semantic-list 6231 . 6368) (symbol 6204 . 6219) (VOID 6191 . 6195) (symbol 6169 . 6190) (number 6165 . 6166) (number 6162 . 6163) (semantic-list 5951 . 6106) (symbol 5924 . 5940) (VOID 5911 . 5915) (symbol 5889 . 5910) (punctuation 5887 . 5888) (semantic-list 5862 . 5887) (symbol 5835 . 5852) (punctuation 5829 . 5830) (symbol 5822 . 5829) (symbol 5800 . 5821) (punctuation 5798 . 5799) (semantic-list 5773 . 5798) (symbol 5746 . 5765) (punctuation 5740 . 5741) (symbol 5733 . 5740) (symbol 5711 . 5732) (punctuation 5709 . 5710) (semantic-list 5558 . 5709) (symbol 5531 . 5545) (punctuation 5525 . 5526) (symbol 5518 . 5525) (symbol 5496 . 5517) (punctuation 5494 . 5495) (semantic-list 5280 . 5494) (symbol 5253 . 5275) (punctuation 5247 . 5248) (symbol 5240 . 5247) (symbol 5218 . 5239) (punctuation 5216 . 5217) (semantic-list 5065 . 5216) (symbol 5038 . 5056) (punctuation 5032 . 5033) (symbol 5025 . 5032) (symbol 5003 . 5024) (punctuation 5001 . 5002) (semantic-list 4851 . 5001) (symbol 4824 . 4847) (punctuation 4818 . 4819) (symbol 4811 . 4818) (symbol 4789 . 4810) (punctuation 4787 . 4788) (semantic-list 4638 . 4787) (symbol 4611 . 4628) (punctuation 4605 . 4606) (symbol 4598 . 4605) (symbol 4576 . 4597) (punctuation 4574 . 4575) (semantic-list 4423 . 4574) (symbol 4396 . 4411) (punctuation 4390 . 4391) (symbol 4383 . 4390) (symbol 4361 . 4382) (punctuation 4359 . 4360) (semantic-list 4208 . 4359) (symbol 4181 . 4201) (punctuation 4175 . 4176) (symbol 4168 . 4175) (symbol 4146 . 4167) (punctuation 4144 . 4145) (semantic-list 4057 . 4144) (symbol 4030 . 4054) (punctuation 4024 . 4025) (symbol 4017 . 4024) (symbol 3995 . 4016) (punctuation 3993 . 3994) (semantic-list 3907 . 3993) (symbol 3880 . 3898) (punctuation 3874 . 3875) (symbol 3867 . 3874) (symbol 3845 . 3866) (punctuation 3843 . 3844) (semantic-list 3755 . 3843) (symbol 3728 . 3744) (punctuation 3722 . 3723) (symbol 3715 . 3722) (symbol 3693 . 3714) (punctuation 3691 . 3692) (semantic-list 3604 . 3691) (symbol 3577 . 3600) (punctuation 3571 . 3572) (symbol 3564 . 3571) (symbol 3542 . 3563) (punctuation 3540 . 3541) (semantic-list 3454 . 3540) (symbol 3427 . 3444) (punctuation 3421 . 3422) (symbol 3414 . 3421) (symbol 3392 . 3413) (punctuation 3390 . 3391) (semantic-list 3239 . 3390) (symbol 3212 . 3231) (punctuation 3206 . 3207) (symbol 3199 . 3206) (symbol 3177 . 3198) (punctuation 3175 . 3176) (semantic-list 3087 . 3175) (symbol 3060 . 3075) (punctuation 3054 . 3055) (symbol 3047 . 3054) (symbol 3025 . 3046) (punctuation 3023 . 3024) (semantic-list 2809 . 3023) (symbol 2782 . 2801) (punctuation 2776 . 2777) (symbol 2769 . 2776) (symbol 2747 . 2768) (punctuation 2745 . 2746) (semantic-list 2657 . 2745) (symbol 2630 . 2647) (punctuation 2624 . 2625) (symbol 2617 . 2624) (symbol 2595 . 2616) (punctuation 2593 . 2594) (semantic-list 2505 . 2593) (symbol 2478 . 2495) (punctuation 2472 . 2473) (symbol 2465 . 2472) (symbol 2443 . 2464) (punctuation 2441 . 2442) (semantic-list 2352 . 2441) (symbol 2325 . 2340) (punctuation 2319 . 2320) (symbol 2312 . 2319) (symbol 2290 . 2311) (punctuation 2288 . 2289) (semantic-list 2266 . 2288) (symbol 2239 . 2252) (symbol 2226 . 2231) (symbol 2204 . 2225) (punctuation 2202 . 2203) (semantic-list 2120 . 2202) (symbol 2093 . 2107) (symbol 2080 . 2088) (symbol 2058 . 2079) (punctuation 2056 . 2057) (semantic-list 2031 . 2056) (symbol 2004 . 2026) (punctuation 1997 . 1998) (symbol 1991 . 1997) (symbol 1968 . 1990) (punctuation 1966 . 1967) (semantic-list 1869 . 1966) (symbol 1842 . 1855) (punctuation 1834 . 1835) (symbol 1829 . 1834) (symbol 1807 . 1828) (punctuation 1805 . 1806) (semantic-list 1778 . 1805) (symbol 1751 . 1769) (punctuation 1745 . 1746) (symbol 1738 . 1745) (symbol 1716 . 1737) (punctuation 1714 . 1715) (semantic-list 1628 . 1714) (symbol 1601 . 1617) (punctuation 1595 . 1596) (symbol 1588 . 1595) (symbol 1566 . 1587) (punctuation 1564 . 1565) (semantic-list 1541 . 1564) (symbol 1514 . 1526) (punctuation 1508 . 1509) (symbol 1501 . 1508) (symbol 1479 . 1500) (symbol 1349 . 1362) (string 1172 . 1213) (symbol 1166 . 1171) (punctuation 1165 . 1166))
      :lexical-table 
        '(("__G_STRING_H__")
          ("g_string_sprintfa" . ((symbol "g_string_append_printf" 7899 . 7921)))
          ("g_string_sprintf" . ((symbol "g_string_printf" 7856 . 7871)))
          )
)
    (semanticdb-table "gstringchunk.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_STRINGCHUNK_H__" variable (:constant-flag t) nil [1090 1109])
            ("glib/gtypes.h" include (:system-flag t) nil [1232 1256])
            ((((0) "GStringChunk")) type (:superclasses ("_GStringChunk" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1273 1315]))          
      :file "gstringchunk.h"
      :pointmax 2129
      :fsize 2128
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 2088 . 2099) (punctuation 2085 . 2086) (semantic-list 1999 . 2085) (symbol 1971 . 1998) (punctuation 1962 . 1963) (symbol 1957 . 1962) (symbol 1935 . 1956) (punctuation 1933 . 1934) (semantic-list 1785 . 1933) (symbol 1757 . 1782) (punctuation 1748 . 1749) (symbol 1743 . 1748) (symbol 1721 . 1742) (punctuation 1719 . 1720) (semantic-list 1633 . 1719) (symbol 1605 . 1626) (punctuation 1596 . 1597) (symbol 1591 . 1596) (symbol 1569 . 1590) (punctuation 1567 . 1568) (semantic-list 1546 . 1567) (symbol 1518 . 1538) (VOID 1504 . 1508) (symbol 1482 . 1503) (punctuation 1480 . 1481) (semantic-list 1459 . 1480) (symbol 1431 . 1450) (VOID 1417 . 1421) (symbol 1395 . 1416) (punctuation 1393 . 1394) (semantic-list 1381 . 1393) (symbol 1353 . 1371) (punctuation 1351 . 1352) (symbol 1339 . 1351) (symbol 1317 . 1338) (symbol 1258 . 1271) (string 1182 . 1223) (symbol 1176 . 1181) (punctuation 1175 . 1176))
      :lexical-table 
        '(("__G_STRINGCHUNK_H__")
          )
)
    (semanticdb-table "gtestutils.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_TEST_UTILS_H__" variable (:constant-flag t) nil [791 809])
            ("glib/gmessages.h" include (:system-flag t) nil [932 959])
            ("glib/gstring.h" include (:system-flag t) nil [960 985])
            ("glib/gerror.h" include (:system-flag t) nil [986 1010])
            ("glib/gslist.h" include (:system-flag t) nil [1011 1035])
            ((((0) "GTestCase")) type (:superclasses ("GTestCase" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1052 1088])
            ((((0) "GTestSuite")) type (:superclasses ("GTestSuite" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1089 1126])
            ("g_assert_cmpstr" variable (:constant-flag t) nil [1374 1389])
            ("g_assert_cmpint" variable (:constant-flag t) nil [1872 1887])
            ("g_assert_cmpuint" variable (:constant-flag t) nil [2354 2370])
            ("g_assert_cmphex" variable (:constant-flag t) nil [2837 2852])
            ("g_assert_cmpfloat" variable (:constant-flag t) nil [3319 3336])
            ("g_assert_cmpmem" variable (:constant-flag t) nil [3806 3821])
            ("g_assert_no_error" variable (:constant-flag t) nil [4723 4740])
            ("g_assert_error" variable (:constant-flag t) nil [5079 5093])
            ("g_assert_true" variable (:constant-flag t) nil [5484 5497])
            ("g_assert_false" variable (:constant-flag t) nil [5883 5897])
            ("g_assert_null" variable (:constant-flag t) nil [6286 6299])
            ("g_assert_nonnull" variable (:constant-flag t) nil [6648 6664])
            ("g_assert_not_reached" variable (:constant-flag t) nil [7271 7291])
            ("g_assert" variable (:constant-flag t) nil [7417 7425])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [8220 8241])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [8452 8473])
            ((("G_GNUC_NULL_TERMINATED" 0 nil nil nil)) variable (:type "int") nil [8704 8727])
            ("g_test_initialized" variable (:constant-flag t) nil [8773 8791])
            ("g_test_quick" variable (:constant-flag t) nil [8852 8864])
            ("g_test_slow" variable (:constant-flag t) nil [8925 8936])
            ("g_test_thorough" variable (:constant-flag t) nil [8999 9014])
            ("g_test_perf" variable (:constant-flag t) nil [9073 9084])
            ("g_test_verbose" variable (:constant-flag t) nil [9145 9159])
            ("g_test_quiet" variable (:constant-flag t) nil [9220 9232])
            ("g_test_undefined" variable (:constant-flag t) nil [9293 9309])
            ("g_test_add" variable (:constant-flag t) nil [10739 10749])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [11861 11882])
            ("g_test_queue_unref" variable (:constant-flag t) nil [12678 12696])
            ((((0) "GTestTrapFlags")) type (:superclasses ("" type (:members (("G_TEST_TRAP_SILENCE_STDOUT" variable (:constant-flag t :default-value (12807 12808) :type "int") (reparse-symbol enumsubparts) [12775 12808]) ("G_TEST_TRAP_SILENCE_STDERR" variable (:constant-flag t :default-value (12849 12850) :type "int") (reparse-symbol enumsubparts) [12817 12850]) ("G_TEST_TRAP_INHERIT_STDIN" variable (:constant-flag t :default-value (12891 12892) :type "int") (reparse-symbol enumsubparts) [12859 12892])) :type "enum") nil nil) :type "typedef") nil [12758 12915])
            ((((0) "GTestSubprocessFlags")) type (:superclasses ("" type (:members (("G_TEST_SUBPROCESS_INHERIT_STDIN" variable (:constant-flag t :default-value (13179 13180) :type "int") (reparse-symbol enumsubparts) [13144 13180]) ("G_TEST_SUBPROCESS_INHERIT_STDOUT" variable (:constant-flag t :default-value (13224 13225) :type "int") (reparse-symbol enumsubparts) [13189 13225]) ("G_TEST_SUBPROCESS_INHERIT_STDERR" variable (:constant-flag t :default-value (13269 13270) :type "int") (reparse-symbol enumsubparts) [13234 13270])) :type "enum") nil nil) :type "typedef") nil [13127 13299])
            ("g_test_trap_assert_passed" variable (:constant-flag t) nil [13701 13726])
            ("g_test_trap_assert_failed" variable (:constant-flag t) nil [13834 13859])
            ("g_test_trap_assert_stdout" variable (:constant-flag t) nil [13967 13992])
            ("g_test_trap_assert_stdout_unmatched" variable (:constant-flag t) nil [14110 14145])
            ("g_test_trap_assert_stderr" variable (:constant-flag t) nil [14253 14278])
            ("g_test_trap_assert_stderr_unmatched" variable (:constant-flag t) nil [14396 14431])
            ("g_test_rand_bit" variable (:constant-flag t) nil [14589 14604])
            ((("G_GNUC_NORETURN" 0 nil nil nil)) variable (:type "int") nil [17471 17487])
            ((((0) "GTestConfig")) type (:superclasses ("" type (:members (((("test_initialized" 0 nil nil nil)) variable (:type ("gboolean" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19614 19645]) ((("test_quick" 0 nil nil nil)) variable (:type ("gboolean" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19648 19673]) ((("test_perf" 0 nil nil nil)) variable (:type ("gboolean" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19709 19733]) ((("test_verbose" 0 nil nil nil)) variable (:type ("gboolean" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19769 19796]) ((("test_quiet" 0 nil nil nil)) variable (:type ("gboolean" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19818 19843]) ((("test_undefined" 0 nil nil nil)) variable (:type ("gboolean" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19870 19899])) :type "struct") nil nil) :type "typedef") nil [19595 19955])
            ((("g_test_config_vars" 1 nil nil nil)) variable (:constant-flag t :type ("GTestConfig" type (:type "class") nil nil)) nil [19965 20010])
            ((((0) "GTestLogType")) type (:superclasses ("" type (:members (("G_TEST_LOG_NONE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20056 20072]) ("G_TEST_LOG_ERROR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20075 20092]) ("G_TEST_LOG_START_BINARY" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20119 20143]) ("G_TEST_LOG_LIST_CASE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20177 20198]) ("G_TEST_LOG_SKIP_CASE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20226 20247]) ("G_TEST_LOG_START_CASE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20275 20297]) ("G_TEST_LOG_STOP_CASE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20324 20345]) ("G_TEST_LOG_MIN_RESULT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20390 20412]) ("G_TEST_LOG_MAX_RESULT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20445 20467]) ("G_TEST_LOG_MESSAGE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20500 20519]) ("G_TEST_LOG_START_SUITE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20546 20569]) ("G_TEST_LOG_STOP_SUITE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20572 20595])) :type "enum") nil nil) :type "typedef") nil [20039 20609])
            ((((0) "GTestLogMsg")) type (:superclasses ("" type (:members (((("log_type" 0 nil nil nil)) variable (:type ("GTestLogType" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20630 20653]) ((("n_strings" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20656 20680]) ((("strings" 2 nil nil nil)) variable (:type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20683 20705]) ((("n_nums" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20730 20751]) ((("nums" 1 nil nil nil)) variable (:type "long double") (reparse-symbol classsubparts) [20754 20773])) :type "struct") nil nil) :type "typedef") nil [20611 20788])
            ((((0) "GTestLogBuffer")) type (:superclasses ("" type (:members (((("data" 1 nil nil nil)) variable (:type ("GString" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20826 20844]) ((("msgs" 1 nil nil nil)) variable (:type ("GSList" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20847 20865])) :type "struct") nil nil) :type "typedef") nil [20789 20883])
            ((((0) "GTestFileType")) type (:superclasses ("" type (:members (("G_TEST_DIST" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22996 23008]) ("G_TEST_BUILT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [23011 23025])) :type "enum") nil nil) :type "typedef") nil [22979 23040])
            ((("G_GNUC_NULL_TERMINATED" 0 nil nil nil)) variable (:type "int") nil [23275 23298])
            ((("G_GNUC_NULL_TERMINATED" 0 nil nil nil)) variable (:type "int") nil [23633 23656])
            ("g_test_assert_expected_messages" variable (:constant-flag t) nil [23666 23697]))          
      :file "gtestutils.h"
      :pointmax 23833
      :fsize 23832
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 23788 . 23799) (semantic-list 23472 . 23632) (symbol 23436 . 23455) (punctuation 23435 . 23436) (symbol 23429 . 23434) (CONST 23423 . 23428) (symbol 23400 . 23422) (punctuation 23398 . 23399) (semantic-list 23371 . 23398) (symbol 23335 . 23349) (punctuation 23334 . 23335) (symbol 23328 . 23333) (CONST 23322 . 23327) (symbol 23299 . 23321) (semantic-list 23114 . 23274) (symbol 23073 . 23094) (punctuation 23071 . 23072) (symbol 23065 . 23070) (symbol 23042 . 23064) (punctuation 22976 . 22977) (semantic-list 22736 . 22976) (symbol 22695 . 22735) (VOID 22687 . 22691) (symbol 22664 . 22686) (punctuation 22662 . 22663) (semantic-list 22482 . 22662) (symbol 22441 . 22462) (VOID 22433 . 22437) (symbol 22410 . 22432) (punctuation 22407 . 22408) (semantic-list 22309 . 22407) (symbol 22269 . 22297) (VOID 22264 . 22268) (symbol 22242 . 22263) (punctuation 22240 . 22241) (semantic-list 21986 . 22240) (semantic-list 21962 . 21982) (symbol 21946 . 21954) (TYPEDEF 21938 . 21945) (punctuation 21526 . 21527) (semantic-list 21504 . 21526) (symbol 21480 . 21499) (VOID 21464 . 21468) (symbol 21442 . 21463) (punctuation 21440 . 21441) (semantic-list 21415 . 21440) (symbol 21391 . 21412) (punctuation 21386 . 21387) (symbol 21375 . 21386) (symbol 21353 . 21374) (punctuation 21351 . 21352) (semantic-list 21196 . 21351) (symbol 21172 . 21194) (VOID 21156 . 21160) (symbol 21134 . 21155) (punctuation 21132 . 21133) (semantic-list 21107 . 21132) (symbol 21083 . 21105) (VOID 21067 . 21071) (symbol 21045 . 21066) (punctuation 21043 . 21044) (semantic-list 21037 . 21043) (symbol 21013 . 21034) (punctuation 21011 . 21012) (symbol 20997 . 21011) (symbol 20975 . 20996) (punctuation 20973 . 20974) (semantic-list 20947 . 20973) (symbol 20923 . 20943) (punctuation 20917 . 20918) (CHAR 20913 . 20917) (CONST 20907 . 20912) (symbol 20885 . 20906) (symbol 19956 . 19964) (punctuation 19593 . 19594) (semantic-list 19216 . 19593) (symbol 19184 . 19201) (VOID 19176 . 19180) (symbol 19154 . 19175) (punctuation 19152 . 19153) (semantic-list 18672 . 19152) (symbol 18640 . 18665) (VOID 18632 . 18636) (symbol 18610 . 18631) (punctuation 18608 . 18609) (semantic-list 18078 . 18608) (symbol 18046 . 18072) (VOID 18038 . 18042) (symbol 18016 . 18037) (punctuation 18014 . 18015) (semantic-list 17550 . 18014) (symbol 17518 . 17544) (VOID 17510 . 17514) (symbol 17488 . 17509) (semantic-list 17194 . 17470) (symbol 17162 . 17186) (VOID 17154 . 17158) (symbol 17132 . 17153) (punctuation 17130 . 17131) (semantic-list 16851 . 17130) (symbol 16819 . 16838) (VOID 16811 . 16815) (symbol 16789 . 16810) (punctuation 16787 . 16788) (semantic-list 16385 . 16787) (symbol 16353 . 16375) (VOID 16345 . 16349) (symbol 16323 . 16344) (punctuation 16320 . 16321) (semantic-list 16297 . 16320) (symbol 16271 . 16287) (INT 16257 . 16260) (symbol 16235 . 16256) (punctuation 16233 . 16234) (semantic-list 16140 . 16233) (symbol 16114 . 16136) (VOID 16100 . 16104) (symbol 16078 . 16099) (punctuation 16076 . 16077) (semantic-list 15985 . 16076) (symbol 15959 . 15975) (VOID 15945 . 15949) (symbol 15923 . 15944) (punctuation 15921 . 15922) (semantic-list 15915 . 15921) (symbol 15889 . 15904) (punctuation 15885 . 15886) (symbol 15875 . 15885) (symbol 15853 . 15874) (punctuation 15851 . 15852) (semantic-list 15821 . 15851) (symbol 15795 . 15814) (punctuation 15791 . 15792) (symbol 15781 . 15791) (symbol 15759 . 15780) (punctuation 15757 . 15758) (semantic-list 15373 . 15757) (symbol 15347 . 15365) (punctuation 15342 . 15343) (symbol 15333 . 15342) (symbol 15311 . 15332) (punctuation 15107 . 15108) (semantic-list 15010 . 15107) (symbol 14979 . 15003) (DOUBLE 14970 . 14976) (symbol 14948 . 14969) (punctuation 14946 . 14947) (semantic-list 14940 . 14946) (symbol 14909 . 14927) (DOUBLE 14900 . 14906) (symbol 14878 . 14899) (punctuation 14876 . 14877) (semantic-list 14791 . 14876) (symbol 14760 . 14781) (symbol 14751 . 14757) (symbol 14729 . 14750) (punctuation 14727 . 14728) (semantic-list 14721 . 14727) (symbol 14690 . 14705) (symbol 14681 . 14687) (symbol 14659 . 14680) (punctuation 13690 . 13691) (semantic-list 13684 . 13690) (symbol 13653 . 13680) (symbol 13644 . 13652) (symbol 13622 . 13643) (punctuation 13620 . 13621) (semantic-list 13614 . 13620) (symbol 13583 . 13605) (symbol 13574 . 13582) (symbol 13552 . 13573) (punctuation 13549 . 13550) (semantic-list 13364 . 13549) (symbol 13333 . 13355) (VOID 13324 . 13328) (symbol 13301 . 13323) (number 13274 . 13275) (punctuation 13272 . 13273) (punctuation 13271 . 13272) (number 13229 . 13230) (punctuation 13227 . 13228) (punctuation 13226 . 13227) (number 13184 . 13185) (punctuation 13182 . 13183) (punctuation 13181 . 13182) (punctuation 13124 . 13125) (semantic-list 13010 . 13124) (symbol 12979 . 12995) (symbol 12970 . 12978) (semantic-list 12945 . 12969) (symbol 12917 . 12944) (number 12896 . 12897) (punctuation 12894 . 12895) (punctuation 12893 . 12894) (number 12854 . 12855) (punctuation 12852 . 12853) (punctuation 12851 . 12852) (number 12812 . 12813) (punctuation 12810 . 12811) (punctuation 12809 . 12810) (punctuation 12668 . 12669) (semantic-list 12569 . 12668) (symbol 12537 . 12557) (VOID 12529 . 12533) (symbol 12507 . 12528) (punctuation 12505 . 12506) (semantic-list 12481 . 12505) (symbol 12449 . 12466) (VOID 12441 . 12445) (symbol 12419 . 12440) (punctuation 12322 . 12323) (semantic-list 12316 . 12322) (symbol 12284 . 12301) (DOUBLE 12276 . 12282) (symbol 12254 . 12275) (punctuation 12230 . 12231) (semantic-list 12224 . 12230) (symbol 12192 . 12212) (DOUBLE 12184 . 12190) (symbol 12162 . 12183) (punctuation 12160 . 12161) (semantic-list 12154 . 12160) (symbol 12122 . 12140) (VOID 12114 . 12118) (symbol 12092 . 12113) (punctuation 12063 . 12064) (semantic-list 12034 . 12063) (symbol 12002 . 12012) (VOID 11994 . 11998) (symbol 11972 . 11993) (punctuation 11970 . 11971) (semantic-list 11945 . 11970) (symbol 11913 . 11928) (VOID 11905 . 11909) (symbol 11883 . 11904) (number 11879 . 11880) (number 11876 . 11877) (semantic-list 11794 . 11860) (symbol 11762 . 11776) (VOID 11754 . 11758) (symbol 11732 . 11753) (punctuation 10678 . 10679) (semantic-list 10672 . 10678) (symbol 10640 . 10670) (VOID 10632 . 10636) (symbol 10609 . 10631) (punctuation 10607 . 10608) (semantic-list 10601 . 10607) (symbol 10570 . 10583) (symbol 10561 . 10569) (symbol 10538 . 10560) (punctuation 10536 . 10537) (semantic-list 10518 . 10536) (symbol 10486 . 10497) (VOID 10478 . 10482) (symbol 10455 . 10477) (punctuation 10453 . 10454) (semantic-list 10435 . 10453) (symbol 10403 . 10420) (VOID 10395 . 10399) (symbol 10372 . 10394) (punctuation 10370 . 10371) (semantic-list 10364 . 10370) (symbol 10332 . 10343) (VOID 10324 . 10328) (symbol 10301 . 10323) (punctuation 10273 . 10274) (semantic-list 10038 . 10273) (symbol 10006 . 10031) (VOID 9998 . 10002) (symbol 9975 . 9997) (punctuation 9972 . 9973) (semantic-list 9810 . 9972) (symbol 9778 . 9798) (VOID 9770 . 9774) (symbol 9748 . 9769) (punctuation 9745 . 9746) (semantic-list 9651 . 9745) (symbol 9619 . 9634) (VOID 9611 . 9615) (symbol 9589 . 9610) (punctuation 9540 . 9541) (semantic-list 9534 . 9540) (symbol 9502 . 9512) (INT 9494 . 9497) (symbol 9472 . 9493) (punctuation 9418 . 9419) (semantic-list 9412 . 9418) (symbol 9394 . 9411) (symbol 9385 . 9393) (symbol 9362 . 9384) (semantic-list 8572 . 8703) (symbol 8540 . 8551) (VOID 8532 . 8536) (symbol 8510 . 8531) (number 8470 . 8471) (number 8467 . 8468) (semantic-list 8304 . 8451) (symbol 8272 . 8295) (VOID 8264 . 8268) (symbol 8242 . 8263) (number 8238 . 8239) (number 8235 . 8236) (semantic-list 8072 . 8219) (symbol 8040 . 8063) (VOID 8032 . 8036) (symbol 8010 . 8031) (punctuation 7974 . 7975) (semantic-list 7889 . 7974) (symbol 7857 . 7866) (INT 7849 . 7852) (symbol 7827 . 7848) (punctuation 1343 . 1344) (semantic-list 1261 . 1343) (semantic-list 1241 . 1260) (VOID 1236 . 1240) (TYPEDEF 1228 . 1235) (punctuation 1226 . 1227) (semantic-list 1201 . 1226) (semantic-list 1181 . 1197) (VOID 1176 . 1180) (TYPEDEF 1168 . 1175) (punctuation 1166 . 1167) (semantic-list 1160 . 1166) (semantic-list 1140 . 1152) (VOID 1135 . 1139) (TYPEDEF 1127 . 1134) (symbol 1037 . 1050) (string 882 . 923) (symbol 876 . 881) (punctuation 875 . 876))
      :lexical-table 
        '(("g_assert_cmpstr" (spp-arg-list ("s1" "cmp" "s2") 1389 . 1402) . 
              ((symbol "G_STMT_START" 1406 . 1418) (semantic-list "{ \\
                                             const char *__s1 = (s1), *__s2 = (s2); \\
                                             if (g_strcmp0 (__s1, __s2) cmp 0) ; else \\
                                               g_assertion_message_cmpstr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, \\
                                                 #s1 \" \" #cmp \" \" #s2, __s1, #cmp, __s2); \\
                                        }" 1419 . 1852) (symbol "G_STMT_END" 1853 . 1863)))
          ("g_assert_cmpmem" (spp-arg-list ("m1" "l1" "m2" "l2") 3821 . 3837) . 
              ((symbol "G_STMT_START" 3838 . 3850) (semantic-list "{\\
                                             gconstpointer __m1 = m1, __m2 = m2; \\
                                             int __l1 = l1, __l2 = l2; \\
                                             if (__l1 != __l2) \\
                                               g_assertion_message_cmpnum (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, \\
                                                                           #l1 \" (len(\" #m1 \")) == \" #l2 \" (len(\" #m2 \"))\", __l1, \"==\", __l2, 'i'); \\
                                             else if (memcmp (__m1, __m2, __l1) != 0) \\
                                               g_assertion_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, \\
                                                                    \"assertion failed (\" #m1 \" == \" #m2 \")\"); \\
                                        }" 3851 . 4703) (symbol "G_STMT_END" 4704 . 4714)))
          ("g_test_trap_assert_failed" (spp-arg-list nil 13859 . 13861) . ((symbol "g_test_trap_assertions" 13883 . 13905) (semantic-list "(G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, 1, 0)" 13906 . 13957)))
          ("g_test_trap_assert_stdout" (spp-arg-list ("soutpattern") 13992 . 14005) . ((symbol "g_test_trap_assertions" 14016 . 14038) (semantic-list "(G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, 2, soutpattern)" 14039 . 14100)))
          ("g_test_quick" (spp-arg-list nil 8864 . 8866) . ((semantic-list "(g_test_config_vars->test_quick)" 8884 . 8916)))
          ("g_test_slow" (spp-arg-list nil 8936 . 8938) . ((semantic-list "(!g_test_config_vars->test_quick)" 8957 . 8990)))
          ("g_test_queue_unref" (spp-arg-list ("gobject") 12696 . 12705) . ((symbol "g_test_queue_destroy" 12710 . 12730) (semantic-list "(g_object_unref, gobject)" 12731 . 12756)))
          ("g_test_trap_assert_stderr_unmatched" (spp-arg-list ("serrpattern") 14431 . 14444) . ((symbol "g_test_trap_assertions" 14445 . 14467) (semantic-list "(G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, 5, serrpattern)" 14468 . 14529)))
          ("g_assert_nonnull" (spp-arg-list ("expr") 6664 . 6670) . 
              ((symbol "G_STMT_START" 6680 . 6692) (semantic-list "{ \\
                                             if G_LIKELY ((expr) != NULL) ; else \\
                                               g_assertion_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, \\
                                                                    \"'\" #expr \"' should not be NULL\"); \\
                                        }" 6693 . 7041) (symbol "G_STMT_END" 7042 . 7052)))
          ("g_test_quiet" (spp-arg-list nil 9232 . 9234) . ((semantic-list "(g_test_config_vars->test_quiet)" 9252 . 9284)))
          ("g_test_trap_assert_stderr" (spp-arg-list ("serrpattern") 14278 . 14291) . ((symbol "g_test_trap_assertions" 14302 . 14324) (semantic-list "(G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, 4, serrpattern)" 14325 . 14386)))
          ("g_assert_cmphex" (spp-arg-list ("n1" "cmp" "n2") 2852 . 2865) . 
              ((symbol "G_STMT_START" 2869 . 2881) (semantic-list "{\\
                                             guint64 __n1 = (n1), __n2 = (n2); \\
                                             if (__n1 cmp __n2) ; else \\
                                               g_assertion_message_cmpnum (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, \\
                                                 #n1 \" \" #cmp \" \" #n2, __n1, #cmp, __n2, 'x'); \\
                                        }" 2882 . 3299) (symbol "G_STMT_END" 3300 . 3310)))
          ("g_assert_true" (spp-arg-list ("expr") 5497 . 5503) . 
              ((symbol "G_STMT_START" 5516 . 5528) (semantic-list "{ \\
                                             if G_LIKELY (expr) ; else \\
                                               g_assertion_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, \\
                                                                    \"'\" #expr \"' should be TRUE\"); \\
                                        }" 5529 . 5863) (symbol "G_STMT_END" 5864 . 5874)))
          ("g_assert_not_reached" (spp-arg-list nil 7291 . 7293) . 
              ((symbol "G_STMT_START" 7303 . 7315) (semantic-list "{ g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, NULL); }" 7316 . 7397) (symbol "G_STMT_END" 7398 . 7408)))
          ("g_test_perf" (spp-arg-list nil 9084 . 9086) . ((semantic-list "(g_test_config_vars->test_perf)" 9105 . 9136)))
          ("g_assert_cmpfloat" (spp-arg-list ("n1" "cmp" "n2") 3336 . 3347) . 
              ((symbol "G_STMT_START" 3351 . 3363) (semantic-list "{ \\
                                             long double __n1 = (n1), __n2 = (n2); \\
                                             if (__n1 cmp __n2) ; else \\
                                               g_assertion_message_cmpnum (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, \\
                                                 #n1 \" \" #cmp \" \" #n2, __n1, #cmp, __n2, 'f'); \\
                                        }" 3364 . 3786) (symbol "G_STMT_END" 3787 . 3797)))
          ("g_assert_null" (spp-arg-list ("expr") 6299 . 6305) . 
              ((symbol "G_STMT_START" 6318 . 6330) (semantic-list "{ if G_LIKELY ((expr) == NULL) ; else \\
                                               g_assertion_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, \\
                                                                    \"'\" #expr \"' should be NULL\"); \\
                                        }" 6331 . 6628) (symbol "G_STMT_END" 6629 . 6639)))
          ("g_test_thorough" (spp-arg-list nil 9014 . 9016) . ((semantic-list "(!g_test_config_vars->test_quick)" 9031 . 9064)))
          ("g_test_trap_assert_stdout_unmatched" (spp-arg-list ("soutpattern") 14145 . 14158) . ((symbol "g_test_trap_assertions" 14159 . 14181) (semantic-list "(G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, 3, soutpattern)" 14182 . 14243)))
          ("g_assert_false" (spp-arg-list ("expr") 5897 . 5903) . 
              ((symbol "G_STMT_START" 5915 . 5927) (semantic-list "{ \\
                                             if G_LIKELY (!(expr)) ; else \\
                                               g_assertion_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, \\
                                                                    \"'\" #expr \"' should be FALSE\"); \\
                                        }" 5928 . 6266) (symbol "G_STMT_END" 6267 . 6277)))
          ("g_test_trap_assert_passed" (spp-arg-list nil 13726 . 13728) . ((symbol "g_test_trap_assertions" 13750 . 13772) (semantic-list "(G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, 0, 0)" 13773 . 13824)))
          ("g_test_rand_bit" (spp-arg-list nil 14604 . 14606) . ((semantic-list "(0 != (g_test_rand_int() & (1 << 15)))" 14620 . 14658)))
          ("__G_TEST_UTILS_H__")
          ("g_assert" (spp-arg-list ("expr") 7425 . 7431) . 
              ((symbol "G_STMT_START" 7449 . 7461) (semantic-list "{ \\
                                             if G_LIKELY (expr) ; else \\
                                               g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, \\
                                                                         #expr); \\
                                        }" 7462 . 7783) (symbol "G_STMT_END" 7784 . 7794)))
          ("g_test_verbose" (spp-arg-list nil 9159 . 9161) . ((semantic-list "(g_test_config_vars->test_verbose)" 9177 . 9211)))
          ("g_test_undefined" (spp-arg-list nil 9309 . 9311) . ((semantic-list "(g_test_config_vars->test_undefined)" 9325 . 9361)))
          ("g_test_assert_expected_messages" (spp-arg-list nil 23697 . 23699) . ((symbol "g_test_assert_expected_messages_internal" 23700 . 23740) (semantic-list "(G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC)" 23741 . 23786)))
          ("g_assert_cmpuint" (spp-arg-list ("n1" "cmp" "n2") 2370 . 2383) . 
              ((symbol "G_STMT_START" 2386 . 2398) (semantic-list "{ \\
                                             guint64 __n1 = (n1), __n2 = (n2); \\
                                             if (__n1 cmp __n2) ; else \\
                                               g_assertion_message_cmpnum (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, \\
                                                 #n1 \" \" #cmp \" \" #n2, __n1, #cmp, __n2, 'i'); \\
                                        }" 2399 . 2817) (symbol "G_STMT_END" 2818 . 2828)))
          ("g_assert_no_error" (spp-arg-list ("err") 4740 . 4745) . 
              ((symbol "G_STMT_START" 4755 . 4767) (semantic-list "{ \\
                                             if (err) \\
                                               g_assertion_message_error (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, \\
                                                 #err, err, 0, 0); \\
                                        }" 4768 . 5059) (symbol "G_STMT_END" 5060 . 5070)))
          ("g_test_add" (spp-arg-list ("testpath" "Fixture" "tdata" "fsetup" "ftest" "fteardown") 10749 . 10801) . 
              ((symbol "G_STMT_START" 10809 . 10821) (semantic-list "{			\\
                                         void (*add_vtable) (const char*,       \\
                                                    gsize,             \\
                                                    gconstpointer,     \\
                                                    void (*) (Fixture*, gconstpointer),   \\
                                                    void (*) (Fixture*, gconstpointer),   \\
                                                    void (*) (Fixture*, gconstpointer)) =  (void (*) (const gchar *, gsize, gconstpointer, void (*) (Fixture*, gconstpointer), void (*) (Fixture*, gconstpointer), void (*) (Fixture*, gconstpointer))) g_test_add_vtable; \\
                                         add_vtable \\
                                          (testpath, sizeof (Fixture), tdata, fsetup, ftest, fteardown); \\
					}" 10822 . 11676) (symbol "G_STMT_END" 11677 . 11687)))
          ("g_assert_cmpint" (spp-arg-list ("n1" "cmp" "n2") 1887 . 1900) . 
              ((symbol "G_STMT_START" 1904 . 1916) (semantic-list "{ \\
                                             gint64 __n1 = (n1), __n2 = (n2); \\
                                             if (__n1 cmp __n2) ; else \\
                                               g_assertion_message_cmpnum (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, \\
                                                 #n1 \" \" #cmp \" \" #n2, __n1, #cmp, __n2, 'i'); \\
                                        }" 1917 . 2334) (symbol "G_STMT_END" 2335 . 2345)))
          ("g_assert_error" (spp-arg-list ("err" "dom" "c") 5093 . 5106) . 
              ((symbol "G_STMT_START" 5111 . 5123) (semantic-list "{ \\
                                               if (!err || (err)->domain != dom || (err)->code != c) \\
                                               g_assertion_message_error (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, \\
                                                 #err, err, dom, c); \\
                                        }" 5124 . 5464) (symbol "G_STMT_END" 5465 . 5475)))
          ("g_test_initialized" (spp-arg-list nil 8791 . 8793) . ((semantic-list "(g_test_config_vars->test_initialized)" 8805 . 8843)))
          )
)
    (semanticdb-table "gthread.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_THREAD_H__" variable (:constant-flag t) nil [1085 1099])
            ("glib/gatomic.h" include (:system-flag t) nil [1222 1247])
            ("glib/gerror.h" include (:system-flag t) nil [1248 1272])
            ("glib/gutils.h" include (:system-flag t) nil [1273 1297])
            ("G_THREAD_ERROR" variable (:constant-flag t) nil [1322 1336])
            ((((0) "GThreadError")) type (:superclasses ("" type (:members (("G_THREAD_ERROR_AGAIN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1437 1498])) :type "enum") nil nil) :type "typedef") nil [1420 1512])
            ((((0) "GThread")) type (:superclasses ("_GThread" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1564 1604])
            ((((0) "GMutex")) type (:superclasses ("_GMutex" type (:type "union") nil nil) :type "typedef") nil [1606 1645])
            ((((0) "GRecMutex")) type (:superclasses ("_GRecMutex" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1646 1688])
            ((((0) "GRWLock")) type (:superclasses ("_GRWLock" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1689 1729])
            ((((0) "GCond")) type (:superclasses ("_GCond" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1730 1768])
            ((((0) "GPrivate")) type (:superclasses ("_GPrivate" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1769 1810])
            ((((0) "GOnce")) type (:superclasses ("_GOnce" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1811 1849])
            ("_GMutex" type
               (:members (((("p" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1887 1898]) ((("i" 0 nil (1) nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1901 1912]))
                :type "union")
                nil [1851 1915])
            ("_GRWLock" type
               (:members (((("p" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1955 1966]) ((("i" 0 nil (1) nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1969 1980]))
                :type "struct")
                nil [1917 1983])
            ("_GCond" type
               (:members (((("p" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2021 2032]) ((("i" 0 nil (1) nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2035 2046]))
                :type "struct")
                nil [1985 2049])
            ("_GRecMutex" type
               (:members (((("p" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2091 2102]) ((("i" 0 nil (1) nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2105 2116]))
                :type "struct")
                nil [2051 2119])
            ("G_PRIVATE_INIT" variable (:constant-flag t) nil [2129 2143])
            ("_GPrivate" type
               (:members (((("p" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2226 2243]) ((("notify" 0 nil nil nil)) variable (:type ("GDestroyNotify" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2246 2268]) ((("future" 0 nil (1) nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2271 2290]))
                :type "struct")
                nil [2187 2293])
            ((((0) "GOnceStatus")) type (:superclasses ("" type (:members (("G_ONCE_STATUS_NOTCALLED" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2312 2336]) ("G_ONCE_STATUS_PROGRESS" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2339 2362]) ("G_ONCE_STATUS_READY" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [2365 2386])) :type "enum") nil nil) :type "typedef") nil [2295 2399])
            ("G_ONCE_INIT" variable (:constant-flag t) nil [2409 2420])
            ("_GOnce" type
               (:members (((("status" 0 nil nil nil)) variable (:typemodifiers ("volatile") :type ("GOnceStatus" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2473 2501]) ((("retval" 0 nil nil nil)) variable (:typemodifiers ("volatile") :type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2504 2529]))
                :type "struct")
                nil [2455 2532])
            ("G_LOCK_NAME" variable (:constant-flag t) nil [2542 2553])
            ("G_LOCK_DEFINE_STATIC" variable (:constant-flag t) nil [2601 2621])
            ("G_LOCK_DEFINE" variable (:constant-flag t) nil [2667 2680])
            ("G_LOCK_EXTERN" variable (:constant-flag t) nil [2731 2744])
            ("G_LOCK" variable (:constant-flag t) nil [4000 4006])
            ("G_UNLOCK" variable (:constant-flag t) nil [4064 4072])
            ("G_TRYLOCK" variable (:constant-flag t) nil [4128 4137])
            ("g_once" variable (:constant-flag t) nil [8947 8953])
            ("g_once_init_enter" variable (:constant-flag t) nil [9898 9915])
            ("g_once_init_leave" variable (:constant-flag t) nil [9971 9988])
            ((((0) "GMutexLocker")) type (:superclasses ("void") :type "typedef") nil [10234 10260]))          
      :file "gthread.h"
      :pointmax 11611
      :fsize 11610
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 11570 . 11581) (semantic-list 11527 . 11568) (semantic-list 11504 . 11526) (symbol 11484 . 11503) (VOID 11479 . 11483) (INLINE 11472 . 11478) (STATIC 11465 . 11471) (semantic-list 11258 . 11318) (semantic-list 11242 . 11257) (symbol 11223 . 11241) (punctuation 11221 . 11222) (symbol 11208 . 11220) (INLINE 11201 . 11207) (STATIC 11194 . 11200) (punctuation 10134 . 10135) (semantic-list 10128 . 10134) (symbol 10107 . 10127) (symbol 10092 . 10097) (symbol 10069 . 10091) (punctuation 8779 . 8780) (semantic-list 8680 . 8779) (symbol 8648 . 8665) (VOID 8632 . 8636) (symbol 8610 . 8631) (punctuation 8608 . 8609) (semantic-list 8582 . 8608) (symbol 8550 . 8567) (symbol 8534 . 8542) (symbol 8512 . 8533) (punctuation 8510 . 8511) (semantic-list 8347 . 8510) (symbol 8315 . 8326) (symbol 8299 . 8307) (symbol 8277 . 8298) (punctuation 8274 . 8275) (semantic-list 8181 . 8274) (symbol 8149 . 8166) (VOID 8133 . 8137) (symbol 8110 . 8132) (punctuation 8108 . 8109) (semantic-list 8015 . 8108) (symbol 7983 . 7996) (VOID 7967 . 7971) (symbol 7945 . 7966) (punctuation 7943 . 7944) (semantic-list 7922 . 7943) (symbol 7890 . 7903) (symbol 7874 . 7882) (symbol 7852 . 7873) (punctuation 7849 . 7850) (semantic-list 7680 . 7849) (symbol 7648 . 7665) (symbol 7632 . 7640) (symbol 7609 . 7631) (punctuation 7607 . 7608) (semantic-list 7585 . 7607) (symbol 7553 . 7569) (VOID 7537 . 7541) (symbol 7515 . 7536) (punctuation 7513 . 7514) (semantic-list 7491 . 7513) (symbol 7459 . 7472) (VOID 7443 . 7447) (symbol 7421 . 7442) (punctuation 7419 . 7420) (semantic-list 7325 . 7419) (symbol 7293 . 7304) (VOID 7277 . 7281) (symbol 7255 . 7276) (punctuation 7253 . 7254) (semantic-list 7231 . 7253) (symbol 7199 . 7211) (VOID 7183 . 7187) (symbol 7160 . 7182) (punctuation 7158 . 7159) (semantic-list 7136 . 7158) (symbol 7104 . 7115) (VOID 7088 . 7092) (symbol 7065 . 7087) (punctuation 7062 . 7063) (semantic-list 7035 . 7062) (symbol 7003 . 7021) (VOID 6987 . 6991) (symbol 6964 . 6986) (punctuation 6962 . 6963) (semantic-list 6935 . 6962) (symbol 6903 . 6922) (symbol 6887 . 6895) (symbol 6864 . 6886) (punctuation 6862 . 6863) (semantic-list 6835 . 6862) (symbol 6803 . 6819) (VOID 6787 . 6791) (symbol 6764 . 6786) (punctuation 6762 . 6763) (semantic-list 6735 . 6762) (symbol 6703 . 6720) (VOID 6687 . 6691) (symbol 6664 . 6686) (punctuation 6662 . 6663) (semantic-list 6635 . 6662) (symbol 6603 . 6619) (VOID 6587 . 6591) (symbol 6564 . 6586) (punctuation 6561 . 6562) (semantic-list 6536 . 6561) (symbol 6504 . 6527) (VOID 6488 . 6492) (symbol 6465 . 6487) (punctuation 6463 . 6464) (semantic-list 6438 . 6463) (symbol 6406 . 6430) (symbol 6390 . 6398) (symbol 6367 . 6389) (punctuation 6365 . 6366) (semantic-list 6340 . 6365) (symbol 6308 . 6329) (VOID 6292 . 6296) (symbol 6269 . 6291) (punctuation 6267 . 6268) (semantic-list 6242 . 6267) (symbol 6210 . 6233) (VOID 6194 . 6198) (symbol 6171 . 6193) (punctuation 6169 . 6170) (semantic-list 6144 . 6169) (symbol 6112 . 6136) (symbol 6096 . 6104) (symbol 6073 . 6095) (punctuation 6071 . 6072) (semantic-list 6046 . 6071) (symbol 6014 . 6035) (VOID 5998 . 6002) (symbol 5975 . 5997) (punctuation 5973 . 5974) (semantic-list 5948 . 5973) (symbol 5916 . 5931) (VOID 5900 . 5904) (symbol 5877 . 5899) (punctuation 5875 . 5876) (semantic-list 5850 . 5875) (symbol 5818 . 5832) (VOID 5802 . 5806) (symbol 5779 . 5801) (punctuation 5776 . 5777) (semantic-list 5753 . 5776) (symbol 5721 . 5735) (VOID 5705 . 5709) (symbol 5683 . 5704) (punctuation 5681 . 5682) (semantic-list 5658 . 5681) (symbol 5626 . 5641) (symbol 5610 . 5618) (symbol 5588 . 5609) (punctuation 5586 . 5587) (semantic-list 5563 . 5586) (symbol 5531 . 5543) (VOID 5515 . 5519) (symbol 5493 . 5514) (punctuation 5491 . 5492) (semantic-list 5468 . 5491) (symbol 5436 . 5449) (VOID 5420 . 5424) (symbol 5397 . 5419) (punctuation 5395 . 5396) (semantic-list 5372 . 5395) (symbol 5340 . 5352) (VOID 5324 . 5328) (symbol 5301 . 5323) (punctuation 5297 . 5298) (semantic-list 5291 . 5297) (symbol 5259 . 5273) (VOID 5243 . 5247) (symbol 5221 . 5242) (punctuation 5219 . 5220) (semantic-list 5195 . 5219) (symbol 5163 . 5176) (symbol 5147 . 5155) (symbol 5125 . 5146) (punctuation 5123 . 5124) (semantic-list 5099 . 5123) (symbol 5067 . 5080) (VOID 5051 . 5055) (symbol 5029 . 5050) (punctuation 5027 . 5028) (semantic-list 5021 . 5027) (symbol 4989 . 5002) (punctuation 4981 . 4982) (symbol 4973 . 4980) (symbol 4951 . 4972) (punctuation 4949 . 4950) (semantic-list 4713 . 4949) (symbol 4681 . 4697) (punctuation 4673 . 4674) (symbol 4665 . 4672) (symbol 4642 . 4664) (punctuation 4640 . 4641) (semantic-list 4476 . 4640) (symbol 4444 . 4456) (punctuation 4436 . 4437) (symbol 4428 . 4435) (symbol 4405 . 4427) (punctuation 4403 . 4404) (semantic-list 4379 . 4403) (symbol 4347 . 4361) (VOID 4331 . 4335) (symbol 4308 . 4330) (punctuation 4306 . 4307) (semantic-list 4282 . 4306) (symbol 4250 . 4262) (punctuation 4242 . 4243) (symbol 4234 . 4241) (symbol 4211 . 4233) (punctuation 1561 . 1562) (semantic-list 1546 . 1561) (semantic-list 1531 . 1545) (symbol 1522 . 1530) (TYPEDEF 1514 . 1521) (punctuation 1417 . 1418) (semantic-list 1411 . 1417) (symbol 1390 . 1410) (symbol 1383 . 1389) (symbol 1361 . 1382) (symbol 1299 . 1312) (string 1172 . 1213) (symbol 1166 . 1171) (punctuation 1165 . 1166))
      :lexical-table 
        '(("g_once_init_leave" (spp-arg-list ("location" "result") 9988 . 10006) . ((semantic-list "(g_once_init_leave((location), (gsize) (result)))" 10011 . 10060)))
          ("G_THREAD_ERROR" . ((symbol "g_thread_error_quark" 1337 . 1357) (semantic-list "()" 1358 . 1360)))
          ("G_LOCK_DEFINE" (spp-arg-list ("name") 2680 . 2686) . 
              ((symbol "GMutex" 2697 . 2703) (symbol "G_LOCK_NAME" 2704 . 2715) (semantic-list "(name)" 2716 . 2722)))
          ("G_LOCK_EXTERN" (spp-arg-list ("name") 2744 . 2750) . 
              ((EXTERN "extern" 2761 . 2767) (symbol "GMutex" 2768 . 2774) (symbol "G_LOCK_NAME" 2775 . 2786) (semantic-list "(name)" 2787 . 2793)))
          ("G_ONCE_INIT" . ((semantic-list "{ G_ONCE_STATUS_NOTCALLED, NULL }" 2421 . 2454)))
          ("G_PRIVATE_INIT" (spp-arg-list ("notify") 2143 . 2151) . ((semantic-list "{ NULL, (notify), { NULL, NULL } }" 2152 . 2186)))
          ("G_LOCK_DEFINE_STATIC" (spp-arg-list ("name") 2621 . 2627) . 
              ((STATIC "static" 2631 . 2637) (symbol "G_LOCK_DEFINE" 2638 . 2651) (semantic-list "(name)" 2652 . 2658)))
          ("G_UNLOCK" (spp-arg-list ("name") 4072 . 4078) . ((symbol "g_mutex_unlock" 4079 . 4093) (semantic-list "(&G_LOCK_NAME (name))" 4096 . 4117)))
          ("g_once_init_enter" (spp-arg-list ("location") 9915 . 9925) . ((semantic-list "(g_once_init_enter((location)))" 9930 . 9961)))
          ("g_once" (spp-arg-list ("once" "func" "arg") 8953 . 8970) . ((semantic-list "(((once)->status == G_ONCE_STATUS_READY) ? \\
   (once)->retval : \\
   g_once_impl ((once), (func), (arg)))" 8975 . 9081)))
          ("G_LOCK_NAME" (spp-arg-list ("name") 2553 . 2559) . ((spp-symbol-merge ((spp-symbol-merge ((symbol "g__" 2572 . 2575) (symbol "name" 2579 . 2583)) 2572 . 2583) (symbol "_lock" 2587 . 2592)) 2572 . 2592)))
          ("G_TRYLOCK" (spp-arg-list ("name") 4137 . 4143) . ((symbol "g_mutex_trylock" 4144 . 4159) (semantic-list "(&G_LOCK_NAME (name))" 4160 . 4181)))
          ("G_LOCK" (spp-arg-list ("name") 4006 . 4012) . ((symbol "g_mutex_lock" 4013 . 4025) (semantic-list "(&G_LOCK_NAME (name))" 4032 . 4053)))
          ("__G_THREAD_H__")
          )
)
    (semanticdb-table "gthreadpool.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_THREADPOOL_H__" variable (:constant-flag t) nil [1089 1107])
            ("glib/gthread.h" include (:system-flag t) nil [1230 1255])
            ((((0) "GThreadPool")) type (:superclasses ("_GThreadPool" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1272 1312])
            ("_GThreadPool" type
               (:members (((("func" 0 nil nil nil)) variable (:type ("GFunc" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1359 1370]) ((("user_data" 0 nil nil nil)) variable (:type ("gpointer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1373 1392]) ((("exclusive" 0 nil nil nil)) variable (:type ("gboolean" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1395 1414]))
                :type "struct")
                nil [1335 1417]))          
      :file "gthreadpool.h"
      :pointmax 3823
      :fsize 3822
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 3778 . 3789) (punctuation 3775 . 3776) (semantic-list 3769 . 3775) (symbol 3732 . 3763) (symbol 3716 . 3721) (symbol 3694 . 3715) (punctuation 3692 . 3693) (semantic-list 3676 . 3692) (symbol 3639 . 3670) (VOID 3623 . 3627) (symbol 3601 . 3622) (punctuation 3599 . 3600) (semantic-list 3593 . 3599) (symbol 3556 . 3589) (VOID 3540 . 3544) (symbol 3518 . 3539) (punctuation 3516 . 3517) (semantic-list 3510 . 3516) (symbol 3473 . 3509) (symbol 3457 . 3462) (symbol 3435 . 3456) (punctuation 3433 . 3434) (semantic-list 3427 . 3433) (symbol 3390 . 3426) (symbol 3374 . 3378) (symbol 3352 . 3373) (punctuation 3350 . 3351) (semantic-list 3331 . 3350) (symbol 3294 . 3330) (VOID 3278 . 3282) (symbol 3256 . 3277) (punctuation 3253 . 3254) (semantic-list 3230 . 3253) (symbol 3198 . 3227) (symbol 3182 . 3187) (symbol 3160 . 3181) (punctuation 3158 . 3159) (semantic-list 3135 . 3158) (symbol 3103 . 3132) (symbol 3087 . 3091) (symbol 3065 . 3086) (punctuation 3063 . 3064) (semantic-list 2888 . 3063) (symbol 2856 . 2885) (symbol 2840 . 2848) (symbol 2818 . 2839) (punctuation 2815 . 2816) (semantic-list 2718 . 2815) (symbol 2686 . 2713) (symbol 2670 . 2678) (symbol 2647 . 2669) (punctuation 2645 . 2646) (semantic-list 2470 . 2645) (symbol 2438 . 2469) (VOID 2422 . 2426) (symbol 2400 . 2421) (punctuation 2398 . 2399) (semantic-list 2375 . 2398) (symbol 2343 . 2368) (symbol 2327 . 2332) (symbol 2305 . 2326) (punctuation 2303 . 2304) (semantic-list 2135 . 2303) (symbol 2103 . 2121) (symbol 2087 . 2095) (symbol 2065 . 2086) (punctuation 2063 . 2064) (semantic-list 1890 . 2063) (symbol 1858 . 1876) (VOID 1842 . 1846) (symbol 1820 . 1841) (punctuation 1818 . 1819) (semantic-list 1489 . 1818) (symbol 1457 . 1474) (punctuation 1453 . 1454) (symbol 1441 . 1452) (symbol 1419 . 1440) (symbol 1257 . 1270) (string 1180 . 1221) (symbol 1174 . 1179) (punctuation 1173 . 1174))
      :lexical-table 
        '(("__G_THREADPOOL_H__")
          )
)
    (semanticdb-table "gtimer.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_TIMER_H__" variable (:constant-flag t) nil [1084 1097])
            ("glib/gtypes.h" include (:system-flag t) nil [1220 1244])
            ((((0) "GTimer")) type (:superclasses ("_GTimer" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1305 1336])
            ("G_USEC_PER_SEC" variable (:constant-flag t) nil [1346 1360])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [2313 2327]))          
      :file "gtimer.h"
      :pointmax 2369
      :fsize 2368
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 2329 . 2340) (semantic-list 2292 . 2312) (symbol 2268 . 2289) (punctuation 2264 . 2265) (symbol 2259 . 2264) (symbol 2237 . 2258) (punctuation 2235 . 2236) (semantic-list 2186 . 2235) (symbol 2162 . 2185) (symbol 2153 . 2161) (symbol 2131 . 2152) (punctuation 2129 . 2130) (semantic-list 2047 . 2129) (symbol 2023 . 2037) (VOID 2014 . 2018) (symbol 1992 . 2013) (punctuation 1989 . 1990) (semantic-list 1962 . 1989) (symbol 1938 . 1946) (VOID 1929 . 1933) (symbol 1907 . 1928) (punctuation 1904 . 1905) (semantic-list 1851 . 1904) (symbol 1827 . 1842) (symbol 1818 . 1825) (symbol 1796 . 1817) (punctuation 1794 . 1795) (semantic-list 1774 . 1794) (symbol 1750 . 1766) (VOID 1744 . 1748) (symbol 1722 . 1743) (punctuation 1720 . 1721) (semantic-list 1700 . 1720) (symbol 1677 . 1690) (VOID 1671 . 1675) (symbol 1649 . 1670) (punctuation 1647 . 1648) (semantic-list 1627 . 1647) (symbol 1605 . 1617) (VOID 1599 . 1603) (symbol 1577 . 1598) (punctuation 1575 . 1576) (semantic-list 1555 . 1575) (symbol 1532 . 1545) (VOID 1526 . 1530) (symbol 1504 . 1525) (punctuation 1502 . 1503) (semantic-list 1482 . 1502) (symbol 1458 . 1473) (VOID 1452 . 1456) (symbol 1430 . 1451) (punctuation 1428 . 1429) (semantic-list 1422 . 1428) (symbol 1401 . 1412) (punctuation 1398 . 1399) (symbol 1392 . 1398) (symbol 1370 . 1391) (symbol 1246 . 1259) (string 1170 . 1211) (symbol 1164 . 1169) (punctuation 1163 . 1164))
      :lexical-table 
        '(("G_USEC_PER_SEC" . ((number "1000000" 1361 . 1368)))
          ("__G_TIMER_H__")
          )
)
    (semanticdb-table "gtimezone.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_TIME_ZONE_H__" variable (:constant-flag t) nil [793 810])
            ("glib/gtypes.h" include (:system-flag t) nil [933 957])
            ((((0) "GTimeZone")) type (:superclasses ("_GTimeZone" type (:prototype t :type "struct") nil nil) :type "typedef") nil [974 1010])
            ((((0) "GTimeType")) type (:superclasses ("" type (:members (("G_TIME_TYPE_STANDARD" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1581 1602]) ("G_TIME_TYPE_DAYLIGHT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1605 1626]) ("G_TIME_TYPE_UNIVERSAL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1629 1652])) :type "enum") nil nil) :type "typedef") nil [1564 1663]))          
      :file "gtimezone.h"
      :pointmax 3488
      :fsize 3488
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 3444 . 3455) (punctuation 3441 . 3442) (semantic-list 3328 . 3441) (symbol 3280 . 3298) (symbol 3256 . 3264) (symbol 3234 . 3255) (punctuation 3232 . 3233) (semantic-list 3119 . 3232) (symbol 3071 . 3093) (symbol 3047 . 3053) (symbol 3025 . 3046) (punctuation 3023 . 3024) (semantic-list 2910 . 3023) (symbol 2862 . 2890) (punctuation 2850 . 2851) (symbol 2844 . 2849) (CONST 2838 . 2843) (symbol 2816 . 2837) (punctuation 2813 . 2814) (semantic-list 2611 . 2813) (symbol 2563 . 2586) (symbol 2539 . 2543) (symbol 2517 . 2538) (punctuation 2514 . 2515) (semantic-list 2312 . 2514) (symbol 2264 . 2289) (symbol 2240 . 2244) (symbol 2218 . 2239) (punctuation 2215 . 2216) (semantic-list 2198 . 2215) (symbol 2150 . 2167) (VOID 2126 . 2130) (symbol 2104 . 2125) (punctuation 2102 . 2103) (semantic-list 2085 . 2102) (symbol 2037 . 2052) (punctuation 2023 . 2024) (symbol 2013 . 2022) (symbol 1991 . 2012) (punctuation 1988 . 1989) (semantic-list 1982 . 1988) (symbol 1934 . 1955) (punctuation 1920 . 1921) (symbol 1910 . 1919) (symbol 1888 . 1909) (punctuation 1886 . 1887) (semantic-list 1880 . 1886) (symbol 1832 . 1851) (punctuation 1818 . 1819) (symbol 1808 . 1817) (symbol 1786 . 1807) (punctuation 1784 . 1785) (semantic-list 1759 . 1784) (symbol 1711 . 1726) (punctuation 1697 . 1698) (symbol 1687 . 1696) (symbol 1665 . 1686) (symbol 959 . 972) (string 883 . 924) (symbol 877 . 882) (punctuation 876 . 877))
      :lexical-table 
        '(("__G_TIME_ZONE_H__")
          )
)
    (semanticdb-table "gtrashstack.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_TRASH_STACK_H__" variable (:constant-flag t) nil [1090 1109])
            ("glib/gutils.h" include (:system-flag t) nil [1232 1256])
            ((((0) "GTrashStack")) type (:superclasses ("_GTrashStack" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1273 1313])
            ("_GTrashStack" type
               (:members (((("next" 1 nil nil nil)) variable (:type ("GTrashStack" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1338 1356]))
                :type "struct")
                nil [1314 1359]))          
      :file "gtrashstack.h"
      :pointmax 1781
      :fsize 1780
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 1736 . 1747) (punctuation 1733 . 1734) (semantic-list 1710 . 1733) (symbol 1689 . 1709) (symbol 1679 . 1684) (symbol 1655 . 1678) (punctuation 1653 . 1654) (semantic-list 1630 . 1653) (symbol 1609 . 1627) (symbol 1599 . 1607) (symbol 1575 . 1598) (punctuation 1573 . 1574) (semantic-list 1550 . 1573) (symbol 1529 . 1546) (symbol 1519 . 1527) (symbol 1495 . 1518) (punctuation 1493 . 1494) (semantic-list 1416 . 1493) (symbol 1395 . 1413) (VOID 1385 . 1389) (symbol 1361 . 1384) (symbol 1258 . 1271) (string 1182 . 1223) (symbol 1176 . 1181) (punctuation 1175 . 1176))
      :lexical-table 
        '(("__G_TRASH_STACK_H__")
          )
)
    (semanticdb-table "gtree.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_TREE_H__" variable (:constant-flag t) nil [1083 1095])
            ("glib/gnode.h" include (:system-flag t) nil [1218 1241])
            ((((0) "GTree")) type (:superclasses ("_GTree" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1258 1287]))          
      :file "gtree.h"
      :pointmax 4193
      :fsize 4192
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 4154 . 4165) (punctuation 4151 . 4152) (semantic-list 4127 . 4151) (symbol 4104 . 4117) (symbol 4095 . 4099) (symbol 4073 . 4094) (punctuation 4071 . 4072) (semantic-list 4047 . 4071) (symbol 4024 . 4037) (symbol 4015 . 4019) (symbol 3993 . 4014) (punctuation 3991 . 3992) (semantic-list 3841 . 3991) (symbol 3818 . 3831) (symbol 3809 . 3817) (symbol 3787 . 3808) (punctuation 3784 . 3785) (semantic-list 3566 . 3784) (symbol 3543 . 3558) (VOID 3534 . 3538) (symbol 3518 . 3533) (punctuation 3515 . 3516) (semantic-list 3379 . 3515) (symbol 3356 . 3370) (VOID 3347 . 3351) (symbol 3325 . 3346) (punctuation 3323 . 3324) (semantic-list 3117 . 3323) (symbol 3094 . 3116) (symbol 3085 . 3093) (symbol 3063 . 3084) (punctuation 3061 . 3062) (semantic-list 2981 . 3061) (symbol 2958 . 2971) (symbol 2949 . 2957) (symbol 2927 . 2948) (punctuation 2925 . 2926) (semantic-list 2845 . 2925) (symbol 2822 . 2834) (symbol 2813 . 2821) (symbol 2791 . 2812) (punctuation 2789 . 2790) (semantic-list 2709 . 2789) (symbol 2686 . 2699) (symbol 2677 . 2685) (symbol 2655 . 2676) (punctuation 2653 . 2654) (semantic-list 2515 . 2653) (symbol 2492 . 2506) (VOID 2483 . 2487) (symbol 2461 . 2482) (punctuation 2459 . 2460) (semantic-list 2321 . 2459) (symbol 2298 . 2311) (VOID 2289 . 2293) (symbol 2267 . 2288) (punctuation 2265 . 2266) (semantic-list 2241 . 2265) (symbol 2218 . 2232) (VOID 2209 . 2213) (symbol 2187 . 2208) (punctuation 2185 . 2186) (semantic-list 2161 . 2185) (symbol 2138 . 2150) (VOID 2129 . 2133) (symbol 2107 . 2128) (punctuation 2105 . 2106) (semantic-list 2081 . 2105) (symbol 2058 . 2068) (punctuation 2054 . 2055) (symbol 2049 . 2054) (symbol 2027 . 2048) (punctuation 2025 . 2026) (semantic-list 1780 . 2025) (symbol 1757 . 1772) (punctuation 1753 . 1754) (symbol 1748 . 1753) (symbol 1726 . 1747) (punctuation 1724 . 1725) (semantic-list 1619 . 1724) (symbol 1596 . 1616) (punctuation 1592 . 1593) (symbol 1587 . 1592) (symbol 1565 . 1586) (punctuation 1563 . 1564) (semantic-list 1527 . 1563) (symbol 1504 . 1514) (punctuation 1500 . 1501) (symbol 1495 . 1500) (symbol 1473 . 1494) (punctuation 1441 . 1442) (semantic-list 1323 . 1441) (semantic-list 1306 . 1322) (symbol 1297 . 1305) (TYPEDEF 1289 . 1296) (symbol 1243 . 1256) (string 1168 . 1209) (symbol 1162 . 1167) (punctuation 1161 . 1162))
      :lexical-table 
        '(("__G_TREE_H__")
          )
)
    (semanticdb-table "gtypes.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_TYPES_H__" variable (:constant-flag t) nil [1084 1097])
            ("glibconfig.h" include (:system-flag t) nil [1220 1243])
            ("glib/gmacros.h" include (:system-flag t) nil [1244 1269])
            ("glib/gversionmacros.h" include (:system-flag t) nil [1270 1302])
            ("time.h" include (:system-flag t) nil [1303 1320])
            ((((0) "gchar")) type (:superclasses ("char") :type "typedef") nil [1601 1622])
            ((((0) "gshort")) type (:superclasses ("short") :type "typedef") nil [1623 1645])
            ((((0) "glong")) type (:superclasses ("long") :type "typedef") nil [1646 1667])
            ((((0) "gint")) type (:superclasses ("int") :type "typedef") nil [1668 1688])
            ((((0) "gboolean")) type (:superclasses ("gint" type (:type "class") nil nil) :type "typedef") nil [1689 1713])
            ((((0) "guchar")) type (:superclasses ("unsigned char") :type "typedef") nil [1715 1746])
            ((((0) "gushort")) type (:superclasses ("unsigned short") :type "typedef") nil [1747 1779])
            ((((0) "gulong")) type (:superclasses ("unsigned long") :type "typedef") nil [1780 1811])
            ((((0) "guint")) type (:superclasses ("unsigned int") :type "typedef") nil [1812 1842])
            ((((0) "gfloat")) type (:superclasses ("float") :type "typedef") nil [1844 1867])
            ((((0) "gdouble")) type (:superclasses ("double") :type "typedef") nil [1868 1892])
            ("G_MININT8" variable (:constant-flag t) nil [1972 1981])
            ("G_MAXINT8" variable (:constant-flag t) nil [2006 2015])
            ("G_MAXUINT8" variable (:constant-flag t) nil [2040 2050])
            ("G_MININT16" variable (:constant-flag t) nil [2076 2086])
            ("G_MAXINT16" variable (:constant-flag t) nil [2114 2124])
            ("G_MAXUINT16" variable (:constant-flag t) nil [2152 2163])
            ("G_MININT32" variable (:constant-flag t) nil [2192 2202])
            ("G_MAXINT32" variable (:constant-flag t) nil [2234 2244])
            ("G_MAXUINT32" variable (:constant-flag t) nil [2276 2287])
            ("G_MININT64" variable (:constant-flag t) nil [2320 2330])
            ("G_MAXINT64" variable (:constant-flag t) nil [2389 2399])
            ("G_MAXUINT64" variable (:constant-flag t) nil [2446 2457])
            ((((1) "gpointer")) type (:superclasses ("void") :type "typedef") nil [2498 2521])
            ((((1) "gconstpointer")) type (:superclasses ("void") :type "typedef") nil [2522 2556])
            ("G_E" variable (:constant-flag t) nil [4767 4770])
            ("G_LN2" variable (:constant-flag t) nil [4835 4840])
            ("G_LN10" variable (:constant-flag t) nil [4904 4910])
            ("G_PI" variable (:constant-flag t) nil [4972 4976])
            ("G_PI_2" variable (:constant-flag t) nil [5040 5046])
            ("G_PI_4" variable (:constant-flag t) nil [5108 5114])
            ("G_SQRT2" variable (:constant-flag t) nil [5177 5184])
            ("G_LITTLE_ENDIAN" variable (:constant-flag t) nil [5377 5392])
            ("G_BIG_ENDIAN" variable (:constant-flag t) nil [5406 5418])
            ("G_PDP_ENDIAN" variable (:constant-flag t) nil [5435 5447])
            ("GUINT16_SWAP_LE_BE_CONSTANT" variable (:constant-flag t) nil [5542 5569])
            ("GUINT32_SWAP_LE_BE_CONSTANT" variable (:constant-flag t) nil [5679 5706])
            ("GUINT64_SWAP_LE_BE_CONSTANT" variable (:constant-flag t) nil [5966 5993])
            ("GUINT16_SWAP_LE_BE" variable (:constant-flag t) nil [12142 12160])
            ("GUINT32_SWAP_LE_BE" variable (:constant-flag t) nil [12212 12230])
            ("GUINT64_SWAP_LE_BE" variable (:constant-flag t) nil [12282 12300])
            ("GUINT16_SWAP_LE_PDP" variable (:constant-flag t) nil [12372 12391])
            ("GUINT16_SWAP_BE_PDP" variable (:constant-flag t) nil [12423 12442])
            ("GUINT32_SWAP_LE_PDP" variable (:constant-flag t) nil [12483 12502])
            ("GUINT32_SWAP_BE_PDP" variable (:constant-flag t) nil [12645 12664])
            ("GINT16_FROM_LE" variable (:constant-flag t) nil [12933 12947])
            ("GUINT16_FROM_LE" variable (:constant-flag t) nil [12982 12997])
            ("GINT16_FROM_BE" variable (:constant-flag t) nil [13033 13047])
            ("GUINT16_FROM_BE" variable (:constant-flag t) nil [13082 13097])
            ("GINT32_FROM_LE" variable (:constant-flag t) nil [13133 13147])
            ("GUINT32_FROM_LE" variable (:constant-flag t) nil [13182 13197])
            ("GINT32_FROM_BE" variable (:constant-flag t) nil [13233 13247])
            ("GUINT32_FROM_BE" variable (:constant-flag t) nil [13282 13297])
            ("GINT64_FROM_LE" variable (:constant-flag t) nil [13334 13348])
            ("GUINT64_FROM_LE" variable (:constant-flag t) nil [13383 13398])
            ("GINT64_FROM_BE" variable (:constant-flag t) nil [13434 13448])
            ("GUINT64_FROM_BE" variable (:constant-flag t) nil [13483 13498])
            ("GLONG_FROM_LE" variable (:constant-flag t) nil [13535 13548])
            ("GULONG_FROM_LE" variable (:constant-flag t) nil [13582 13596])
            ("GLONG_FROM_BE" variable (:constant-flag t) nil [13631 13644])
            ("GULONG_FROM_BE" variable (:constant-flag t) nil [13678 13692])
            ("GINT_FROM_LE" variable (:constant-flag t) nil [13728 13740])
            ("GUINT_FROM_LE" variable (:constant-flag t) nil [13773 13786])
            ("GINT_FROM_BE" variable (:constant-flag t) nil [13820 13832])
            ("GUINT_FROM_BE" variable (:constant-flag t) nil [13865 13878])
            ("GSIZE_FROM_LE" variable (:constant-flag t) nil [13913 13926])
            ("GSSIZE_FROM_LE" variable (:constant-flag t) nil [13960 13974])
            ("GSIZE_FROM_BE" variable (:constant-flag t) nil [14009 14022])
            ("GSSIZE_FROM_BE" variable (:constant-flag t) nil [14056 14070])
            ("g_ntohl" variable (:constant-flag t) nil [14159 14166])
            ("g_ntohs" variable (:constant-flag t) nil [14204 14211])
            ("g_htonl" variable (:constant-flag t) nil [14249 14256])
            ("g_htons" variable (:constant-flag t) nil [14292 14299])
            ("g_uint_checked_add" variable (:constant-flag t) nil [14589 14607])
            ("g_uint_checked_mul" variable (:constant-flag t) nil [14668 14686])
            ("g_uint64_checked_add" variable (:constant-flag t) nil [14748 14768])
            ("g_uint64_checked_mul" variable (:constant-flag t) nil [14829 14849])
            ("g_size_checked_add" variable (:constant-flag t) nil [15103 15121])
            ("g_size_checked_mul" variable (:constant-flag t) nil [15182 15200])
            ((((0) "GDoubleIEEE754")) type (:superclasses ("_GDoubleIEEE754" type (:type "union") nil nil) :type "typedef") nil [17349 17395])
            ((((0) "GFloatIEEE754")) type (:superclasses ("_GFloatIEEE754" type (:type "union") nil nil) :type "typedef") nil [17396 17440])
            ("G_IEEE754_FLOAT_BIAS" variable (:constant-flag t) nil [17449 17469])
            ("G_IEEE754_DOUBLE_BIAS" variable (:constant-flag t) nil [17484 17505])
            ("G_LOG_2_BASE_10" variable (:constant-flag t) nil [17596 17611])
            ((((0) "GTimeVal")) type (:superclasses ("_GTimeVal" type (:prototype t :type "struct") nil nil) :type "typedef") nil [18466 18515])
            ("_GTimeVal" type
               (:members (((("tv_sec" 0 nil nil nil)) variable (:type ("glong" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18538 18551]) ((("tv_usec" 0 nil nil nil)) variable (:type ("glong" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18554 18568]))
                :type "struct")
                nil [18517 18571])
            ("GLIB_VAR" variable (:constant-flag t) nil [19245 19253]))          
      :file "gtypes.h"
      :pointmax 19350
      :fsize 19349
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 18573 . 18584) (symbol 18413 . 18417) (symbol 18406 . 18412) (symbol 18398 . 18405) (symbol 18392 . 18397) (punctuation 18391 . 18392) (semantic-list 16517 . 16566) (semantic-list 16479 . 16516) (symbol 16457 . 16478) (symbol 16448 . 16456) (INLINE 16441 . 16447) (STATIC 16434 . 16440) (semantic-list 16394 . 16433) (semantic-list 16356 . 16393) (symbol 16334 . 16355) (symbol 16325 . 16333) (INLINE 16318 . 16324) (STATIC 16311 . 16317) (semantic-list 16261 . 16310) (semantic-list 16223 . 16260) (symbol 16201 . 16222) (symbol 16192 . 16200) (INLINE 16185 . 16191) (STATIC 16178 . 16184) (semantic-list 16138 . 16177) (semantic-list 16100 . 16137) (symbol 16078 . 16099) (symbol 16069 . 16077) (INLINE 16062 . 16068) (STATIC 16055 . 16061) (punctuation 4287 . 4288) (semantic-list 4239 . 4287) (semantic-list 4215 . 4232) (punctuation 4211 . 4212) (symbol 4205 . 4210) (CONST 4199 . 4204) (TYPEDEF 4191 . 4198) (punctuation 3770 . 3771) (semantic-list 3749 . 3770) (semantic-list 3725 . 3737) (VOID 3709 . 3713) (TYPEDEF 3701 . 3708) (punctuation 3497 . 3498) (semantic-list 3331 . 3497) (semantic-list 3307 . 3316) (VOID 3291 . 3295) (TYPEDEF 3283 . 3290) (punctuation 3281 . 3282) (semantic-list 3261 . 3281) (semantic-list 3237 . 3249) (symbol 3221 . 3226) (TYPEDEF 3213 . 3220) (punctuation 3211 . 3212) (semantic-list 3115 . 3211) (semantic-list 3091 . 3099) (VOID 3075 . 3079) (TYPEDEF 3067 . 3074) (punctuation 3065 . 3066) (semantic-list 3044 . 3065) (semantic-list 3020 . 3037) (VOID 3004 . 3008) (TYPEDEF 2996 . 3003) (punctuation 2994 . 2995) (semantic-list 2909 . 2994) (semantic-list 2885 . 2898) (symbol 2869 . 2877) (TYPEDEF 2861 . 2868) (punctuation 2859 . 2860) (semantic-list 2741 . 2859) (semantic-list 2717 . 2736) (symbol 2701 . 2705) (TYPEDEF 2693 . 2700) (punctuation 2691 . 2692) (semantic-list 2606 . 2691) (semantic-list 2582 . 2597) (symbol 2566 . 2570) (TYPEDEF 2558 . 2565) (symbol 1322 . 1335) (string 1170 . 1211) (symbol 1164 . 1169) (punctuation 1163 . 1164))
      :lexical-table 
        '(("GLONG_FROM_BE" (spp-arg-list ("val") 13644 . 13649) . ((semantic-list "(GLONG_TO_BE (val))" 13650 . 13669)))
          ("GINT_FROM_LE" (spp-arg-list ("val") 13740 . 13745) . ((semantic-list "(GINT_TO_LE (val))" 13746 . 13764)))
          ("GSIZE_FROM_BE" (spp-arg-list ("val") 14022 . 14027) . ((semantic-list "(GSIZE_TO_BE (val))" 14028 . 14047)))
          ("G_MININT16" . ((semantic-list "((gint16) -0x8000)" 2087 . 2105)))
          ("G_MAXUINT16" . ((semantic-list "((guint16) 0xffff)" 2164 . 2182)))
          ("G_MININT64" . ((semantic-list "((gint64) G_GINT64_CONSTANT(-0x8000000000000000))" 2331 . 2380)))
          ("G_MAXUINT64" . ((symbol "G_GUINT64_CONSTANT" 2458 . 2476) (semantic-list "(0xffffffffffffffff)" 2476 . 2496)))
          ("GUINT16_SWAP_LE_BE" (spp-arg-list ("val") 12160 . 12165) . ((semantic-list "(GUINT16_SWAP_LE_BE_CONSTANT (val))" 12166 . 12201)))
          ("GUINT64_SWAP_LE_BE" (spp-arg-list ("val") 12300 . 12305) . ((semantic-list "(GUINT64_SWAP_LE_BE_CONSTANT (val))" 12306 . 12341)))
          ("GINT16_FROM_BE" (spp-arg-list ("val") 13047 . 13052) . ((semantic-list "(GINT16_TO_BE (val))" 13053 . 13073)))
          ("GINT64_FROM_BE" (spp-arg-list ("val") 13448 . 13453) . ((semantic-list "(GINT64_TO_BE (val))" 13454 . 13474)))
          ("G_LN2" . ((number "0.69314718055994530941723212145817656807550013436026" 4843 . 4895)))
          ("GUINT32_FROM_LE" (spp-arg-list ("val") 13197 . 13202) . ((semantic-list "(GUINT32_TO_LE (val))" 13203 . 13224)))
          ("GUINT_FROM_LE" (spp-arg-list ("val") 13786 . 13791) . ((semantic-list "(GUINT_TO_LE (val))" 13792 . 13811)))
          ("g_ntohl" (spp-arg-list ("val") 14166 . 14171) . ((semantic-list "(GUINT32_FROM_BE (val))" 14172 . 14195)))
          ("g_htonl" (spp-arg-list ("val") 14256 . 14261) . ((semantic-list "(GUINT32_TO_BE (val))" 14262 . 14283)))
          ("g_size_checked_mul" (spp-arg-list ("dest" "a" "b") 15200 . 15212) . ((symbol "_GLIB_CHECKED_MUL_U32" 15219 . 15240) (semantic-list "(dest, a, b)" 15240 . 15252)))
          ("G_LOG_2_BASE_10" . ((semantic-list "(0.30102999566398119521)" 17613 . 17637)))
          ("GLIB_VAR" . ((symbol "_GLIB_EXTERN" 19254 . 19266)))
          ("G_MININT32" . ((semantic-list "((gint32) -0x80000000)" 2203 . 2225)))
          ("G_MAXUINT32" . ((semantic-list "((guint32) 0xffffffff)" 2288 . 2310)))
          ("G_PI" . ((number "3.1415926535897932384626433832795028841971693993751" 4980 . 5031)))
          ("GUINT32_SWAP_LE_BE_CONSTANT" (spp-arg-list ("val") 5706 . 5711) . ((semantic-list "((guint32) ( \\
    (((guint32) (val) & (guint32) 0x000000ffU) << 24) | \\
    (((guint32) (val) & (guint32) 0x0000ff00U) <<  8) | \\
    (((guint32) (val) & (guint32) 0x00ff0000U) >>  8) | \\
    (((guint32) (val) & (guint32) 0xff000000U) >> 24)))" 5712 . 5956)))
          ("GLONG_FROM_LE" (spp-arg-list ("val") 13548 . 13553) . ((semantic-list "(GLONG_TO_LE (val))" 13554 . 13573)))
          ("GSIZE_FROM_LE" (spp-arg-list ("val") 13926 . 13931) . ((semantic-list "(GSIZE_TO_LE (val))" 13932 . 13951)))
          ("GSSIZE_FROM_BE" (spp-arg-list ("val") 14070 . 14075) . ((semantic-list "(GSSIZE_TO_BE (val))" 14076 . 14096)))
          ("g_size_checked_add" (spp-arg-list ("dest" "a" "b") 15121 . 15133) . ((symbol "_GLIB_CHECKED_ADD_U32" 15140 . 15161) (semantic-list "(dest, a, b)" 15161 . 15173)))
          ("G_MAXINT16" . ((semantic-list "((gint16)  0x7fff)" 2125 . 2143)))
          ("G_MAXINT64" . ((symbol "G_GINT64_CONSTANT" 2400 . 2417) (semantic-list "(0x7fffffffffffffff)" 2417 . 2437)))
          ("G_E" . ((number "2.7182818284590452353602874713526624977572470937000" 4775 . 4826)))
          ("GINT16_FROM_LE" (spp-arg-list ("val") 12947 . 12952) . ((semantic-list "(GINT16_TO_LE (val))" 12953 . 12973)))
          ("GINT64_FROM_LE" (spp-arg-list ("val") 13348 . 13353) . ((semantic-list "(GINT64_TO_LE (val))" 13354 . 13374)))
          ("GUINT32_SWAP_LE_BE" (spp-arg-list ("val") 12230 . 12235) . ((semantic-list "(GUINT32_SWAP_LE_BE_CONSTANT (val))" 12236 . 12271)))
          ("GUINT16_FROM_BE" (spp-arg-list ("val") 13097 . 13102) . ((semantic-list "(GUINT16_TO_BE (val))" 13103 . 13124)))
          ("GINT32_FROM_BE" (spp-arg-list ("val") 13247 . 13252) . ((semantic-list "(GINT32_TO_BE (val))" 13253 . 13273)))
          ("GUINT64_FROM_BE" (spp-arg-list ("val") 13498 . 13503) . ((semantic-list "(GUINT64_TO_BE (val))" 13504 . 13525)))
          ("GULONG_FROM_BE" (spp-arg-list ("val") 13692 . 13697) . ((semantic-list "(GULONG_TO_BE (val))" 13698 . 13718)))
          ("G_MAXINT32" . ((semantic-list "((gint32)  0x7fffffff)" 2245 . 2267)))
          ("G_PI_2" . ((number "1.5707963267948966192313216916397514420985846996876" 5048 . 5099)))
          ("G_MAXINT8" . ((semantic-list "((gint8)  0x7f)" 2016 . 2031)))
          ("G_SQRT2" . ((number "1.4142135623730950488016887242096980785696718753769" 5185 . 5236)))
          ("G_PDP_ENDIAN" . ((number "3412" 5451 . 5455)))
          ("GSSIZE_FROM_LE" (spp-arg-list ("val") 13974 . 13979) . ((semantic-list "(GSSIZE_TO_LE (val))" 13980 . 14000)))
          ("g_uint64_checked_mul" (spp-arg-list ("dest" "a" "b") 14849 . 14861) . ((symbol "_GLIB_CHECKED_MUL_U64" 14868 . 14889) (semantic-list "(dest, a, b)" 14889 . 14901)))
          ("G_IEEE754_DOUBLE_BIAS" . ((semantic-list "(1023)" 17506 . 17512)))
          ("G_PI_4" . ((number "0.78539816339744830961566084581987572104929234984378" 5116 . 5168)))
          ("G_LITTLE_ENDIAN" . ((number "1234" 5393 . 5397)))
          ("GUINT16_SWAP_LE_PDP" (spp-arg-list ("val") 12391 . 12396) . ((semantic-list "((guint16) (val))" 12397 . 12414)))
          ("GINT_FROM_BE" (spp-arg-list ("val") 13832 . 13837) . ((semantic-list "(GINT_TO_BE (val))" 13838 . 13856)))
          ("g_ntohs" (spp-arg-list ("val") 14211 . 14216) . ((semantic-list "(GUINT16_FROM_BE (val))" 14217 . 14240)))
          ("g_htons" (spp-arg-list ("val") 14299 . 14304) . ((semantic-list "(GUINT16_TO_BE (val))" 14305 . 14326)))
          ("g_uint_checked_mul" (spp-arg-list ("dest" "a" "b") 14686 . 14698) . ((symbol "_GLIB_CHECKED_MUL_U32" 14705 . 14726) (semantic-list "(dest, a, b)" 14726 . 14738)))
          ("GUINT16_SWAP_BE_PDP" (spp-arg-list ("val") 12442 . 12447) . ((semantic-list "(GUINT16_SWAP_LE_BE (val))" 12448 . 12474)))
          ("GUINT16_FROM_LE" (spp-arg-list ("val") 12997 . 13002) . ((semantic-list "(GUINT16_TO_LE (val))" 13003 . 13024)))
          ("GINT32_FROM_LE" (spp-arg-list ("val") 13147 . 13152) . ((semantic-list "(GINT32_TO_LE (val))" 13153 . 13173)))
          ("GUINT64_FROM_LE" (spp-arg-list ("val") 13398 . 13403) . ((semantic-list "(GUINT64_TO_LE (val))" 13404 . 13425)))
          ("GULONG_FROM_LE" (spp-arg-list ("val") 13596 . 13601) . ((semantic-list "(GULONG_TO_LE (val))" 13602 . 13622)))
          ("g_uint64_checked_add" (spp-arg-list ("dest" "a" "b") 14768 . 14780) . ((symbol "_GLIB_CHECKED_ADD_U64" 14787 . 14808) (semantic-list "(dest, a, b)" 14808 . 14820)))
          ("G_MININT8" . ((semantic-list "((gint8) -0x80)" 1982 . 1997)))
          ("G_MAXUINT8" . ((semantic-list "((guint8) 0xff)" 2051 . 2066)))
          ("GUINT16_SWAP_LE_BE_CONSTANT" (spp-arg-list ("val") 5569 . 5574) . ((semantic-list "((guint16) ( \\
    (guint16) ((guint16) (val) >> 8) |	\\
    (guint16) ((guint16) (val) << 8)))" 5575 . 5669)))
          ("GUINT64_SWAP_LE_BE_CONSTANT" (spp-arg-list ("val") 5993 . 5998) . ((semantic-list "((guint64) ( \\
      (((guint64) (val) &						\\
	(guint64) G_GINT64_CONSTANT (0x00000000000000ffU)) << 56) |	\\
      (((guint64) (val) &						\\
	(guint64) G_GINT64_CONSTANT (0x000000000000ff00U)) << 40) |	\\
      (((guint64) (val) &						\\
	(guint64) G_GINT64_CONSTANT (0x0000000000ff0000U)) << 24) |	\\
      (((guint64) (val) &						\\
	(guint64) G_GINT64_CONSTANT (0x00000000ff000000U)) <<  8) |	\\
      (((guint64) (val) &						\\
	(guint64) G_GINT64_CONSTANT (0x000000ff00000000U)) >>  8) |	\\
      (((guint64) (val) &						\\
	(guint64) G_GINT64_CONSTANT (0x0000ff0000000000U)) >> 24) |	\\
      (((guint64) (val) &						\\
	(guint64) G_GINT64_CONSTANT (0x00ff000000000000U)) >> 40) |	\\
      (((guint64) (val) &						\\
	(guint64) G_GINT64_CONSTANT (0xff00000000000000U)) >> 56)))" 5999 . 6779)))
          ("GUINT32_SWAP_LE_PDP" (spp-arg-list ("val") 12502 . 12507) . ((semantic-list "((guint32) ( \\
    (((guint32) (val) & (guint32) 0x0000ffffU) << 16) | \\
    (((guint32) (val) & (guint32) 0xffff0000U) >> 16)))" 12508 . 12636)))
          ("GUINT32_FROM_BE" (spp-arg-list ("val") 13297 . 13302) . ((semantic-list "(GUINT32_TO_BE (val))" 13303 . 13324)))
          ("GUINT_FROM_BE" (spp-arg-list ("val") 13878 . 13883) . ((semantic-list "(GUINT_TO_BE (val))" 13884 . 13903)))
          ("g_uint_checked_add" (spp-arg-list ("dest" "a" "b") 14607 . 14619) . ((symbol "_GLIB_CHECKED_ADD_U32" 14626 . 14647) (semantic-list "(dest, a, b)" 14647 . 14659)))
          ("G_IEEE754_FLOAT_BIAS" . ((semantic-list "(127)" 17470 . 17475)))
          ("__G_TYPES_H__")
          ("G_LN10" . ((number "2.3025850929940456840179914546843642076011014886288" 4912 . 4963)))
          ("G_BIG_ENDIAN" . ((number "4321" 5422 . 5426)))
          ("GUINT32_SWAP_BE_PDP" (spp-arg-list ("val") 12664 . 12669) . ((semantic-list "((guint32) ( \\
    (((guint32) (val) & (guint32) 0x00ff00ffU) << 8) | \\
    (((guint32) (val) & (guint32) 0xff00ff00U) >> 8)))" 12670 . 12796)))
          )
)
    (semanticdb-table "gunicode.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_UNICODE_H__" variable (:constant-flag t) nil [881 896])
            ("glib/gerror.h" include (:system-flag t) nil [1019 1043])
            ("glib/gtypes.h" include (:system-flag t) nil [1044 1068])
            ((((0) "gunichar")) type (:superclasses ("guint32" type (:type "class") nil nil) :type "typedef") nil [2077 2102])
            ((((0) "gunichar2")) type (:superclasses ("guint16" type (:type "class") nil nil) :type "typedef") nil [2759 2785])
            ((((0) "GUnicodeType")) type (:superclasses ("" type (:members (("G_UNICODE_CONTROL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5211 5229]) ("G_UNICODE_FORMAT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5232 5249]) ("G_UNICODE_UNASSIGNED" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5252 5273]) ("G_UNICODE_PRIVATE_USE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5276 5298]) ("G_UNICODE_SURROGATE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5301 5321]) ("G_UNICODE_LOWERCASE_LETTER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5324 5351]) ("G_UNICODE_MODIFIER_LETTER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5354 5380]) ("G_UNICODE_OTHER_LETTER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5383 5406]) ("G_UNICODE_TITLECASE_LETTER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5409 5436]) ("G_UNICODE_UPPERCASE_LETTER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5439 5466]) ("G_UNICODE_SPACING_MARK" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5469 5492]) ("G_UNICODE_ENCLOSING_MARK" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5495 5520]) ("G_UNICODE_NON_SPACING_MARK" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5523 5550]) ("G_UNICODE_DECIMAL_NUMBER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5553 5578]) ("G_UNICODE_LETTER_NUMBER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5581 5605]) ("G_UNICODE_OTHER_NUMBER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5608 5631]) ("G_UNICODE_CONNECT_PUNCTUATION" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5634 5664]) ("G_UNICODE_DASH_PUNCTUATION" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5667 5694]) ("G_UNICODE_CLOSE_PUNCTUATION" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5697 5725]) ("G_UNICODE_FINAL_PUNCTUATION" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5728 5756]) ("G_UNICODE_INITIAL_PUNCTUATION" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5759 5789]) ("G_UNICODE_OTHER_PUNCTUATION" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5792 5820]) ("G_UNICODE_OPEN_PUNCTUATION" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5823 5850]) ("G_UNICODE_CURRENCY_SYMBOL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5853 5879]) ("G_UNICODE_MODIFIER_SYMBOL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5882 5908]) ("G_UNICODE_MATH_SYMBOL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5911 5933]) ("G_UNICODE_OTHER_SYMBOL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5936 5959]) ("G_UNICODE_LINE_SEPARATOR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5962 5987]) ("G_UNICODE_PARAGRAPH_SEPARATOR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5990 6020]) ("G_UNICODE_SPACE_SEPARATOR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [6023 6050])) :type "enum") nil nil) :type "typedef") nil [5194 6064])
            ("G_UNICODE_COMBINING_MARK" variable (:constant-flag t) nil [6239 6263])
            ((((0) "GUnicodeBreakType")) type (:superclasses ("" type (:members (("G_UNICODE_BREAK_MANDATORY" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9090 9116]) ("G_UNICODE_BREAK_CARRIAGE_RETURN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9119 9151]) ("G_UNICODE_BREAK_LINE_FEED" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9154 9180]) ("G_UNICODE_BREAK_COMBINING_MARK" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9183 9214]) ("G_UNICODE_BREAK_SURROGATE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9217 9243]) ("G_UNICODE_BREAK_ZERO_WIDTH_SPACE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9246 9279]) ("G_UNICODE_BREAK_INSEPARABLE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9282 9310]) ("G_UNICODE_BREAK_NON_BREAKING_GLUE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9313 9347]) ("G_UNICODE_BREAK_CONTINGENT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9350 9377]) ("G_UNICODE_BREAK_SPACE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9380 9402]) ("G_UNICODE_BREAK_AFTER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9405 9427]) ("G_UNICODE_BREAK_BEFORE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9430 9453]) ("G_UNICODE_BREAK_BEFORE_AND_AFTER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9456 9489]) ("G_UNICODE_BREAK_HYPHEN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9492 9515]) ("G_UNICODE_BREAK_NON_STARTER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9518 9546]) ("G_UNICODE_BREAK_OPEN_PUNCTUATION" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9549 9582]) ("G_UNICODE_BREAK_CLOSE_PUNCTUATION" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9585 9619]) ("G_UNICODE_BREAK_QUOTATION" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9622 9648]) ("G_UNICODE_BREAK_EXCLAMATION" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9651 9679]) ("G_UNICODE_BREAK_IDEOGRAPHIC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9682 9710]) ("G_UNICODE_BREAK_NUMERIC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9713 9737]) ("G_UNICODE_BREAK_INFIX_SEPARATOR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9740 9772]) ("G_UNICODE_BREAK_SYMBOL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9775 9798]) ("G_UNICODE_BREAK_ALPHABETIC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9801 9828]) ("G_UNICODE_BREAK_PREFIX" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9831 9854]) ("G_UNICODE_BREAK_POSTFIX" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9857 9881]) ("G_UNICODE_BREAK_COMPLEX_CONTEXT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9884 9916]) ("G_UNICODE_BREAK_AMBIGUOUS" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9919 9945]) ("G_UNICODE_BREAK_UNKNOWN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9948 9972]) ("G_UNICODE_BREAK_NEXT_LINE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [9975 10001]) ("G_UNICODE_BREAK_WORD_JOINER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [10004 10032]) ("G_UNICODE_BREAK_HANGUL_L_JAMO" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [10035 10065]) ("G_UNICODE_BREAK_HANGUL_V_JAMO" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [10068 10098]) ("G_UNICODE_BREAK_HANGUL_T_JAMO" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [10101 10131]) ("G_UNICODE_BREAK_HANGUL_LV_SYLLABLE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [10134 10169]) ("G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [10172 10208]) ("G_UNICODE_BREAK_CLOSE_PARANTHESIS" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [10211 10245]) ("G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [10248 10293]) ("G_UNICODE_BREAK_HEBREW_LETTER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [10296 10326]) ("G_UNICODE_BREAK_REGIONAL_INDICATOR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [10329 10365])) :type "enum") nil nil) :type "typedef") nil [9073 10384])
            ((((0) "GUnicodeScript")) type (:superclasses ("" type (:members (("G_UNICODE_SCRIPT_INVALID_CODE" variable (:constant-flag t :default-value (18435 18437) :type "int") (reparse-symbol enumsubparts) [18403 18437]) ("G_UNICODE_SCRIPT_COMMON" variable (:constant-flag t :default-value (18473 18474) :type "int") (reparse-symbol enumsubparts) [18441 18474]) ("G_UNICODE_SCRIPT_INHERITED" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18491 18518]) ("G_UNICODE_SCRIPT_ARABIC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18548 18572]) ("G_UNICODE_SCRIPT_ARMENIAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18598 18624]) ("G_UNICODE_SCRIPT_BENGALI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18648 18673]) ("G_UNICODE_SCRIPT_BOPOMOFO" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18698 18724]) ("G_UNICODE_SCRIPT_CHEROKEE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18748 18774]) ("G_UNICODE_SCRIPT_COPTIC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18798 18822]) ("G_UNICODE_SCRIPT_CYRILLIC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18855 18881]) ("G_UNICODE_SCRIPT_DESERET" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18912 18937]) ("G_UNICODE_SCRIPT_DEVANAGARI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18962 18990]) ("G_UNICODE_SCRIPT_ETHIOPIC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19012 19038]) ("G_UNICODE_SCRIPT_GEORGIAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19062 19088]) ("G_UNICODE_SCRIPT_GOTHIC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19125 19149]) ("G_UNICODE_SCRIPT_GREEK" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19175 19198]) ("G_UNICODE_SCRIPT_GUJARATI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19225 19251]) ("G_UNICODE_SCRIPT_GURMUKHI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19275 19301]) ("G_UNICODE_SCRIPT_HAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19325 19346]) ("G_UNICODE_SCRIPT_HANGUL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19375 19399]) ("G_UNICODE_SCRIPT_HEBREW" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19425 19449]) ("G_UNICODE_SCRIPT_HIRAGANA" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19475 19501]) ("G_UNICODE_SCRIPT_KANNADA" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19525 19550]) ("G_UNICODE_SCRIPT_KATAKANA" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19575 19601]) ("G_UNICODE_SCRIPT_KHMER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19625 19648]) ("G_UNICODE_SCRIPT_LAO" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19675 19696]) ("G_UNICODE_SCRIPT_LATIN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19725 19748]) ("G_UNICODE_SCRIPT_MALAYALAM" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19788 19815]) ("G_UNICODE_SCRIPT_MONGOLIAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19838 19865]) ("G_UNICODE_SCRIPT_MYANMAR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19888 19913]) ("G_UNICODE_SCRIPT_OGHAM" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19938 19961]) ("G_UNICODE_SCRIPT_OLD_ITALIC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [19988 20016]) ("G_UNICODE_SCRIPT_ORIYA" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20038 20061]) ("G_UNICODE_SCRIPT_RUNIC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20088 20111]) ("G_UNICODE_SCRIPT_SINHALA" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20138 20163]) ("G_UNICODE_SCRIPT_SYRIAC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20188 20212]) ("G_UNICODE_SCRIPT_TAMIL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20257 20280]) ("G_UNICODE_SCRIPT_TELUGU" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20307 20331]) ("G_UNICODE_SCRIPT_THAANA" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20357 20381]) ("G_UNICODE_SCRIPT_THAI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20407 20429]) ("G_UNICODE_SCRIPT_TIBETAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20457 20482]) ("G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20507 20544]) ("G_UNICODE_SCRIPT_YI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20558 20578]) ("G_UNICODE_SCRIPT_TAGALOG" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20608 20633]) ("G_UNICODE_SCRIPT_HANUNOO" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20658 20683]) ("G_UNICODE_SCRIPT_BUHID" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20708 20731]) ("G_UNICODE_SCRIPT_TAGBANWA" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20758 20784]) ("G_UNICODE_SCRIPT_BRAILLE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20839 20864]) ("G_UNICODE_SCRIPT_CYPRIOT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20889 20914]) ("G_UNICODE_SCRIPT_LIMBU" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20939 20962]) ("G_UNICODE_SCRIPT_OSMANYA" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [20989 21014]) ("G_UNICODE_SCRIPT_SHAVIAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21039 21064]) ("G_UNICODE_SCRIPT_LINEAR_B" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21089 21115]) ("G_UNICODE_SCRIPT_TAI_LE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21139 21163]) ("G_UNICODE_SCRIPT_UGARITIC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21189 21215]) ("G_UNICODE_SCRIPT_NEW_TAI_LUE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21270 21299]) ("G_UNICODE_SCRIPT_BUGINESE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21320 21346]) ("G_UNICODE_SCRIPT_GLAGOLITIC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21370 21398]) ("G_UNICODE_SCRIPT_TIFINAGH" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21420 21446]) ("G_UNICODE_SCRIPT_SYLOTI_NAGRI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21470 21500]) ("G_UNICODE_SCRIPT_OLD_PERSIAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21520 21549]) ("G_UNICODE_SCRIPT_KHAROSHTHI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21570 21598]) ("G_UNICODE_SCRIPT_UNKNOWN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21651 21676]) ("G_UNICODE_SCRIPT_BALINESE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21701 21727]) ("G_UNICODE_SCRIPT_CUNEIFORM" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21751 21778]) ("G_UNICODE_SCRIPT_PHOENICIAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21801 21829]) ("G_UNICODE_SCRIPT_PHAGS_PA" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21851 21877]) ("G_UNICODE_SCRIPT_NKO" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21901 21922]) ("G_UNICODE_SCRIPT_KAYAH_LI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [21982 22008]) ("G_UNICODE_SCRIPT_LEPCHA" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22032 22056]) ("G_UNICODE_SCRIPT_REJANG" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22082 22106]) ("G_UNICODE_SCRIPT_SUNDANESE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22132 22159]) ("G_UNICODE_SCRIPT_SAURASHTRA" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22182 22210]) ("G_UNICODE_SCRIPT_CHAM" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22232 22254]) ("G_UNICODE_SCRIPT_OL_CHIKI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22282 22308]) ("G_UNICODE_SCRIPT_VAI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22332 22353]) ("G_UNICODE_SCRIPT_CARIAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22382 22406]) ("G_UNICODE_SCRIPT_LYCIAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22432 22456]) ("G_UNICODE_SCRIPT_LYDIAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22482 22506]) ("G_UNICODE_SCRIPT_AVESTAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22563 22588]) ("G_UNICODE_SCRIPT_BAMUM" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22617 22640]) ("G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22671 22709]) ("G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22725 22759]) ("G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22779 22818]) ("G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22833 22873]) ("G_UNICODE_SCRIPT_JAVANESE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22887 22913]) ("G_UNICODE_SCRIPT_KAITHI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22941 22965]) ("G_UNICODE_SCRIPT_LISU" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [22995 23017]) ("G_UNICODE_SCRIPT_MEETEI_MAYEK" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [23049 23079]) ("G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [23103 23138]) ("G_UNICODE_SCRIPT_OLD_TURKIC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [23157 23185]) ("G_UNICODE_SCRIPT_SAMARITAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [23211 23238]) ("G_UNICODE_SCRIPT_TAI_THAM" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [23265 23291]) ("G_UNICODE_SCRIPT_TAI_VIET" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [23319 23345]) ("G_UNICODE_SCRIPT_BATAK" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [23404 23427]) ("G_UNICODE_SCRIPT_BRAHMI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [23458 23482]) ("G_UNICODE_SCRIPT_MANDAIC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [23512 23537]) ("G_UNICODE_SCRIPT_CHAKMA" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [23597 23621]) ("G_UNICODE_SCRIPT_MEROITIC_CURSIVE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [23651 23685]) ("G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [23705 23743]) ("G_UNICODE_SCRIPT_MIAO" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [23759 23781]) ("G_UNICODE_SCRIPT_SHARADA" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [23813 23838]) ("G_UNICODE_SCRIPT_SORA_SOMPENG" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [23867 23897]) ("G_UNICODE_SCRIPT_TAKRI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [23921 23944]) ("G_UNICODE_SCRIPT_BASSA_VAH" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24006 24033]) ("G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24060 24096]) ("G_UNICODE_SCRIPT_DUPLOYAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24114 24140]) ("G_UNICODE_SCRIPT_ELBASAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24168 24193]) ("G_UNICODE_SCRIPT_GRANTHA" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24222 24247]) ("G_UNICODE_SCRIPT_KHOJKI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24276 24300]) ("G_UNICODE_SCRIPT_KHUDAWADI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24330 24357]) ("G_UNICODE_SCRIPT_LINEAR_A" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24384 24410]) ("G_UNICODE_SCRIPT_MAHAJANI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24438 24464]) ("G_UNICODE_SCRIPT_MANICHAEAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24492 24520]) ("G_UNICODE_SCRIPT_MENDE_KIKAKUI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24546 24577]) ("G_UNICODE_SCRIPT_MODI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24600 24622]) ("G_UNICODE_SCRIPT_MRO" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24654 24675]) ("G_UNICODE_SCRIPT_NABATAEAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24708 24735]) ("G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24762 24797]) ("G_UNICODE_SCRIPT_OLD_PERMIC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24816 24844]) ("G_UNICODE_SCRIPT_PAHAWH_HMONG" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24870 24900]) ("G_UNICODE_SCRIPT_PALMYRENE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24924 24951]) ("G_UNICODE_SCRIPT_PAU_CIN_HAU" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [24978 25007]) ("G_UNICODE_SCRIPT_PSALTER_PAHLAVI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [25032 25065]) ("G_UNICODE_SCRIPT_SIDDHAM" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [25086 25111]) ("G_UNICODE_SCRIPT_TIRHUTA" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [25140 25165]) ("G_UNICODE_SCRIPT_WARANG_CITI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [25194 25223]) ("G_UNICODE_SCRIPT_AHOM" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [25279 25301]) ("G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [25333 25372]) ("G_UNICODE_SCRIPT_HATRAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [25387 25411]) ("G_UNICODE_SCRIPT_MULTANI" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [25441 25466]) ("G_UNICODE_SCRIPT_OLD_HUNGARIAN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [25495 25526]) ("G_UNICODE_SCRIPT_SIGNWRITING" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [25549 25602])) :type "enum") nil nil) :type "typedef") nil [18341 25618])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [25930 25943])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [26008 26021])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [26086 26099])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [26164 26177])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [26242 26255])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [26320 26333])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [26398 26411])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [26476 26489])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [26554 26567])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [26632 26645])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [26710 26723])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [26788 26801])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [26866 26879])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [26944 26957])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [27022 27035])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [27101 27114])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [27179 27192])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [27379 27392])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [27455 27468])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [27531 27544])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [27723 27736])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [27801 27814])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [27942 27955])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [28090 28103])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [28228 28241])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [28447 28460])
            ((("G_GNUC_CONST" 0 nil nil nil)) variable (:type "int") nil [28561 28574])
            ("G_UNICHAR_MAX_DECOMPOSITION_LENGTH" variable (:constant-flag t) nil [29383 29417])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [29916 29930])
            ((("g_utf8_skip" 1 nil nil nil)) variable (:constant-flag t :type ("gchar" type (:type "class") nil nil)) nil [29991 30023])
            ("g_utf8_next_char" variable (:constant-flag t) nil [30503 30519])
            ((("G_GNUC_PURE" 0 nil nil nil)) variable (:type "int") nil [30649 30661])
            ((("G_GNUC_PURE" 0 nil nil nil)) variable (:type "int") nil [30796 30808])
            ((("G_GNUC_PURE" 0 nil nil nil)) variable (:type "int") nil [30941 30953])
            ((("G_GNUC_PURE" 0 nil nil nil)) variable (:type "int") nil [31082 31094])
            ((("G_GNUC_PURE" 0 nil nil nil)) variable (:type "int") nil [31168 31180])
            ((("G_GNUC_PURE" 0 nil nil nil)) variable (:type "int") nil [31307 31319])
            ((("G_GNUC_PURE" 0 nil nil nil)) variable (:type "int") nil [31446 31458])
            ((("G_GNUC_PURE" 0 nil nil nil)) variable (:type "int") nil [31586 31598])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [31792 31806])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [32818 32832])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [33149 33163])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [33361 33375])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [33692 33706])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [34023 34037])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [34354 34368])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [34685 34699])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [35085 35099])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [35204 35218])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [35325 35339])
            ((((0) "GNormalizeMode")) type (:superclasses ("" type (:members (("G_NORMALIZE_DEFAULT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [36662 36682]) ("G_NORMALIZE_NFD" variable (:constant-flag t :default-value (36703 36722) :type "int") (reparse-symbol enumsubparts) [36685 36722]) ("G_NORMALIZE_DEFAULT_COMPOSE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [36726 36754]) ("G_NORMALIZE_NFC" variable (:constant-flag t :default-value (36775 36802) :type "int") (reparse-symbol enumsubparts) [36757 36802]) ("G_NORMALIZE_ALL" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [36806 36822]) ("G_NORMALIZE_NFKD" variable (:constant-flag t :default-value (36844 36859) :type "int") (reparse-symbol enumsubparts) [36825 36859]) ("G_NORMALIZE_ALL_COMPOSE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [36863 36887]) ("G_NORMALIZE_NFKC" variable (:constant-flag t :default-value (36909 36932) :type "int") (reparse-symbol enumsubparts) [36890 36932])) :type "enum") nil nil) :type "typedef") nil [36645 36950])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [37110 37124])
            ((("G_GNUC_PURE" 0 nil nil nil)) variable (:type "int") nil [37240 37252])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [37365 37379])
            ((("G_GNUC_MALLOC" 0 nil nil nil)) variable (:type "int") nil [37518 37532]))          
      :file "gunicode.h"
      :pointmax 37639
      :fsize 37638
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 37597 . 37608) (punctuation 37594 . 37595) (semantic-list 37575 . 37594) (symbol 37556 . 37574) (punctuation 37555 . 37556) (symbol 37549 . 37554) (semantic-list 37441 . 37517) (symbol 37409 . 37440) (punctuation 37408 . 37409) (symbol 37402 . 37407) (symbol 37380 . 37401) (semantic-list 37301 . 37364) (symbol 37282 . 37300) (punctuation 37281 . 37282) (symbol 37275 . 37280) (symbol 37253 . 37274) (semantic-list 37174 . 37239) (symbol 37155 . 37169) (symbol 37148 . 37152) (symbol 37126 . 37147) (semantic-list 36998 . 37109) (symbol 36981 . 36997) (punctuation 36980 . 36981) (symbol 36974 . 36979) (symbol 36952 . 36973) (semantic-list 35264 . 35324) (symbol 35248 . 35263) (punctuation 35247 . 35248) (symbol 35241 . 35246) (symbol 35219 . 35240) (semantic-list 35144 . 35203) (symbol 35129 . 35143) (punctuation 35128 . 35129) (symbol 35122 . 35127) (symbol 35100 . 35121) (semantic-list 35025 . 35084) (symbol 35010 . 35022) (punctuation 35009 . 35010) (symbol 35003 . 35008) (symbol 34981 . 35002) (punctuation 34978 . 34979) (semantic-list 34865 . 34978) (symbol 34849 . 34864) (symbol 34840 . 34848) (symbol 34818 . 34839) (punctuation 34815 . 34816) (semantic-list 34751 . 34815) (symbol 34733 . 34750) (symbol 34723 . 34727) (symbol 34701 . 34722) (semantic-list 34422 . 34684) (symbol 34402 . 34416) (punctuation 34396 . 34397) (symbol 34391 . 34396) (symbol 34369 . 34390) (semantic-list 34091 . 34353) (symbol 34071 . 34086) (punctuation 34070 . 34071) (symbol 34060 . 34069) (symbol 34038 . 34059) (semantic-list 33760 . 34022) (symbol 33740 . 33755) (punctuation 33734 . 33735) (symbol 33729 . 33734) (symbol 33707 . 33728) (semantic-list 33429 . 33691) (symbol 33409 . 33424) (punctuation 33407 . 33408) (symbol 33398 . 33406) (symbol 33376 . 33397) (semantic-list 33217 . 33360) (symbol 33197 . 33216) (punctuation 33195 . 33196) (symbol 33186 . 33194) (symbol 33164 . 33185) (semantic-list 32886 . 33148) (symbol 32866 . 32880) (punctuation 32864 . 32865) (symbol 32855 . 32863) (symbol 32833 . 32854) (semantic-list 32555 . 32817) (symbol 32535 . 32550) (punctuation 32534 . 32535) (symbol 32524 . 32533) (symbol 32502 . 32523) (punctuation 32499 . 32500) (semantic-list 32443 . 32499) (symbol 32425 . 32442) (punctuation 32423 . 32424) (symbol 32418 . 32423) (symbol 32396 . 32417) (punctuation 32394 . 32395) (semantic-list 32298 . 32394) (symbol 32283 . 32297) (punctuation 32281 . 32282) (symbol 32276 . 32281) (symbol 32254 . 32275) (punctuation 32252 . 32253) (semantic-list 32156 . 32252) (symbol 32141 . 32154) (punctuation 32139 . 32140) (symbol 32134 . 32139) (symbol 32112 . 32133) (punctuation 31987 . 31988) (semantic-list 31864 . 31987) (symbol 31839 . 31853) (punctuation 31838 . 31839) (symbol 31830 . 31835) (symbol 31808 . 31829) (semantic-list 31657 . 31791) (symbol 31632 . 31648) (punctuation 31631 . 31632) (symbol 31623 . 31628) (symbol 31600 . 31622) (semantic-list 31516 . 31585) (symbol 31491 . 31504) (symbol 31482 . 31487) (symbol 31460 . 31481) (semantic-list 31376 . 31445) (symbol 31351 . 31372) (punctuation 31347 . 31348) (symbol 31342 . 31347) (symbol 31320 . 31341) (semantic-list 31237 . 31306) (symbol 31212 . 31233) (punctuation 31208 . 31209) (symbol 31203 . 31208) (symbol 31181 . 31202) (semantic-list 31151 . 31167) (symbol 31126 . 31142) (punctuation 31122 . 31123) (symbol 31117 . 31122) (symbol 31095 . 31116) (semantic-list 31010 . 31081) (symbol 30985 . 31009) (symbol 30976 . 30981) (symbol 30954 . 30975) (semantic-list 30866 . 30940) (symbol 30841 . 30865) (punctuation 30837 . 30838) (symbol 30832 . 30837) (symbol 30810 . 30831) (semantic-list 30719 . 30795) (symbol 30693 . 30718) (symbol 30684 . 30692) (symbol 30662 . 30683) (semantic-list 30631 . 30648) (symbol 30605 . 30620) (symbol 30596 . 30604) (symbol 30574 . 30595) (symbol 29982 . 29990) (semantic-list 29834 . 29915) (symbol 29800 . 29833) (punctuation 29799 . 29800) (symbol 29790 . 29798) (symbol 29766 . 29789) (punctuation 29762 . 29763) (semantic-list 29694 . 29762) (symbol 29665 . 29693) (VOID 29660 . 29664) (symbol 29638 . 29659) (punctuation 29145 . 29146) (semantic-list 28974 . 29145) (symbol 28948 . 28973) (symbol 28942 . 28947) (symbol 28920 . 28941) (punctuation 28917 . 28918) (semantic-list 28817 . 28917) (symbol 28797 . 28816) (symbol 28788 . 28796) (symbol 28766 . 28787) (punctuation 28764 . 28765) (semantic-list 28668 . 28764) (symbol 28650 . 28667) (symbol 28641 . 28649) (symbol 28619 . 28640) (semantic-list 28547 . 28560) (symbol 28528 . 28546) (symbol 28519 . 28527) (symbol 28497 . 28518) (semantic-list 28433 . 28446) (symbol 28412 . 28432) (symbol 28397 . 28411) (symbol 28375 . 28396) (punctuation 28372 . 28373) (semantic-list 28300 . 28372) (symbol 28274 . 28299) (symbol 28265 . 28273) (symbol 28243 . 28264) (semantic-list 28214 . 28227) (symbol 28188 . 28213) (symbol 28183 . 28187) (symbol 28161 . 28182) (semantic-list 28077 . 28089) (symbol 28056 . 28076) (symbol 28038 . 28055) (symbol 28016 . 28037) (semantic-list 27929 . 27941) (symbol 27914 . 27928) (symbol 27901 . 27913) (symbol 27879 . 27900) (semantic-list 27788 . 27800) (symbol 27765 . 27787) (symbol 27760 . 27764) (symbol 27738 . 27759) (semantic-list 27710 . 27722) (symbol 27688 . 27709) (symbol 27683 . 27687) (symbol 27661 . 27682) (semantic-list 27518 . 27530) (symbol 27500 . 27517) (symbol 27491 . 27499) (symbol 27469 . 27490) (semantic-list 27442 . 27454) (symbol 27424 . 27441) (symbol 27415 . 27423) (symbol 27393 . 27414) (semantic-list 27366 . 27378) (symbol 27348 . 27365) (symbol 27339 . 27347) (symbol 27317 . 27338) (semantic-list 27166 . 27178) (symbol 27146 . 27162) (symbol 27137 . 27145) (symbol 27115 . 27136) (semantic-list 27088 . 27100) (symbol 27067 . 27088) (symbol 27058 . 27066) (symbol 27036 . 27057) (semantic-list 27009 . 27021) (symbol 26989 . 27009) (symbol 26980 . 26988) (symbol 26958 . 26979) (semantic-list 26931 . 26943) (symbol 26911 . 26927) (symbol 26902 . 26910) (symbol 26880 . 26901) (semantic-list 26853 . 26865) (symbol 26833 . 26852) (symbol 26824 . 26832) (symbol 26802 . 26823) (semantic-list 26775 . 26787) (symbol 26755 . 26772) (symbol 26746 . 26754) (symbol 26724 . 26745) (semantic-list 26697 . 26709) (symbol 26677 . 26695) (symbol 26668 . 26676) (symbol 26646 . 26667) (semantic-list 26619 . 26631) (symbol 26599 . 26616) (symbol 26590 . 26598) (symbol 26568 . 26589) (semantic-list 26541 . 26553) (symbol 26521 . 26538) (symbol 26512 . 26520) (symbol 26490 . 26511) (semantic-list 26463 . 26475) (symbol 26443 . 26460) (symbol 26434 . 26442) (symbol 26412 . 26433) (semantic-list 26385 . 26397) (symbol 26365 . 26382) (symbol 26356 . 26364) (symbol 26334 . 26355) (semantic-list 26307 . 26319) (symbol 26287 . 26304) (symbol 26278 . 26286) (symbol 26256 . 26277) (semantic-list 26229 . 26241) (symbol 26209 . 26226) (symbol 26200 . 26208) (symbol 26178 . 26199) (semantic-list 26151 . 26163) (symbol 26131 . 26148) (symbol 26122 . 26130) (symbol 26100 . 26121) (semantic-list 26073 . 26085) (symbol 26053 . 26070) (symbol 26044 . 26052) (symbol 26022 . 26043) (semantic-list 25995 . 26007) (symbol 25975 . 25992) (symbol 25966 . 25974) (symbol 25944 . 25965) (semantic-list 25917 . 25929) (symbol 25897 . 25914) (symbol 25888 . 25896) (symbol 25866 . 25887) (punctuation 25806 . 25807) (semantic-list 25781 . 25806) (symbol 25750 . 25780) (symbol 25735 . 25749) (symbol 25713 . 25734) (punctuation 25711 . 25712) (semantic-list 25688 . 25711) (symbol 25657 . 25685) (symbol 25642 . 25649) (symbol 25620 . 25641) (symbol 1070 . 1083) (string 969 . 1010) (symbol 963 . 968) (punctuation 962 . 963))
      :lexical-table 
        '(("__G_UNICODE_H__")
          ("g_utf8_next_char" (spp-arg-list ("p") 30519 . 30522) . ((semantic-list "(char *)" 30523 . 30531) (semantic-list "((p) + g_utf8_skip[*(const guchar *)(p)])" 30531 . 30572)))
          ("G_UNICODE_COMBINING_MARK" . ((symbol "G_UNICODE_SPACING_MARK" 6264 . 6286)))
          ("G_UNICHAR_MAX_DECOMPOSITION_LENGTH" . ((number "18" 29418 . 29420)))
          )
)
    (semanticdb-table "gurifuncs.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_URI_FUNCS_H__" variable (:constant-flag t) nil [854 871])
            ("glib/gtypes.h" include (:system-flag t) nil [994 1018])
            ("G_URI_RESERVED_CHARS_GENERIC_DELIMITERS" variable (:constant-flag t) nil [1177 1216])
            ("G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS" variable (:constant-flag t) nil [1383 1427])
            ("G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT" variable (:constant-flag t) nil [1579 1623])
            ("G_URI_RESERVED_CHARS_ALLOWED_IN_PATH" variable (:constant-flag t) nil [1797 1833])
            ("G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO" variable (:constant-flag t) nil [2033 2073]))          
      :file "gurifuncs.h"
      :pointmax 2715
      :fsize 2714
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 2671 . 2682) (punctuation 2668 . 2669) (semantic-list 2565 . 2668) (symbol 2537 . 2556) (punctuation 2533 . 2534) (CHAR 2528 . 2532) (symbol 2506 . 2527) (punctuation 2504 . 2505) (semantic-list 2487 . 2504) (symbol 2459 . 2477) (punctuation 2455 . 2456) (CHAR 2450 . 2454) (symbol 2428 . 2449) (punctuation 2426 . 2427) (semantic-list 2314 . 2426) (symbol 2286 . 2308) (punctuation 2282 . 2283) (CHAR 2277 . 2281) (symbol 2255 . 2276) (punctuation 2253 . 2254) (semantic-list 2183 . 2253) (symbol 2155 . 2176) (punctuation 2151 . 2152) (CHAR 2146 . 2150) (symbol 2124 . 2145) (symbol 1020 . 1033) (string 944 . 985) (symbol 938 . 943) (punctuation 937 . 938))
      :lexical-table 
        '(("G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO" . ((symbol "G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS" 2074 . 2118) (string "\":\"" 2119 . 2122)))
          ("__G_URI_FUNCS_H__")
          ("G_URI_RESERVED_CHARS_GENERIC_DELIMITERS" . ((string "\":/?#[]@\"" 1217 . 1226)))
          ("G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS" . ((string "\"!$&'()*+,;=\"" 1428 . 1441)))
          ("G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT" . ((symbol "G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS" 1624 . 1668) (string "\":@\"" 1669 . 1673)))
          ("G_URI_RESERVED_CHARS_ALLOWED_IN_PATH" . ((symbol "G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT" 1834 . 1878) (string "\"/\"" 1879 . 1882)))
          )
)
    (semanticdb-table "gutils.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_UTILS_H__" variable (:constant-flag t) nil [1084 1097])
            ("glib/gtypes.h" include (:system-flag t) nil [1220 1244])
            ("stdarg.h" include (:system-flag t) nil [1245 1264])
            ("G_VA_COPY" variable (:constant-flag t) nil [1764 1773])
            ((((0) "GUserDirectory")) type (:superclasses ("" type (:members (("G_USER_DIRECTORY_DESKTOP" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [4797 4822]) ("G_USER_DIRECTORY_DOCUMENTS" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [4825 4852]) ("G_USER_DIRECTORY_DOWNLOAD" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [4855 4881]) ("G_USER_DIRECTORY_MUSIC" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [4884 4907]) ("G_USER_DIRECTORY_PICTURES" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [4910 4936]) ("G_USER_DIRECTORY_PUBLIC_SHARE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [4939 4969]) ("G_USER_DIRECTORY_TEMPLATES" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [4972 4999]) ("G_USER_DIRECTORY_VIDEOS" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5002 5026]) ("G_USER_N_DIRECTORIES" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [5030 5052])) :type "enum") nil nil) :type "typedef") nil [4780 5068])
            ((((0) "GDebugKey")) type (:superclasses ("_GDebugKey" type (:prototype t :type "struct") nil nil) :type "typedef") nil [5298 5334])
            ("_GDebugKey" type
               (:members (((("key" 1 nil nil nil)) variable (:constant-flag t :type ("gchar" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5357 5374]) ((("value" 0 nil nil nil)) variable (:type ("guint" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5377 5396]))
                :type "struct")
                nil [5335 5399])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [5754 5775])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [5955 5975])
            ((((0) "GFormatSizeFlags")) type (:superclasses ("" type (:members (("G_FORMAT_SIZE_DEFAULT" variable (:constant-flag t :default-value (6121 6122) :type "int") (reparse-symbol enumsubparts) [6093 6122]) ("G_FORMAT_SIZE_LONG_FORMAT" variable (:constant-flag t :default-value (6154 6155) :type "int") (reparse-symbol enumsubparts) [6126 6155]) ("G_FORMAT_SIZE_IEC_UNITS" variable (:constant-flag t :default-value (6192 6193) :type "int") (reparse-symbol enumsubparts) [6164 6193])) :type "enum") nil nil) :type "typedef") nil [6076 6218])
            ("ATEXIT" variable (:constant-flag t) nil [6756 6762])
            ("g_bit_nth_lsf" variable (:constant-flag t) nil [7901 7914])
            ("g_bit_nth_msf" variable (:constant-flag t) nil [7972 7985])
            ("g_bit_storage" variable (:constant-flag t) nil [8043 8056])
            ("G_WIN32_DLLMAIN_FOR_DLL_NAME" variable (:constant-flag t) nil [10194 10222]))          
      :file "gutils.h"
      :pointmax 11014
      :fsize 11013
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 10974 . 10985) (semantic-list 9075 . 9378) (semantic-list 9059 . 9074) (symbol 9040 . 9058) (symbol 9034 . 9039) (INLINE 9027 . 9033) (STATIC 9020 . 9026) (semantic-list 8790 . 9018) (semantic-list 8740 . 8789) (symbol 8721 . 8739) (symbol 8716 . 8720) (INLINE 8709 . 8715) (STATIC 8702 . 8708) (semantic-list 8496 . 8700) (semantic-list 8446 . 8495) (symbol 8427 . 8445) (symbol 8422 . 8426) (INLINE 8415 . 8421) (STATIC 8408 . 8414) (punctuation 8405 . 8406) (semantic-list 8390 . 8405) (semantic-list 8366 . 8381) (symbol 8358 . 8363) (semantic-list #("(number)" 0 1 (macros (("number")))) 8367 . 8381) (symbol 8336 . 8357) (semantic-list #("(number)" 0 1 (macros (("number")))) 8367 . 8381) (punctuation 8334 . 8335) (semantic-list 8272 . 8334) (semantic-list 8248 . 8263) (symbol 8240 . 8244) (semantic-list #("(mask, nth_bit)" 0 1 (macros (("nth_bit") ("mask")))) 8249 . 8263) (symbol 8218 . 8239) (semantic-list #("(mask, nth_bit)" 0 1 (macros (("nth_bit") ("mask")))) 8249 . 8263) (punctuation 8216 . 8217) (semantic-list 8154 . 8216) (semantic-list 8130 . 8145) (symbol 8122 . 8126) (semantic-list #("(mask, nth_bit)" 0 1 (macros (("nth_bit") ("mask")))) 8131 . 8145) (symbol 8100 . 8121) (semantic-list #("(mask, nth_bit)" 0 1 (macros (("nth_bit") ("mask")))) 8131 . 8145) (punctuation 7507 . 7508) (semantic-list 7485 . 7507) (symbol 7461 . 7483) (punctuation 7458 . 7459) (symbol 7453 . 7458) (symbol 7431 . 7452) (punctuation 6834 . 6835) (semantic-list 6815 . 6834) (symbol 6805 . 6813) (VOID 6800 . 6804) (symbol 6784 . 6799) (punctuation 6746 . 6747) (semantic-list 6740 . 6746) (semantic-list 6727 . 6739) (VOID 6722 . 6726) (TYPEDEF 6714 . 6721) (punctuation 6508 . 6509) (semantic-list 6494 . 6508) (symbol 6468 . 6493) (punctuation 6467 . 6468) (symbol 6461 . 6466) (semantic-list 6445 . 6460) (symbol 6426 . 6445) (punctuation 6423 . 6424) (semantic-list 6400 . 6423) (symbol 6379 . 6392) (punctuation 6378 . 6379) (symbol 6372 . 6377) (symbol 6349 . 6371) (punctuation 6347 . 6348) (semantic-list 6271 . 6347) (symbol 6250 . 6268) (punctuation 6249 . 6250) (symbol 6243 . 6248) (symbol 6220 . 6242) (number 6197 . 6198) (punctuation 6195 . 6196) (punctuation 6194 . 6195) (number 6159 . 6160) (punctuation 6157 . 6158) (punctuation 6156 . 6157) (punctuation 6073 . 6074) (semantic-list 6042 . 6073) (symbol 6021 . 6038) (VOID 5999 . 6003) (symbol 5977 . 5998) (number 5972 . 5973) (number 5969 . 5970) (semantic-list 5841 . 5945) (symbol 5820 . 5831) (symbol 5798 . 5802) (symbol 5776 . 5797) (number 5772 . 5773) (number 5769 . 5770) (semantic-list 5663 . 5753) (symbol 5642 . 5652) (symbol 5620 . 5624) (symbol 5598 . 5619) (punctuation 5595 . 5596) (semantic-list 5505 . 5595) (symbol 5484 . 5504) (symbol 5462 . 5467) (symbol 5440 . 5461) (punctuation 5155 . 5156) (semantic-list 5129 . 5155) (symbol 5106 . 5128) (punctuation 5104 . 5105) (symbol 5098 . 5103) (CONST 5092 . 5097) (symbol 5070 . 5091) (punctuation 3841 . 3842) (semantic-list 3835 . 3841) (symbol 3812 . 3834) (punctuation 3810 . 3811) (symbol 3804 . 3809) (CONST 3798 . 3803) (symbol 3776 . 3797) (punctuation 3773 . 3774) (semantic-list 3767 . 3773) (symbol 3742 . 3766) (punctuation 3740 . 3741) (CONST 3734 . 3739) (punctuation 3732 . 3733) (symbol 3726 . 3731) (CONST 3720 . 3725) (symbol 3698 . 3719) (punctuation 2961 . 2962) (semantic-list 2955 . 2961) (symbol 2930 . 2952) (punctuation 2928 . 2929) (CONST 2922 . 2927) (punctuation 2920 . 2921) (symbol 2914 . 2919) (CONST 2908 . 2913) (symbol 2886 . 2907) (punctuation 2884 . 2885) (semantic-list 2878 . 2884) (symbol 2853 . 2873) (punctuation 2843 . 2844) (symbol 2837 . 2842) (CONST 2831 . 2836) (symbol 2809 . 2830) (punctuation 2807 . 2808) (semantic-list 2801 . 2807) (symbol 2776 . 2797) (punctuation 2766 . 2767) (symbol 2760 . 2765) (CONST 2754 . 2759) (symbol 2732 . 2753) (punctuation 2730 . 2731) (semantic-list 2724 . 2730) (symbol 2699 . 2718) (punctuation 2689 . 2690) (symbol 2683 . 2688) (CONST 2677 . 2682) (symbol 2655 . 2676) (punctuation 2653 . 2654) (semantic-list 2647 . 2653) (symbol 2610 . 2642) (VOID 2600 . 2604) (symbol 2578 . 2599) (punctuation 2575 . 2576) (semantic-list 2544 . 2575) (symbol 2521 . 2543) (VOID 2499 . 2503) (symbol 2477 . 2498) (punctuation 2475 . 2476) (semantic-list 2469 . 2475) (symbol 2446 . 2468) (punctuation 2436 . 2437) (symbol 2430 . 2435) (CONST 2424 . 2429) (symbol 2402 . 2423) (punctuation 2400 . 2401) (semantic-list 2378 . 2400) (symbol 2355 . 2368) (VOID 2333 . 2337) (symbol 2311 . 2332) (punctuation 2309 . 2310) (semantic-list 2303 . 2309) (symbol 2280 . 2293) (punctuation 2270 . 2271) (symbol 2264 . 2269) (CONST 2258 . 2263) (symbol 2236 . 2257) (punctuation 2234 . 2235) (semantic-list 2228 . 2234) (symbol 2207 . 2222) (punctuation 2197 . 2198) (symbol 2191 . 2196) (CONST 2185 . 2190) (symbol 2163 . 2184) (punctuation 2161 . 2162) (semantic-list 2155 . 2161) (symbol 2132 . 2145) (punctuation 2122 . 2123) (symbol 2116 . 2121) (CONST 2110 . 2115) (symbol 2088 . 2109) (punctuation 2086 . 2087) (semantic-list 2080 . 2086) (symbol 2057 . 2071) (punctuation 2047 . 2048) (symbol 2041 . 2046) (CONST 2035 . 2040) (symbol 2013 . 2034) (punctuation 2011 . 2012) (semantic-list 2005 . 2011) (symbol 1982 . 1997) (punctuation 1972 . 1973) (symbol 1966 . 1971) (CONST 1960 . 1965) (symbol 1938 . 1959) (punctuation 1936 . 1937) (semantic-list 1930 . 1936) (symbol 1907 . 1922) (punctuation 1897 . 1898) (symbol 1891 . 1896) (CONST 1885 . 1890) (symbol 1863 . 1884) (symbol 1266 . 1279) (string 1170 . 1211) (symbol 1164 . 1169) (punctuation 1163 . 1164))
      :lexical-table 
        '(("G_WIN32_DLLMAIN_FOR_DLL_NAME" (spp-arg-list ("static" "dll_name") 10222 . 10240))
          ("g_bit_nth_msf" (spp-arg-list ("mask" "nth_bit") 7985 . 8000) . ((symbol "g_bit_nth_msf_impl" 8001 . 8019) (semantic-list "(mask, nth_bit)" 8019 . 8034)))
          ("__G_UTILS_H__")
          ("G_VA_COPY" (spp-arg-list ("ap1" "ap2") 1773 . 1783) . ((semantic-list "((ap1) = (ap2))" 1786 . 1801)))
          ("g_bit_nth_lsf" (spp-arg-list ("mask" "nth_bit") 7914 . 7929) . ((symbol "g_bit_nth_lsf_impl" 7930 . 7948) (semantic-list "(mask, nth_bit)" 7948 . 7963)))
          ("g_bit_storage" (spp-arg-list ("number") 8056 . 8064) . ((symbol "g_bit_storage_impl" 8072 . 8090) (semantic-list "(number)" 8090 . 8098)))
          ("ATEXIT" (spp-arg-list ("proc") 6762 . 6768) . ((symbol "g_ATEXIT" 6769 . 6777) (semantic-list "(proc)" 6777 . 6783)))
          )
)
    (semanticdb-table "gvarianttype.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_VARIANT_TYPE_H__" variable (:constant-flag t) nil [840 860])
            ("glib/gmessages.h" include (:system-flag t) nil [983 1010])
            ("glib/gtypes.h" include (:system-flag t) nil [1011 1035])
            ((((0) "GVariantType")) type (:superclasses ("_GVariantType" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1316 1358])
            ("G_VARIANT_TYPE_BOOLEAN" variable (:constant-flag t) nil [1466 1488])
            ("G_VARIANT_TYPE_BYTE" variable (:constant-flag t) nil [1638 1657])
            ("G_VARIANT_TYPE_INT16" variable (:constant-flag t) nil [1818 1838])
            ("G_VARIANT_TYPE_UINT16" variable (:constant-flag t) nil [2063 2084])
            ("G_VARIANT_TYPE_INT32" variable (:constant-flag t) nil [2256 2276])
            ("G_VARIANT_TYPE_UINT32" variable (:constant-flag t) nil [2505 2526])
            ("G_VARIANT_TYPE_INT64" variable (:constant-flag t) nil [2716 2736])
            ("G_VARIANT_TYPE_UINT64" variable (:constant-flag t) nil [3020 3041])
            ("G_VARIANT_TYPE_DOUBLE" variable (:constant-flag t) nil [3414 3435])
            ("G_VARIANT_TYPE_STRING" variable (:constant-flag t) nil [3592 3613])
            ("G_VARIANT_TYPE_OBJECT_PATH" variable (:constant-flag t) nil [4053 4079])
            ("G_VARIANT_TYPE_SIGNATURE" variable (:constant-flag t) nil [4508 4532])
            ("G_VARIANT_TYPE_VARIANT" variable (:constant-flag t) nil [4704 4726])
            ("G_VARIANT_TYPE_HANDLE" variable (:constant-flag t) nil [5080 5101])
            ("G_VARIANT_TYPE_UNIT" variable (:constant-flag t) nil [5275 5294])
            ("G_VARIANT_TYPE_ANY" variable (:constant-flag t) nil [5464 5482])
            ("G_VARIANT_TYPE_BASIC" variable (:constant-flag t) nil [5661 5681])
            ("G_VARIANT_TYPE_MAYBE" variable (:constant-flag t) nil [5835 5855])
            ("G_VARIANT_TYPE_ARRAY" variable (:constant-flag t) nil [6010 6030])
            ("G_VARIANT_TYPE_TUPLE" variable (:constant-flag t) nil [6236 6256])
            ("G_VARIANT_TYPE_DICT_ENTRY" variable (:constant-flag t) nil [6429 6454])
            ("G_VARIANT_TYPE_DICTIONARY" variable (:constant-flag t) nil [6709 6734])
            ("G_VARIANT_TYPE_STRING_ARRAY" variable (:constant-flag t) nil [6867 6894])
            ("G_VARIANT_TYPE_OBJECT_PATH_ARRAY" variable (:constant-flag t) nil [7032 7064])
            ("G_VARIANT_TYPE_BYTESTRING" variable (:constant-flag t) nil [7393 7418])
            ("G_VARIANT_TYPE_BYTESTRING_ARRAY" variable (:constant-flag t) nil [7587 7618])
            ("G_VARIANT_TYPE_VARDICT" variable (:constant-flag t) nil [7810 7832])
            ("G_VARIANT_TYPE" variable (:constant-flag t) nil [8388 8402]))          
      :file "gvarianttype.h"
      :pointmax 13131
      :fsize 13132
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 13084 . 13095) (punctuation 13081 . 13082) (semantic-list 13066 . 13081) (symbol 13026 . 13049) (punctuation 13013 . 13014) (symbol 13000 . 13012) (CONST 12994 . 12999) (symbol 12972 . 12993) (punctuation 12953 . 12954) (semantic-list 12826 . 12953) (symbol 12786 . 12815) (punctuation 12767 . 12768) (symbol 12754 . 12766) (symbol 12732 . 12753) (punctuation 12730 . 12731) (semantic-list 12593 . 12730) (symbol 12553 . 12577) (punctuation 12534 . 12535) (symbol 12521 . 12533) (symbol 12499 . 12520) (punctuation 12497 . 12498) (semantic-list 12467 . 12497) (symbol 12427 . 12451) (punctuation 12408 . 12409) (symbol 12395 . 12407) (symbol 12373 . 12394) (punctuation 12371 . 12372) (semantic-list 12341 . 12371) (symbol 12301 . 12325) (punctuation 12282 . 12283) (symbol 12269 . 12281) (symbol 12247 . 12268) (punctuation 12225 . 12226) (semantic-list 12198 . 12225) (symbol 12158 . 12178) (punctuation 12145 . 12146) (symbol 12132 . 12144) (CONST 12126 . 12131) (symbol 12104 . 12125) (punctuation 12102 . 12103) (semantic-list 12075 . 12102) (symbol 12035 . 12053) (punctuation 12022 . 12023) (symbol 12009 . 12021) (CONST 12003 . 12008) (symbol 11981 . 12002) (punctuation 11979 . 11980) (semantic-list 11952 . 11979) (symbol 11912 . 11934) (symbol 11880 . 11885) (symbol 11858 . 11879) (punctuation 11856 . 11857) (semantic-list 11829 . 11856) (symbol 11789 . 11808) (punctuation 11776 . 11777) (symbol 11763 . 11775) (CONST 11757 . 11762) (symbol 11735 . 11756) (punctuation 11733 . 11734) (semantic-list 11706 . 11733) (symbol 11666 . 11686) (punctuation 11653 . 11654) (symbol 11640 . 11652) (CONST 11634 . 11639) (symbol 11612 . 11633) (punctuation 11610 . 11611) (semantic-list 11583 . 11610) (symbol 11543 . 11565) (punctuation 11530 . 11531) (symbol 11517 . 11529) (CONST 11511 . 11516) (symbol 11489 . 11510) (punctuation 11456 . 11457) (semantic-list 11324 . 11456) (symbol 11284 . 11312) (symbol 11252 . 11260) (symbol 11230 . 11251) (punctuation 11212 . 11213) (semantic-list 11083 . 11212) (symbol 11043 . 11063) (symbol 11011 . 11019) (symbol 10989 . 11010) (punctuation 10987 . 10988) (semantic-list 10960 . 10987) (symbol 10920 . 10939) (symbol 10888 . 10893) (symbol 10866 . 10887) (punctuation 10841 . 10842) (semantic-list 10814 . 10841) (symbol 10774 . 10799) (symbol 10742 . 10750) (symbol 10720 . 10741) (punctuation 10718 . 10719) (semantic-list 10691 . 10718) (symbol 10651 . 10679) (symbol 10619 . 10627) (symbol 10597 . 10618) (punctuation 10595 . 10596) (semantic-list 10568 . 10595) (symbol 10528 . 10551) (symbol 10496 . 10504) (symbol 10474 . 10495) (punctuation 10472 . 10473) (semantic-list 10445 . 10472) (symbol 10405 . 10428) (symbol 10373 . 10381) (symbol 10351 . 10372) (punctuation 10349 . 10350) (semantic-list 10322 . 10349) (symbol 10282 . 10305) (symbol 10250 . 10258) (symbol 10228 . 10249) (punctuation 10226 . 10227) (semantic-list 10199 . 10226) (symbol 10159 . 10182) (symbol 10127 . 10135) (symbol 10105 . 10126) (punctuation 10103 . 10104) (semantic-list 10076 . 10103) (symbol 10036 . 10063) (symbol 10004 . 10012) (symbol 9982 . 10003) (punctuation 9980 . 9981) (semantic-list 9953 . 9980) (symbol 9913 . 9939) (symbol 9881 . 9889) (symbol 9859 . 9880) (punctuation 9835 . 9836) (semantic-list 9808 . 9835) (symbol 9768 . 9793) (punctuation 9742 . 9743) (symbol 9736 . 9741) (symbol 9714 . 9735) (punctuation 9712 . 9713) (semantic-list 9685 . 9712) (symbol 9645 . 9671) (punctuation 9625 . 9626) (symbol 9619 . 9624) (CONST 9613 . 9618) (symbol 9591 . 9612) (punctuation 9589 . 9590) (semantic-list 9562 . 9589) (symbol 9522 . 9554) (symbol 9490 . 9495) (symbol 9468 . 9489) (punctuation 9451 . 9452) (semantic-list 9417 . 9451) (symbol 9377 . 9395) (punctuation 9358 . 9359) (symbol 9345 . 9357) (symbol 9323 . 9344) (punctuation 9321 . 9322) (semantic-list 9294 . 9321) (symbol 9254 . 9273) (punctuation 9235 . 9236) (symbol 9222 . 9234) (symbol 9200 . 9221) (punctuation 9198 . 9199) (semantic-list 9171 . 9198) (symbol 9131 . 9150) (VOID 9099 . 9103) (symbol 9077 . 9098) (punctuation 9053 . 9054) (semantic-list 8821 . 9053) (symbol 8781 . 8807) (symbol 8749 . 8757) (symbol 8727 . 8748) (punctuation 8725 . 8726) (semantic-list 8691 . 8725) (symbol 8651 . 8681) (symbol 8619 . 8627) (symbol 8597 . 8618) (symbol 1037 . 1050) (string 933 . 974) (symbol 927 . 932) (punctuation 926 . 927))
      :lexical-table 
        '(("G_VARIANT_TYPE_DOUBLE" . ((semantic-list "((const GVariantType *) \"d\")" 3450 . 3478)))
          ("G_VARIANT_TYPE_OBJECT_PATH" . ((semantic-list "((const GVariantType *) \"o\")" 4089 . 4117)))
          ("G_VARIANT_TYPE_ANY" . ((semantic-list "((const GVariantType *) \"*\")" 5500 . 5528)))
          ("G_VARIANT_TYPE_TUPLE" . ((semantic-list "((const GVariantType *) \"r\")" 6272 . 6300)))
          ("G_VARIANT_TYPE" (spp-arg-list ("type_string") 8402 . 8415) . ((semantic-list "(g_variant_type_checked_ ((type_string)))" 8427 . 8468)))
          ("G_VARIANT_TYPE_UINT32" . ((semantic-list "((const GVariantType *) \"u\")" 2541 . 2569)))
          ("G_VARIANT_TYPE_VARDICT" . ((semantic-list "((const GVariantType *) \"a{sv}\")" 7846 . 7878)))
          ("G_VARIANT_TYPE_STRING_ARRAY" . ((semantic-list "((const GVariantType *) \"as\")" 6903 . 6932)))
          ("G_VARIANT_TYPE_BYTESTRING" . ((semantic-list "((const GVariantType *) \"ay\")" 7429 . 7458)))
          ("__G_VARIANT_TYPE_H__")
          ("G_VARIANT_TYPE_BYTE" . ((semantic-list "((const GVariantType *) \"y\")" 1674 . 1702)))
          ("G_VARIANT_TYPE_INT16" . ((semantic-list "((const GVariantType *) \"n\")" 1854 . 1882)))
          ("G_VARIANT_TYPE_INT64" . ((semantic-list "((const GVariantType *) \"x\")" 2752 . 2780)))
          ("G_VARIANT_TYPE_HANDLE" . ((semantic-list "((const GVariantType *) \"h\")" 5116 . 5144)))
          ("G_VARIANT_TYPE_BOOLEAN" . ((semantic-list "((const GVariantType *) \"b\")" 1502 . 1530)))
          ("G_VARIANT_TYPE_INT32" . ((semantic-list "((const GVariantType *) \"i\")" 2292 . 2320)))
          ("G_VARIANT_TYPE_VARIANT" . ((semantic-list "((const GVariantType *) \"v\")" 4740 . 4768)))
          ("G_VARIANT_TYPE_BASIC" . ((semantic-list "((const GVariantType *) \"?\")" 5697 . 5725)))
          ("G_VARIANT_TYPE_SIGNATURE" . ((semantic-list "((const GVariantType *) \"g\")" 4544 . 4572)))
          ("G_VARIANT_TYPE_STRING" . ((semantic-list "((const GVariantType *) \"s\")" 3628 . 3656)))
          ("G_VARIANT_TYPE_UNIT" . ((semantic-list "((const GVariantType *) \"()\")" 5311 . 5340)))
          ("G_VARIANT_TYPE_MAYBE" . ((semantic-list "((const GVariantType *) \"m*\")" 5871 . 5900)))
          ("G_VARIANT_TYPE_ARRAY" . ((semantic-list "((const GVariantType *) \"a*\")" 6046 . 6075)))
          ("G_VARIANT_TYPE_DICTIONARY" . ((semantic-list "((const GVariantType *) \"a{?*}\")" 6745 . 6777)))
          ("G_VARIANT_TYPE_OBJECT_PATH_ARRAY" . ((semantic-list "((const GVariantType *) \"ao\")" 7068 . 7097)))
          ("G_VARIANT_TYPE_UINT16" . ((semantic-list "((const GVariantType *) \"q\")" 2099 . 2127)))
          ("G_VARIANT_TYPE_UINT64" . ((semantic-list "((const GVariantType *) \"t\")" 3056 . 3084)))
          ("G_VARIANT_TYPE_DICT_ENTRY" . ((semantic-list "((const GVariantType *) \"{?*}\")" 6465 . 6496)))
          ("G_VARIANT_TYPE_BYTESTRING_ARRAY" . ((semantic-list "((const GVariantType *) \"aay\")" 7623 . 7653)))
          )
)
    (semanticdb-table "gvariant.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_VARIANT_H__" variable (:constant-flag t) nil [835 850])
            ("glib/gvarianttype.h" include (:system-flag t) nil [973 1003])
            ("glib/gstring.h" include (:system-flag t) nil [1004 1029])
            ("glib/gbytes.h" include (:system-flag t) nil [1030 1054])
            ((((0) "GVariant")) type (:superclasses ("_GVariant" type (:prototype t :type "struct") nil nil) :type "typedef") nil [1071 1112])
            ((((0) "GVariantClass")) type (:superclasses ("" type (:members (("G_VARIANT_CLASS_BOOLEAN" variable (:constant-flag t :default-value (1163 1166) :type "int") (reparse-symbol enumsubparts) [1131 1166]) ("G_VARIANT_CLASS_BYTE" variable (:constant-flag t :default-value (1202 1205) :type "int") (reparse-symbol enumsubparts) [1170 1205]) ("G_VARIANT_CLASS_INT16" variable (:constant-flag t :default-value (1241 1244) :type "int") (reparse-symbol enumsubparts) [1209 1244]) ("G_VARIANT_CLASS_UINT16" variable (:constant-flag t :default-value (1280 1283) :type "int") (reparse-symbol enumsubparts) [1248 1283]) ("G_VARIANT_CLASS_INT32" variable (:constant-flag t :default-value (1319 1322) :type "int") (reparse-symbol enumsubparts) [1287 1322]) ("G_VARIANT_CLASS_UINT32" variable (:constant-flag t :default-value (1358 1361) :type "int") (reparse-symbol enumsubparts) [1326 1361]) ("G_VARIANT_CLASS_INT64" variable (:constant-flag t :default-value (1397 1400) :type "int") (reparse-symbol enumsubparts) [1365 1400]) ("G_VARIANT_CLASS_UINT64" variable (:constant-flag t :default-value (1436 1439) :type "int") (reparse-symbol enumsubparts) [1404 1439]) ("G_VARIANT_CLASS_HANDLE" variable (:constant-flag t :default-value (1475 1478) :type "int") (reparse-symbol enumsubparts) [1443 1478]) ("G_VARIANT_CLASS_DOUBLE" variable (:constant-flag t :default-value (1514 1517) :type "int") (reparse-symbol enumsubparts) [1482 1517]) ("G_VARIANT_CLASS_STRING" variable (:constant-flag t :default-value (1553 1556) :type "int") (reparse-symbol enumsubparts) [1521 1556]) ("G_VARIANT_CLASS_OBJECT_PATH" variable (:constant-flag t :default-value (1592 1595) :type "int") (reparse-symbol enumsubparts) [1560 1595]) ("G_VARIANT_CLASS_SIGNATURE" variable (:constant-flag t :default-value (1631 1634) :type "int") (reparse-symbol enumsubparts) [1599 1634]) ("G_VARIANT_CLASS_VARIANT" variable (:constant-flag t :default-value (1670 1673) :type "int") (reparse-symbol enumsubparts) [1638 1673]) ("G_VARIANT_CLASS_MAYBE" variable (:constant-flag t :default-value (1709 1712) :type "int") (reparse-symbol enumsubparts) [1677 1712]) ("G_VARIANT_CLASS_ARRAY" variable (:constant-flag t :default-value (1748 1751) :type "int") (reparse-symbol enumsubparts) [1716 1751]) ("G_VARIANT_CLASS_TUPLE" variable (:constant-flag t :default-value (1787 1790) :type "int") (reparse-symbol enumsubparts) [1755 1790]) ("G_VARIANT_CLASS_DICT_ENTRY" variable (:constant-flag t :default-value (1826 1829) :type "int") (reparse-symbol enumsubparts) [1794 1829])) :type "enum") nil nil) :type "typedef") nil [1114 1846])
            ("G_GNUC_PRINTF" function
               (:prototype-flag t
                :type "int")
                nil [4914 4935])
            ((((0) "GVariantIter")) type (:superclasses ("_GVariantIter" type (:prototype t :type "struct") nil nil) :type "typedef") nil [16290 16332])
            ("_GVariantIter" type
               (:members (((("x" 0 nil (1) nil)) variable (:type ("gsize" type (:type "class") nil nil)) (reparse-symbol classsubparts) [16376 16388]))
                :type "struct")
                nil [16333 16391])
            ((((0) "GVariantBuilder")) type (:superclasses ("_GVariantBuilder" type (:prototype t :type "struct") nil nil) :type "typedef") nil [17866 17914])
            ("_GVariantBuilder" type
               (:members (((("x" 0 nil (1) nil)) variable (:type ("gsize" type (:type "class") nil nil)) (reparse-symbol classsubparts) [17961 17973]))
                :type "struct")
                nil [17915 17976])
            ((((0) "GVariantParseError")) type (:superclasses ("" type (:members (("G_VARIANT_PARSE_ERROR_FAILED" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [17995 18024]) ("G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18027 18069]) ("G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18072 18112]) ("G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18115 18160]) ("G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18163 18202]) ("G_VARIANT_PARSE_ERROR_INVALID_CHARACTER" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18205 18245]) ("G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18248 18292]) ("G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18295 18337]) ("G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18340 18380]) ("G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18383 18425]) ("G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18428 18465]) ("G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18468 18510]) ("G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18513 18550]) ("G_VARIANT_PARSE_ERROR_TYPE_ERROR" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18553 18586]) ("G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18589 18628]) ("G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18631 18669]) ("G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18672 18723]) ("G_VARIANT_PARSE_ERROR_VALUE_EXPECTED" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [18726 18764])) :type "enum") nil nil) :type "typedef") nil [17978 18784])
            ("G_VARIANT_PARSE_ERROR" variable (:constant-flag t) nil [18793 18814])
            ((((0) "GVariantDict")) type (:superclasses ("_GVariantDict" type (:prototype t :type "struct") nil nil) :type "typedef") nil [24204 24246])
            ("_GVariantDict" type
               (:members (((("x" 0 nil (1) nil)) variable (:type ("gsize" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24290 24302]))
                :type "struct")
                nil [24247 24305]))          
      :file "gvariant.h"
      :pointmax 27149
      :fsize 27150
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 27107 . 27118) (punctuation 27104 . 27105) (semantic-list 27076 . 27104) (symbol 27036 . 27056) (VOID 27004 . 27008) (symbol 26981 . 27003) (punctuation 26979 . 26980) (semantic-list 26951 . 26979) (symbol 26911 . 26929) (punctuation 26892 . 26893) (symbol 26879 . 26891) (symbol 26856 . 26878) (punctuation 26854 . 26855) (semantic-list 26826 . 26854) (symbol 26786 . 26804) (punctuation 26763 . 26764) (symbol 26754 . 26762) (symbol 26731 . 26753) (punctuation 26729 . 26730) (semantic-list 26701 . 26729) (symbol 26661 . 26681) (VOID 26629 . 26633) (symbol 26606 . 26628) (punctuation 26604 . 26605) (semantic-list 26476 . 26604) (symbol 26436 . 26457) (symbol 26404 . 26412) (symbol 26381 . 26403) (punctuation 26379 . 26380) (semantic-list 26149 . 26379) (symbol 26109 . 26136) (VOID 26077 . 26081) (symbol 26054 . 26076) (punctuation 26052 . 26053) (semantic-list 25736 . 26052) (symbol 25696 . 25717) (VOID 25664 . 25668) (symbol 25641 . 25663) (punctuation 25639 . 25640) (semantic-list 25511 . 25639) (symbol 25471 . 25494) (symbol 25439 . 25447) (symbol 25416 . 25438) (punctuation 25414 . 25415) (semantic-list 25176 . 25414) (symbol 25136 . 25163) (punctuation 25113 . 25114) (symbol 25104 . 25112) (symbol 25081 . 25103) (punctuation 25079 . 25080) (semantic-list 24763 . 25079) (symbol 24723 . 24744) (symbol 24691 . 24699) (symbol 24668 . 24690) (punctuation 24665 . 24666) (semantic-list 24532 . 24665) (symbol 24492 . 24511) (VOID 24460 . 24464) (symbol 24437 . 24459) (punctuation 24434 . 24435) (semantic-list 24402 . 24434) (symbol 24362 . 24380) (punctuation 24343 . 24344) (symbol 24330 . 24342) (symbol 24307 . 24329) (punctuation 24201 . 24202) (semantic-list 24090 . 24201) (symbol 24050 . 24067) (symbol 24018 . 24022) (symbol 23996 . 24017) (punctuation 23993 . 23994) (semantic-list 23857 . 23993) (symbol 23817 . 23852) (punctuation 23791 . 23792) (symbol 23785 . 23790) (symbol 23762 . 23784) (punctuation 23759 . 23760) (semantic-list 23629 . 23759) (symbol 23589 . 23612) (punctuation 23566 . 23567) (symbol 23557 . 23565) (symbol 23535 . 23556) (punctuation 23533 . 23534) (semantic-list 23425 . 23533) (symbol 23385 . 23405) (punctuation 23362 . 23363) (symbol 23353 . 23361) (symbol 23331 . 23352) (punctuation 23329 . 23330) (semantic-list 22893 . 23329) (symbol 22853 . 22868) (punctuation 22830 . 22831) (symbol 22821 . 22829) (symbol 22799 . 22820) (punctuation 22796 . 22797) (semantic-list 22551 . 22796) (symbol 22511 . 22540) (symbol 22479 . 22487) (symbol 22456 . 22478) (punctuation 22454 . 22455) (semantic-list 22112 . 22454) (symbol 22072 . 22088) (VOID 22040 . 22044) (symbol 22018 . 22039) (punctuation 22016 . 22017) (semantic-list 21776 . 22016) (symbol 21736 . 21752) (punctuation 21713 . 21714) (symbol 21704 . 21712) (symbol 21682 . 21703) (punctuation 21680 . 21681) (semantic-list 21463 . 21680) (symbol 21423 . 21436) (VOID 21391 . 21395) (symbol 21369 . 21390) (punctuation 21367 . 21368) (semantic-list 21252 . 21367) (symbol 21212 . 21225) (punctuation 21189 . 21190) (symbol 21180 . 21188) (symbol 21158 . 21179) (punctuation 21155 . 21156) (semantic-list 20943 . 21155) (symbol 20903 . 20931) (VOID 20871 . 20875) (symbol 20849 . 20870) (punctuation 20847 . 20848) (semantic-list 20628 . 20847) (symbol 20588 . 20609) (VOID 20556 . 20560) (symbol 20534 . 20555) (punctuation 20532 . 20533) (semantic-list 20399 . 20532) (symbol 20359 . 20386) (VOID 20327 . 20331) (symbol 20305 . 20326) (punctuation 20303 . 20304) (semantic-list 20272 . 20303) (symbol 20232 . 20255) (VOID 20200 . 20204) (symbol 20178 . 20199) (punctuation 20176 . 20177) (semantic-list 20044 . 20176) (symbol 20004 . 20026) (VOID 19972 . 19976) (symbol 19950 . 19971) (punctuation 19948 . 19949) (semantic-list 19917 . 19948) (symbol 19877 . 19900) (VOID 19845 . 19849) (symbol 19823 . 19844) (punctuation 19821 . 19822) (semantic-list 19790 . 19821) (symbol 19750 . 19771) (punctuation 19727 . 19728) (symbol 19718 . 19726) (symbol 19696 . 19717) (punctuation 19694 . 19695) (semantic-list 19562 . 19694) (symbol 19522 . 19544) (VOID 19490 . 19494) (symbol 19468 . 19489) (punctuation 19466 . 19467) (semantic-list 19435 . 19466) (symbol 19395 . 19416) (punctuation 19379 . 19380) (symbol 19363 . 19378) (symbol 19341 . 19362) (punctuation 19339 . 19340) (semantic-list 19308 . 19339) (symbol 19268 . 19291) (VOID 19236 . 19240) (symbol 19214 . 19235) (punctuation 19212 . 19213) (semantic-list 19184 . 19212) (symbol 19144 . 19165) (punctuation 19128 . 19129) (symbol 19112 . 19127) (symbol 19090 . 19111) (punctuation 19087 . 19088) (semantic-list 19081 . 19087) (symbol 19041 . 19068) (symbol 19009 . 19015) (symbol 18987 . 19008) (punctuation 18984 . 18985) (semantic-list 18978 . 18984) (symbol 18938 . 18970) (symbol 18906 . 18912) (semantic-list 18876 . 18905) (symbol 18849 . 18876) (punctuation 17862 . 17863) (semantic-list 17646 . 17862) (symbol 17606 . 17625) (symbol 17574 . 17582) (symbol 17552 . 17573) (punctuation 17550 . 17551) (semantic-list 17334 . 17550) (symbol 17294 . 17313) (symbol 17262 . 17270) (symbol 17240 . 17261) (punctuation 17238 . 17239) (semantic-list 17210 . 17238) (symbol 17170 . 17195) (punctuation 17147 . 17148) (symbol 17138 . 17146) (symbol 17116 . 17137) (punctuation 17114 . 17115) (semantic-list 17086 . 17114) (symbol 17046 . 17065) (VOID 17014 . 17018) (symbol 16992 . 17013) (punctuation 16990 . 16991) (semantic-list 16962 . 16990) (symbol 16922 . 16947) (symbol 16890 . 16895) (symbol 16868 . 16889) (punctuation 16866 . 16867) (semantic-list 16838 . 16866) (symbol 16798 . 16817) (punctuation 16779 . 16780) (symbol 16766 . 16778) (symbol 16744 . 16765) (punctuation 16742 . 16743) (semantic-list 16612 . 16742) (symbol 16572 . 16591) (symbol 16540 . 16545) (symbol 16518 . 16539) (punctuation 16516 . 16517) (semantic-list 16487 . 16516) (symbol 16447 . 16465) (punctuation 16428 . 16429) (symbol 16415 . 16427) (symbol 16393 . 16414) (punctuation 16287 . 16288) (semantic-list 15744 . 16287) (symbol 15704 . 15727) (punctuation 15681 . 15682) (symbol 15672 . 15680) (symbol 15650 . 15671) (punctuation 15648 . 15649) (semantic-list 15414 . 15648) (symbol 15374 . 15398) (punctuation 15351 . 15352) (symbol 15342 . 15350) (symbol 15319 . 15341) (punctuation 15316 . 15317) (semantic-list 15287 . 15316) (symbol 15247 . 15265) (punctuation 15224 . 15225) (symbol 15215 . 15223) (symbol 15193 . 15214) (punctuation 15191 . 15192) (semantic-list 15162 . 15191) (symbol 15122 . 15146) (symbol 15090 . 15098) (symbol 15068 . 15089) (punctuation 15066 . 15067) (semantic-list 15037 . 15066) (symbol 14997 . 15022) (punctuation 14974 . 14975) (symbol 14965 . 14973) (symbol 14943 . 14964) (punctuation 14940 . 14941) (semantic-list 14813 . 14940) (symbol 14773 . 14788) (symbol 14741 . 14749) (symbol 14719 . 14740) (punctuation 14717 . 14718) (semantic-list 14688 . 14717) (symbol 14648 . 14662) (symbol 14616 . 14621) (symbol 14594 . 14615) (punctuation 14591 . 14592) (semantic-list 14349 . 14591) (symbol 14309 . 14331) (punctuation 14285 . 14286) (symbol 14277 . 14284) (symbol 14255 . 14276) (punctuation 14253 . 14254) (semantic-list 14114 . 14253) (symbol 14074 . 14089) (punctuation 14048 . 14049) (symbol 14042 . 14047) (symbol 14020 . 14041) (punctuation 14017 . 14018) (semantic-list 13887 . 14017) (symbol 13847 . 13862) (VOID 13815 . 13819) (symbol 13793 . 13814) (punctuation 13791 . 13792) (semantic-list 13762 . 13791) (symbol 13722 . 13749) (punctuation 13697 . 13698) (symbol 13690 . 13696) (symbol 13667 . 13689) (punctuation 13665 . 13666) (semantic-list 13636 . 13665) (symbol 13596 . 13614) (symbol 13564 . 13577) (symbol 13542 . 13563) (punctuation 13540 . 13541) (semantic-list 13511 . 13540) (symbol 13471 . 13489) (symbol 13439 . 13444) (symbol 13417 . 13438) (punctuation 13414 . 13415) (semantic-list 13169 . 13414) (symbol 13129 . 13154) (symbol 13097 . 13110) (symbol 13075 . 13096) (punctuation 13073 . 13074) (semantic-list 12829 . 13073) (symbol 12789 . 12811) (punctuation 12766 . 12767) (symbol 12757 . 12765) (symbol 12735 . 12756) (punctuation 12733 . 12734) (semantic-list 12411 . 12733) (symbol 12371 . 12387) (symbol 12339 . 12347) (symbol 12317 . 12338) (punctuation 12315 . 12316) (semantic-list 12183 . 12315) (symbol 12143 . 12168) (punctuation 12120 . 12121) (symbol 12111 . 12119) (symbol 12089 . 12110) (punctuation 12087 . 12088) (semantic-list 11767 . 12087) (symbol 11727 . 11746) (VOID 11695 . 11699) (symbol 11673 . 11694) (punctuation 11671 . 11672) (semantic-list 11642 . 11671) (symbol 11602 . 11622) (symbol 11570 . 11575) (symbol 11548 . 11569) (punctuation 11546 . 11547) (semantic-list 11517 . 11546) (symbol 11477 . 11496) (punctuation 11454 . 11455) (symbol 11445 . 11453) (symbol 11423 . 11444) (punctuation 11420 . 11421) (semantic-list 11291 . 11420) (symbol 11251 . 11275) (punctuation 11228 . 11229) (symbol 11219 . 11227) (symbol 11197 . 11218) (punctuation 11195 . 11196) (semantic-list 11056 . 11195) (symbol 11016 . 11035) (punctuation 10993 . 10994) (symbol 10984 . 10992) (symbol 10962 . 10983) (punctuation 10960 . 10961) (semantic-list 10714 . 10960) (symbol 10674 . 10693) (punctuation 10651 . 10652) (symbol 10642 . 10650) (symbol 10620 . 10641) (punctuation 10618 . 10619) (semantic-list 10482 . 10618) (symbol 10442 . 10461) (punctuation 10419 . 10420) (symbol 10410 . 10418) (symbol 10388 . 10409) (punctuation 10385 . 10386) (semantic-list 10253 . 10385) (symbol 10213 . 10243) (punctuation 10188 . 10189) (punctuation 10187 . 10188) (symbol 10181 . 10186) (symbol 10159 . 10180) (punctuation 10157 . 10158) (semantic-list 10025 . 10157) (symbol 9985 . 10015) (punctuation 9966 . 9967) (punctuation 9965 . 9966) (symbol 9959 . 9964) (CONST 9953 . 9958) (symbol 9931 . 9952) (punctuation 9929 . 9930) (semantic-list 9797 . 9929) (symbol 9757 . 9781) (punctuation 9731 . 9732) (symbol 9725 . 9730) (symbol 9703 . 9724) (punctuation 9701 . 9702) (semantic-list 9672 . 9701) (symbol 9632 . 9656) (punctuation 9612 . 9613) (symbol 9606 . 9611) (CONST 9600 . 9605) (symbol 9578 . 9599) (punctuation 9576 . 9577) (semantic-list 9444 . 9576) (symbol 9404 . 9422) (punctuation 9379 . 9380) (punctuation 9378 . 9379) (symbol 9372 . 9377) (symbol 9350 . 9371) (punctuation 9348 . 9349) (semantic-list 9216 . 9348) (symbol 9176 . 9194) (punctuation 9157 . 9158) (punctuation 9156 . 9157) (symbol 9150 . 9155) (CONST 9144 . 9149) (symbol 9121 . 9143) (punctuation 9119 . 9120) (semantic-list 8987 . 9119) (symbol 8947 . 8965) (punctuation 8922 . 8923) (punctuation 8921 . 8922) (symbol 8915 . 8920) (symbol 8893 . 8914) (punctuation 8891 . 8892) (semantic-list 8759 . 8891) (symbol 8719 . 8737) (punctuation 8700 . 8701) (punctuation 8699 . 8700) (symbol 8693 . 8698) (CONST 8687 . 8692) (symbol 8665 . 8686) (punctuation 8663 . 8664) (semantic-list 8531 . 8663) (symbol 8491 . 8511) (punctuation 8465 . 8466) (symbol 8459 . 8464) (symbol 8437 . 8458) (punctuation 8435 . 8436) (semantic-list 8303 . 8435) (symbol 8263 . 8283) (punctuation 8243 . 8244) (symbol 8237 . 8242) (CONST 8231 . 8236) (symbol 8209 . 8230) (punctuation 8207 . 8208) (semantic-list 8178 . 8207) (symbol 8138 . 8159) (punctuation 8115 . 8116) (symbol 8106 . 8114) (symbol 8084 . 8105) (punctuation 8082 . 8083) (semantic-list 8053 . 8082) (symbol 8013 . 8033) (symbol 7981 . 7988) (symbol 7959 . 7980) (punctuation 7957 . 7958) (semantic-list 7928 . 7957) (symbol 7888 . 7908) (symbol 7856 . 7862) (symbol 7834 . 7855) (punctuation 7832 . 7833) (semantic-list 7803 . 7832) (symbol 7763 . 7783) (symbol 7731 . 7738) (symbol 7709 . 7730) (punctuation 7707 . 7708) (semantic-list 7678 . 7707) (symbol 7638 . 7657) (symbol 7606 . 7612) (symbol 7584 . 7605) (punctuation 7582 . 7583) (semantic-list 7553 . 7582) (symbol 7513 . 7533) (symbol 7481 . 7488) (symbol 7459 . 7480) (punctuation 7457 . 7458) (semantic-list 7428 . 7457) (symbol 7388 . 7407) (symbol 7356 . 7362) (symbol 7334 . 7355) (punctuation 7332 . 7333) (semantic-list 7303 . 7332) (symbol 7263 . 7283) (symbol 7231 . 7238) (symbol 7209 . 7230) (punctuation 7207 . 7208) (semantic-list 7178 . 7207) (symbol 7138 . 7157) (symbol 7106 . 7112) (symbol 7084 . 7105) (punctuation 7082 . 7083) (semantic-list 7053 . 7082) (symbol 7013 . 7031) (symbol 6981 . 6987) (symbol 6959 . 6980) (punctuation 6957 . 6958) (semantic-list 6928 . 6957) (symbol 6888 . 6909) (symbol 6856 . 6864) (symbol 6834 . 6855) (punctuation 6832 . 6833) (semantic-list 6475 . 6832) (symbol 6435 . 6460) (punctuation 6412 . 6413) (symbol 6403 . 6411) (symbol 6381 . 6402) (punctuation 6379 . 6380) (semantic-list 6248 . 6379) (symbol 6208 . 6238) (punctuation 6185 . 6186) (symbol 6176 . 6184) (symbol 6154 . 6175) (punctuation 6152 . 6153) (semantic-list 6122 . 6152) (symbol 6082 . 6106) (punctuation 6059 . 6060) (symbol 6050 . 6058) (symbol 6028 . 6049) (punctuation 6026 . 6027) (semantic-list 5895 . 6026) (symbol 5855 . 5873) (punctuation 5832 . 5833) (symbol 5823 . 5831) (symbol 5800 . 5822) (punctuation 5798 . 5799) (semantic-list 5667 . 5798) (symbol 5627 . 5645) (punctuation 5604 . 5605) (symbol 5595 . 5603) (symbol 5573 . 5594) (punctuation 5571 . 5572) (semantic-list 5542 . 5571) (symbol 5502 . 5523) (punctuation 5479 . 5480) (symbol 5470 . 5478) (symbol 5448 . 5469) (punctuation 5446 . 5447) (semantic-list 5416 . 5446) (symbol 5376 . 5398) (symbol 5344 . 5352) (symbol 5322 . 5343) (punctuation 5320 . 5321) (semantic-list 5287 . 5320) (symbol 5247 . 5270) (punctuation 5224 . 5225) (symbol 5215 . 5223) (symbol 5193 . 5214) (punctuation 5191 . 5192) (semantic-list 5161 . 5191) (symbol 5121 . 5145) (symbol 5089 . 5097) (symbol 5067 . 5088) (punctuation 5065 . 5066) (semantic-list 5030 . 5065) (symbol 4990 . 5015) (punctuation 4967 . 4968) (symbol 4958 . 4966) (symbol 4936 . 4957) (number 4932 . 4933) (number 4929 . 4930) (semantic-list 4798 . 4913) (symbol 4758 . 4778) (punctuation 4735 . 4736) (symbol 4726 . 4734) (symbol 4703 . 4725) (punctuation 4701 . 4702) (semantic-list 4671 . 4701) (symbol 4631 . 4656) (punctuation 4608 . 4609) (symbol 4599 . 4607) (symbol 4576 . 4598) (punctuation 4574 . 4575) (semantic-list 4544 . 4574) (symbol 4504 . 4524) (punctuation 4481 . 4482) (symbol 4472 . 4480) (symbol 4450 . 4471) (punctuation 4448 . 4449) (semantic-list 4419 . 4448) (symbol 4379 . 4399) (punctuation 4356 . 4357) (symbol 4347 . 4355) (symbol 4325 . 4346) (punctuation 4323 . 4324) (semantic-list 4294 . 4323) (symbol 4254 . 4274) (punctuation 4231 . 4232) (symbol 4222 . 4230) (symbol 4200 . 4221) (punctuation 4198 . 4199) (semantic-list 4169 . 4198) (symbol 4129 . 4149) (punctuation 4106 . 4107) (symbol 4097 . 4105) (symbol 4075 . 4096) (punctuation 4073 . 4074) (semantic-list 4044 . 4073) (symbol 4004 . 4023) (punctuation 3981 . 3982) (symbol 3972 . 3980) (symbol 3950 . 3971) (punctuation 3948 . 3949) (semantic-list 3919 . 3948) (symbol 3879 . 3899) (punctuation 3856 . 3857) (symbol 3847 . 3855) (symbol 3825 . 3846) (punctuation 3823 . 3824) (semantic-list 3794 . 3823) (symbol 3754 . 3773) (punctuation 3731 . 3732) (symbol 3722 . 3730) (symbol 3700 . 3721) (punctuation 3698 . 3699) (semantic-list 3669 . 3698) (symbol 3629 . 3649) (punctuation 3606 . 3607) (symbol 3597 . 3605) (symbol 3575 . 3596) (punctuation 3573 . 3574) (semantic-list 3544 . 3573) (symbol 3504 . 3523) (punctuation 3481 . 3482) (symbol 3472 . 3480) (symbol 3450 . 3471) (punctuation 3448 . 3449) (semantic-list 3419 . 3448) (symbol 3379 . 3397) (punctuation 3356 . 3357) (symbol 3347 . 3355) (symbol 3325 . 3346) (punctuation 3323 . 3324) (semantic-list 3294 . 3323) (symbol 3254 . 3275) (punctuation 3231 . 3232) (symbol 3222 . 3230) (symbol 3200 . 3221) (punctuation 3198 . 3199) (semantic-list 3169 . 3198) (symbol 3129 . 3147) (symbol 3097 . 3110) (symbol 3075 . 3096) (punctuation 3073 . 3074) (semantic-list 3044 . 3073) (symbol 3004 . 3026) (symbol 2972 . 2980) (symbol 2950 . 2971) (punctuation 2948 . 2949) (semantic-list 2818 . 2948) (symbol 2778 . 2798) (symbol 2746 . 2754) (symbol 2724 . 2745) (punctuation 2722 . 2723) (semantic-list 2693 . 2722) (symbol 2653 . 2678) (punctuation 2633 . 2634) (symbol 2627 . 2632) (CONST 2621 . 2626) (symbol 2599 . 2620) (punctuation 2597 . 2598) (semantic-list 2568 . 2597) (symbol 2528 . 2546) (punctuation 2515 . 2516) (symbol 2502 . 2514) (CONST 2496 . 2501) (symbol 2474 . 2495) (punctuation 2471 . 2472) (semantic-list 2442 . 2471) (symbol 2402 . 2420) (punctuation 2379 . 2380) (symbol 2370 . 2378) (symbol 2348 . 2369) (punctuation 2346 . 2347) (semantic-list 2317 . 2346) (symbol 2277 . 2298) (symbol 2245 . 2253) (symbol 2223 . 2244) (punctuation 2221 . 2222) (semantic-list 2192 . 2221) (symbol 2152 . 2170) (punctuation 2129 . 2130) (symbol 2120 . 2128) (symbol 2098 . 2119) (punctuation 2096 . 2097) (semantic-list 2067 . 2096) (symbol 2027 . 2040) (punctuation 2004 . 2005) (symbol 1995 . 2003) (symbol 1973 . 1994) (punctuation 1971 . 1972) (semantic-list 1942 . 1971) (symbol 1902 . 1917) (VOID 1870 . 1874) (symbol 1848 . 1869) (symbol 1056 . 1069) (string 923 . 964) (symbol 917 . 922) (punctuation 916 . 917))
      :lexical-table 
        '(("__G_VARIANT_H__")
          ("G_VARIANT_PARSE_ERROR" . ((semantic-list "(g_variant_parse_error_quark ())" 18815 . 18847)))
          )
)
    (semanticdb-table "gversion.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_VERSION_H__" variable (:constant-flag t) nil [1086 1101])
            ("glib/gtypes.h" include (:system-flag t) nil [1224 1248])
            ((("glib_major_version" 0 nil nil nil)) variable (:constant-flag t :type ("guint" type (:type "class") nil nil)) nil [1274 1305])
            ((("glib_minor_version" 0 nil nil nil)) variable (:constant-flag t :type ("guint" type (:type "class") nil nil)) nil [1315 1346])
            ((("glib_micro_version" 0 nil nil nil)) variable (:constant-flag t :type ("guint" type (:type "class") nil nil)) nil [1356 1387])
            ((("glib_interface_age" 0 nil nil nil)) variable (:constant-flag t :type ("guint" type (:type "class") nil nil)) nil [1397 1428])
            ((("glib_binary_age" 0 nil nil nil)) variable (:constant-flag t :type ("guint" type (:type "class") nil nil)) nil [1438 1466])
            ("GLIB_CHECK_VERSION" variable (:constant-flag t) nil [1668 1686]))          
      :file "gversion.h"
      :pointmax 1980
      :fsize 1979
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((symbol 1937 . 1948) (punctuation 1657 . 1658) (semantic-list 1523 . 1657) (symbol 1504 . 1522) (punctuation 1502 . 1503) (symbol 1496 . 1501) (CONST 1490 . 1495) (symbol 1468 . 1489) (symbol 1429 . 1437) (symbol 1388 . 1396) (symbol 1347 . 1355) (symbol 1306 . 1314) (symbol 1265 . 1273) (symbol 1250 . 1263) (string 1174 . 1215) (symbol 1168 . 1173) (punctuation 1167 . 1168))
      :lexical-table 
        '(("GLIB_CHECK_VERSION" (spp-arg-list ("major" "minor" "micro") 1686 . 1705) . ((semantic-list "(GLIB_MAJOR_VERSION > (major) || \\
     (GLIB_MAJOR_VERSION == (major) && GLIB_MINOR_VERSION > (minor)) || \\
     (GLIB_MAJOR_VERSION == (major) && GLIB_MINOR_VERSION == (minor) && \\
      GLIB_MICRO_VERSION >= (micro)))" 1715 . 1935)))
          ("__G_VERSION_H__")
          )
)
    (semanticdb-table "gversionmacros.h"
      :major-mode 'c-mode
      :tags 
        '( ("__G_VERSION_MACROS_H__" variable (:constant-flag t) nil [1093 1115])
            ("G_ENCODE_VERSION" variable (:constant-flag t) nil [1279 1295])
            ("GLIB_VERSION_2_26" variable (:constant-flag t) nil [1585 1602])
            ("GLIB_VERSION_2_28" variable (:constant-flag t) nil [1807 1824])
            ("GLIB_VERSION_2_30" variable (:constant-flag t) nil [2029 2046])
            ("GLIB_VERSION_2_32" variable (:constant-flag t) nil [2251 2268])
            ("GLIB_VERSION_2_34" variable (:constant-flag t) nil [2473 2490])
            ("GLIB_VERSION_2_36" variable (:constant-flag t) nil [2695 2712])
            ("GLIB_VERSION_2_38" variable (:constant-flag t) nil [2917 2934])
            ("GLIB_VERSION_2_40" variable (:constant-flag t) nil [3139 3156])
            ("GLIB_VERSION_2_42" variable (:constant-flag t) nil [3361 3378])
            ("GLIB_VERSION_2_44" variable (:constant-flag t) nil [3583 3600])
            ("GLIB_VERSION_2_46" variable (:constant-flag t) nil [3805 3822])
            ("GLIB_VERSION_2_48" variable (:constant-flag t) nil [4027 4044])
            ("GLIB_VERSION_CUR_STABLE" variable (:constant-flag t) nil [4335 4358])
            ("GLIB_VERSION_PREV_STABLE" variable (:constant-flag t) nil [4629 4653])
            ("GLIB_VERSION_MIN_REQUIRED" variable (:constant-flag t) nil [5587 5612])
            ("GLIB_VERSION_MIN_REQUIRED" variable (:constant-flag t) nil [5725 5750])
            ("GLIB_VERSION_MAX_ALLOWED" variable (:constant-flag t) nil [6653 6677])
            ("GLIB_AVAILABLE_IN_ALL" variable (:constant-flag t) nil [7382 7403])
            ("GLIB_DEPRECATED_IN_2_26" variable (:constant-flag t) nil [7571 7594])
            ("GLIB_DEPRECATED_IN_2_26_FOR" variable (:constant-flag t) nil [7635 7662])
            ("GLIB_AVAILABLE_IN_2_26" variable (:constant-flag t) nil [7969 7991])
            ("GLIB_DEPRECATED_IN_2_28" variable (:constant-flag t) nil [8089 8112])
            ("GLIB_DEPRECATED_IN_2_28_FOR" variable (:constant-flag t) nil [8153 8180])
            ("GLIB_AVAILABLE_IN_2_28" variable (:constant-flag t) nil [8487 8509])
            ("GLIB_DEPRECATED_IN_2_30" variable (:constant-flag t) nil [8607 8630])
            ("GLIB_DEPRECATED_IN_2_30_FOR" variable (:constant-flag t) nil [8671 8698])
            ("GLIB_AVAILABLE_IN_2_30" variable (:constant-flag t) nil [9005 9027])
            ("GLIB_DEPRECATED_IN_2_32" variable (:constant-flag t) nil [9125 9148])
            ("GLIB_DEPRECATED_IN_2_32_FOR" variable (:constant-flag t) nil [9189 9216])
            ("GLIB_AVAILABLE_IN_2_32" variable (:constant-flag t) nil [9523 9545])
            ("GLIB_DEPRECATED_IN_2_34" variable (:constant-flag t) nil [9643 9666])
            ("GLIB_DEPRECATED_IN_2_34_FOR" variable (:constant-flag t) nil [9707 9734])
            ("GLIB_AVAILABLE_IN_2_34" variable (:constant-flag t) nil [10041 10063])
            ("GLIB_DEPRECATED_IN_2_36" variable (:constant-flag t) nil [10161 10184])
            ("GLIB_DEPRECATED_IN_2_36_FOR" variable (:constant-flag t) nil [10225 10252])
            ("GLIB_AVAILABLE_IN_2_36" variable (:constant-flag t) nil [10559 10581])
            ("GLIB_DEPRECATED_IN_2_38" variable (:constant-flag t) nil [10679 10702])
            ("GLIB_DEPRECATED_IN_2_38_FOR" variable (:constant-flag t) nil [10743 10770])
            ("GLIB_AVAILABLE_IN_2_38" variable (:constant-flag t) nil [11077 11099])
            ("GLIB_DEPRECATED_IN_2_40" variable (:constant-flag t) nil [11197 11220])
            ("GLIB_DEPRECATED_IN_2_40_FOR" variable (:constant-flag t) nil [11261 11288])
            ("GLIB_AVAILABLE_IN_2_40" variable (:constant-flag t) nil [11595 11617])
            ("GLIB_DEPRECATED_IN_2_42" variable (:constant-flag t) nil [11715 11738])
            ("GLIB_DEPRECATED_IN_2_42_FOR" variable (:constant-flag t) nil [11779 11806])
            ("GLIB_AVAILABLE_IN_2_42" variable (:constant-flag t) nil [12113 12135])
            ("GLIB_DEPRECATED_IN_2_44" variable (:constant-flag t) nil [12233 12256])
            ("GLIB_DEPRECATED_IN_2_44_FOR" variable (:constant-flag t) nil [12297 12324])
            ("GLIB_AVAILABLE_IN_2_44" variable (:constant-flag t) nil [12631 12653])
            ("GLIB_DEPRECATED_IN_2_46" variable (:constant-flag t) nil [12751 12774])
            ("GLIB_DEPRECATED_IN_2_46_FOR" variable (:constant-flag t) nil [12815 12842])
            ("GLIB_AVAILABLE_IN_2_46" variable (:constant-flag t) nil [13149 13171])
            ("GLIB_DEPRECATED_IN_2_48" variable (:constant-flag t) nil [13269 13292])
            ("GLIB_DEPRECATED_IN_2_48_FOR" variable (:constant-flag t) nil [13333 13360])
            ("GLIB_AVAILABLE_IN_2_48" variable (:constant-flag t) nil [13667 13689]))          
      :file "gversionmacros.h"
      :pointmax 13765
      :fsize 13764
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((string 1188 . 1229) (symbol 1182 . 1187) (punctuation 1181 . 1182))
      :lexical-table 
        '(("GLIB_VERSION_2_26" . ((semantic-list "(G_ENCODE_VERSION (2, 26))" 1609 . 1635)))
          ("GLIB_VERSION_2_40" . ((semantic-list "(G_ENCODE_VERSION (2, 40))" 3163 . 3189)))
          ("GLIB_VERSION_MIN_REQUIRED" . ((semantic-list "(GLIB_VERSION_CUR_STABLE + 2)" 5756 . 5785)))
          ("GLIB_AVAILABLE_IN_2_32" . ((symbol "_GLIB_EXTERN" 9562 . 9574)))
          ("GLIB_DEPRECATED_IN_2_46" . ((symbol "GLIB_DEPRECATED" 12790 . 12805)))
          ("GLIB_DEPRECATED_IN_2_46_FOR" (spp-arg-list ("f") 12842 . 12845) . ((symbol "GLIB_DEPRECATED_FOR" 12854 . 12873) (semantic-list "(f)" 12873 . 12876)))
          ("GLIB_VERSION_2_34" . ((semantic-list "(G_ENCODE_VERSION (2, 34))" 2497 . 2523)))
          ("GLIB_AVAILABLE_IN_2_26" . ((symbol "_GLIB_EXTERN" 8008 . 8020)))
          ("GLIB_DEPRECATED_IN_2_28_FOR" (spp-arg-list ("f") 8180 . 8183) . ((symbol "GLIB_DEPRECATED_FOR" 8192 . 8211) (semantic-list "(f)" 8211 . 8214)))
          ("GLIB_AVAILABLE_IN_2_40" . ((symbol "_GLIB_EXTERN" 11634 . 11646)))
          ("GLIB_DEPRECATED_IN_2_42_FOR" (spp-arg-list ("f") 11806 . 11809) . ((symbol "GLIB_DEPRECATED_FOR" 11818 . 11837) (semantic-list "(f)" 11837 . 11840)))
          ("GLIB_VERSION_2_28" . ((semantic-list "(G_ENCODE_VERSION (2, 28))" 1831 . 1857)))
          ("GLIB_VERSION_2_42" . ((semantic-list "(G_ENCODE_VERSION (2, 42))" 3385 . 3411)))
          ("GLIB_AVAILABLE_IN_2_34" . ((symbol "_GLIB_EXTERN" 10080 . 10092)))
          ("GLIB_DEPRECATED_IN_2_48" . ((symbol "GLIB_DEPRECATED" 13308 . 13323)))
          ("GLIB_VERSION_2_36" . ((semantic-list "(G_ENCODE_VERSION (2, 36))" 2719 . 2745)))
          ("GLIB_AVAILABLE_IN_2_28" . ((symbol "_GLIB_EXTERN" 8526 . 8538)))
          ("GLIB_AVAILABLE_IN_2_42" . ((symbol "_GLIB_EXTERN" 12152 . 12164)))
          ("GLIB_VERSION_2_44" . ((semantic-list "(G_ENCODE_VERSION (2, 44))" 3607 . 3633)))
          ("GLIB_VERSION_PREV_STABLE" . ((semantic-list "(G_ENCODE_VERSION (GLIB_MAJOR_VERSION, GLIB_MINOR_VERSION - 2))" 4661 . 4724)))
          ("GLIB_DEPRECATED_IN_2_30" . ((symbol "GLIB_DEPRECATED" 8646 . 8661)))
          ("GLIB_DEPRECATED_IN_2_36_FOR" (spp-arg-list ("f") 10252 . 10255) . ((symbol "GLIB_DEPRECATED_FOR" 10264 . 10283) (semantic-list "(f)" 10283 . 10286)))
          ("GLIB_AVAILABLE_IN_2_36" . ((symbol "_GLIB_EXTERN" 10598 . 10610)))
          ("GLIB_VERSION_2_38" . ((semantic-list "(G_ENCODE_VERSION (2, 38))" 2941 . 2967)))
          ("GLIB_VERSION_CUR_STABLE" . ((semantic-list "(G_ENCODE_VERSION (GLIB_MAJOR_VERSION, GLIB_MINOR_VERSION))" 4367 . 4426)))
          ("GLIB_DEPRECATED_IN_2_32_FOR" (spp-arg-list ("f") 9216 . 9219) . ((symbol "GLIB_DEPRECATED_FOR" 9228 . 9247) (semantic-list "(f)" 9247 . 9250)))
          ("GLIB_AVAILABLE_IN_2_44" . ((symbol "_GLIB_EXTERN" 12670 . 12682)))
          ("GLIB_VERSION_2_46" . ((semantic-list "(G_ENCODE_VERSION (2, 46))" 3829 . 3855)))
          ("GLIB_VERSION_MAX_ALLOWED" . ((semantic-list "(GLIB_VERSION_CUR_STABLE)" 6683 . 6708)))
          ("GLIB_DEPRECATED_IN_2_32" . ((symbol "GLIB_DEPRECATED" 9164 . 9179)))
          ("GLIB_AVAILABLE_IN_2_38" . ((symbol "_GLIB_EXTERN" 11116 . 11128)))
          ("GLIB_DEPRECATED_IN_2_48_FOR" (spp-arg-list ("f") 13360 . 13363) . ((symbol "GLIB_DEPRECATED_FOR" 13372 . 13391) (semantic-list "(f)" 13391 . 13394)))
          ("G_ENCODE_VERSION" (spp-arg-list ("major" "minor") 1295 . 1308) . ((semantic-list "((major) << 16 | (minor) << 8)" 1311 . 1341)))
          ("GLIB_DEPRECATED_IN_2_26" . ((symbol "GLIB_DEPRECATED" 7610 . 7625)))
          ("GLIB_DEPRECATED_IN_2_40" . ((symbol "GLIB_DEPRECATED" 11236 . 11251)))
          ("GLIB_DEPRECATED_IN_2_44_FOR" (spp-arg-list ("f") 12324 . 12327) . ((symbol "GLIB_DEPRECATED_FOR" 12336 . 12355) (semantic-list "(f)" 12355 . 12358)))
          ("GLIB_AVAILABLE_IN_2_46" . ((symbol "_GLIB_EXTERN" 13188 . 13200)))
          ("GLIB_VERSION_2_48" . ((semantic-list "(G_ENCODE_VERSION (2, 48))" 4051 . 4077)))
          ("GLIB_AVAILABLE_IN_ALL" . ((symbol "_GLIB_EXTERN" 7422 . 7434)))
          ("GLIB_DEPRECATED_IN_2_26_FOR" (spp-arg-list ("f") 7662 . 7665) . ((symbol "GLIB_DEPRECATED_FOR" 7674 . 7693) (semantic-list "(f)" 7693 . 7696)))
          ("GLIB_DEPRECATED_IN_2_34" . ((symbol "GLIB_DEPRECATED" 9682 . 9697)))
          ("GLIB_DEPRECATED_IN_2_40_FOR" (spp-arg-list ("f") 11288 . 11291) . ((symbol "GLIB_DEPRECATED_FOR" 11300 . 11319) (semantic-list "(f)" 11319 . 11322)))
          ("GLIB_DEPRECATED_IN_2_28" . ((symbol "GLIB_DEPRECATED" 8128 . 8143)))
          ("GLIB_DEPRECATED_IN_2_42" . ((symbol "GLIB_DEPRECATED" 11754 . 11769)))
          ("GLIB_AVAILABLE_IN_2_48" . ((symbol "_GLIB_EXTERN" 13706 . 13718)))
          ("GLIB_VERSION_2_30" . ((semantic-list "(G_ENCODE_VERSION (2, 30))" 2053 . 2079)))
          ("GLIB_DEPRECATED_IN_2_36" . ((symbol "GLIB_DEPRECATED" 10200 . 10215)))
          ("GLIB_DEPRECATED_IN_2_38_FOR" (spp-arg-list ("f") 10770 . 10773) . ((symbol "GLIB_DEPRECATED_FOR" 10782 . 10801) (semantic-list "(f)" 10801 . 10804)))
          ("__G_VERSION_MACROS_H__")
          ("GLIB_AVAILABLE_IN_2_30" . ((symbol "_GLIB_EXTERN" 9044 . 9056)))
          ("GLIB_DEPRECATED_IN_2_34_FOR" (spp-arg-list ("f") 9734 . 9737) . ((symbol "GLIB_DEPRECATED_FOR" 9746 . 9765) (semantic-list "(f)" 9765 . 9768)))
          ("GLIB_DEPRECATED_IN_2_44" . ((symbol "GLIB_DEPRECATED" 12272 . 12287)))
          ("GLIB_VERSION_2_32" . ((semantic-list "(G_ENCODE_VERSION (2, 32))" 2275 . 2301)))
          ("GLIB_DEPRECATED_IN_2_30_FOR" (spp-arg-list ("f") 8698 . 8701) . ((symbol "GLIB_DEPRECATED_FOR" 8710 . 8729) (semantic-list "(f)" 8729 . 8732)))
          ("GLIB_DEPRECATED_IN_2_38" . ((symbol "GLIB_DEPRECATED" 10718 . 10733)))
          )
)
    (semanticdb-table "glib-autocleanups.h"
      :major-mode 'c-mode
      :tags nil
      :file "glib-autocleanups.h"
      :pointmax 4136
      :fsize 4136
      :lastmodtime '(22332 12869 0 0)
      :unmatched-syntax '((semantic-list 4110 . 4135) (symbol 4079 . 4110) (semantic-list 4043 . 4078) (symbol 4014 . 4043) (semantic-list 3977 . 4013) (symbol 3945 . 3977) (semantic-list 3908 . 3944) (symbol 3879 . 3908) (semantic-list 3843 . 3878) (symbol 3814 . 3843) (semantic-list 3771 . 3813) (symbol 3739 . 3771) (semantic-list 3696 . 3738) (symbol 3667 . 3696) (semantic-list 3639 . 3666) (symbol 3610 . 3639) (semantic-list 3588 . 3609) (symbol 3559 . 3588) (semantic-list 3528 . 3558) (symbol 3499 . 3528) (semantic-list 3473 . 3498) (symbol 3444 . 3473) (semantic-list 3422 . 3443) (symbol 3390 . 3422) (semantic-list 3354 . 3389) (symbol 3325 . 3354) (semantic-list 3301 . 3324) (symbol 3269 . 3301) (semantic-list 3243 . 3268) (symbol 3214 . 3243) (semantic-list 3178 . 3213) (symbol 3149 . 3178) (semantic-list 3107 . 3148) (symbol 3078 . 3107) (semantic-list 3055 . 3077) (symbol 3026 . 3055) (semantic-list 2997 . 3025) (symbol 2968 . 2997) (semantic-list 2938 . 2967) (symbol 2909 . 2938) (semantic-list 2876 . 2908) (symbol 2847 . 2876) (semantic-list 2823 . 2846) (symbol 2794 . 2823) (semantic-list 2773 . 2793) (symbol 2744 . 2773) (semantic-list 2720 . 2743) (symbol 2688 . 2720) (semantic-list 2665 . 2687) (symbol 2636 . 2665) (semantic-list 2600 . 2635) (symbol 2571 . 2600) (semantic-list 2534 . 2570) (symbol 2505 . 2534) (semantic-list 2465 . 2504) (symbol 2436 . 2465) (semantic-list 2412 . 2435) (symbol 2383 . 2412) (semantic-list 2331 . 2382) (symbol 2302 . 2331) (semantic-list 2267 . 2301) (symbol 2238 . 2267) (semantic-list 2212 . 2237) (symbol 2183 . 2212) (semantic-list 2152 . 2182) (symbol 2123 . 2152) (semantic-list 2086 . 2122) (symbol 2057 . 2086) (semantic-list 2024 . 2056) (symbol 1995 . 2024) (semantic-list 1964 . 1994) (symbol 1935 . 1964) (semantic-list 1911 . 1934) (symbol 1882 . 1911) (semantic-list 1861 . 1881) (symbol 1832 . 1861) (semantic-list 1803 . 1831) (symbol 1774 . 1803) (semantic-list 1741 . 1773) (symbol 1712 . 1741) (semantic-list 1690 . 1711) (symbol 1661 . 1690) (semantic-list 1628 . 1660) (symbol 1599 . 1628) (semantic-list 1576 . 1598) (symbol 1547 . 1576) (semantic-list 1527 . 1546) (symbol 1498 . 1527) (semantic-list 1467 . 1497) (symbol 1438 . 1467) (semantic-list 1409 . 1437) (symbol 1380 . 1409) (semantic-list 1356 . 1379) (symbol 1327 . 1356) (semantic-list 1289 . 1326) (symbol 1260 . 1289) (semantic-list 1225 . 1259) (symbol 1196 . 1225) (semantic-list 1055 . 1106) (semantic-list 1037 . 1054) (symbol 1006 . 1036) (VOID 1001 . 1005) (INLINE 994 . 1000) (STATIC 987 . 993) (semantic-list 941 . 985) (semantic-list 931 . 940) (symbol 899 . 930) (VOID 894 . 898) (INLINE 887 . 893) (STATIC 880 . 886) (string 830 . 871) (symbol 824 . 829) (punctuation 823 . 824))))
  :file "!usr!include!glib-2.0!glib!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
